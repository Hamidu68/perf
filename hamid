 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402ca5 <montgomery_reduce>:
         :	montgomery_reduce():
         :
         :	static const uint32_t qinv = 12287; // -inverse_mod(p,2^18)
         :	static const uint32_t rlog = 18;
         :
         :	uint16_t montgomery_reduce(uint32_t a)
         :	{
    3.32 :	  402ca5:       push   %rbp
    3.57 :	  402ca6:       mov    %rsp,%rbp
    2.66 :	  402ca9:       mov    %edi,-0x14(%rbp)
         :	  uint32_t u;
         :
         :	  u = (a * qinv);
    0.92 :	  402cac:       mov    $0x2fff,%edx
    1.41 :	  402cb1:       mov    -0x14(%rbp),%eax
    0.80 :	  402cb4:       imul   %edx,%eax
    4.14 :	  402cb7:       mov    %eax,-0x4(%rbp)
         :	  u &= ((1<<rlog)-1);
    2.13 :	  402cba:       mov    $0x12,%eax
    3.04 :	  402cbf:       mov    $0x1,%edx
    0.05 :	  402cc4:       mov    %eax,%ecx
    2.36 :	  402cc6:       shl    %cl,%edx
    5.31 :	  402cc8:       mov    %edx,%eax
    2.43 :	  402cca:       sub    $0x1,%eax
    2.42 :	  402ccd:       and    %eax,-0x4(%rbp)
         :	  u *= PARAM_Q;
    7.07 :	  402cd0:       mov    -0x4(%rbp),%eax
    4.15 :	  402cd3:       imul   $0x3001,%eax,%eax
    6.58 :	  402cd9:       mov    %eax,-0x4(%rbp)
         :	  a = a + u;
    9.50 :	  402cdc:       mov    -0x4(%rbp),%eax
    5.55 :	  402cdf:       add    %eax,-0x14(%rbp)
         :	  return a >> 18;
   17.05 :	  402ce2:       mov    -0x14(%rbp),%eax
    8.82 :	  402ce5:       shr    $0x12,%eax
         :	}
    6.25 :	  402ce8:       pop    %rbp
    0.45 :	  402ce9:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401c9a <ntt>:
         :	ntt():
         :
         :
         :
         :	/* GS_bo_to_no; omegas need to be in Montgomery domain */
         :	void ntt(uint16_t * a, const uint16_t* omega)
         :	{
    0.00 :	  401c9a:       push   %rbp
    0.00 :	  401c9b:       mov    %rsp,%rbp
    0.00 :	  401c9e:       push   %rbx
    0.01 :	  401c9f:       sub    $0x38,%rsp
    0.00 :	  401ca3:       mov    %rdi,-0x38(%rbp)
    0.00 :	  401ca7:       mov    %rsi,-0x40(%rbp)
         :	  int i, start, j, jTwiddle, distance;
         :	  uint16_t temp, W;
         :
         :
         :	  for(i=0;i<10;i+=2)
    0.01 :	  401cab:       movl   $0x0,-0x24(%rbp)
    0.00 :	  401cb2:       jmpq   401ecd <ntt+0x233>
         :	  {
         :	    // Even level
         :	    distance = (1<<i);
    0.01 :	  401cb7:       mov    -0x24(%rbp),%eax
    0.01 :	  401cba:       mov    $0x1,%edx
    0.01 :	  401cbf:       mov    %eax,%ecx
    0.00 :	  401cc1:       shl    %cl,%edx
    0.02 :	  401cc3:       mov    %edx,%eax
    0.00 :	  401cc5:       mov    %eax,-0x14(%rbp)
         :	    for(start = 0; start < distance;start++)
    0.00 :	  401cc8:       movl   $0x0,-0x20(%rbp)
    0.00 :	  401ccf:       jmpq   401db6 <ntt+0x11c>
         :	    {
         :	      jTwiddle = 0;
    0.07 :	  401cd4:       movl   $0x0,-0x18(%rbp)
         :	      for(j=start;j<PARAM_N-1;j+=2*distance)
    0.00 :	  401cdb:       mov    -0x20(%rbp),%eax
    0.44 :	  401cde:       mov    %eax,-0x1c(%rbp)
    0.05 :	  401ce1:       jmpq   401da5 <ntt+0x10b>
         :	      {
         :	        W = omega[jTwiddle++];
    0.43 :	  401ce6:       mov    -0x18(%rbp),%eax
    0.04 :	  401ce9:       lea    0x1(%rax),%edx
    2.76 :	  401cec:       mov    %edx,-0x18(%rbp)
    0.07 :	  401cef:       cltq   
    0.39 :	  401cf1:       lea    (%rax,%rax,1),%rdx
    0.00 :	  401cf5:       mov    -0x40(%rbp),%rax
    2.52 :	  401cf9:       add    %rdx,%rax
    0.06 :	  401cfc:       movzwl (%rax),%eax
    0.54 :	  401cff:       mov    %ax,-0x28(%rbp)
         :	        temp = a[j];
    0.06 :	  401d03:       mov    -0x1c(%rbp),%eax
    2.59 :	  401d06:       cltq   
    0.02 :	  401d08:       lea    (%rax,%rax,1),%rdx
    0.26 :	  401d0c:       mov    -0x38(%rbp),%rax
    0.02 :	  401d10:       add    %rdx,%rax
    2.47 :	  401d13:       movzwl (%rax),%eax
    0.18 :	  401d16:       mov    %ax,-0x26(%rbp)
         :	        a[j] = (temp + a[j + distance]); // Omit reduction (be lazy)
    0.36 :	  401d1a:       mov    -0x1c(%rbp),%eax
    0.00 :	  401d1d:       cltq   
    2.28 :	  401d1f:       lea    (%rax,%rax,1),%rdx
    0.02 :	  401d23:       mov    -0x38(%rbp),%rax
    0.32 :	  401d27:       add    %rdx,%rax
    0.01 :	  401d2a:       mov    -0x1c(%rbp),%ecx
    2.12 :	  401d2d:       mov    -0x14(%rbp),%edx
    0.04 :	  401d30:       add    %ecx,%edx
    0.32 :	  401d32:       movslq %edx,%rdx
    0.01 :	  401d35:       lea    (%rdx,%rdx,1),%rcx
    2.08 :	  401d39:       mov    -0x38(%rbp),%rdx
    0.05 :	  401d3d:       add    %rcx,%rdx
    0.25 :	  401d40:       movzwl (%rdx),%ecx
    0.04 :	  401d43:       movzwl -0x26(%rbp),%edx
    1.50 :	  401d47:       add    %ecx,%edx
    0.05 :	  401d49:       mov    %dx,(%rax)
         :	        a[j + distance] = montgomery_reduce((W * ((uint32_t)temp + 3*PARAM_Q - a[j + distance])));
    0.29 :	  401d4c:       mov    -0x1c(%rbp),%edx
    0.00 :	  401d4f:       mov    -0x14(%rbp),%eax
    1.67 :	  401d52:       add    %edx,%eax
    0.02 :	  401d54:       cltq   
    0.14 :	  401d56:       lea    (%rax,%rax,1),%rdx
    0.00 :	  401d5a:       mov    -0x38(%rbp),%rax
    1.38 :	  401d5e:       lea    (%rdx,%rax,1),%rbx
    0.02 :	  401d62:       movzwl -0x28(%rbp),%eax
    0.26 :	  401d66:       movzwl -0x26(%rbp),%ecx
    0.01 :	  401d6a:       mov    -0x1c(%rbp),%esi
    0.95 :	  401d6d:       mov    -0x14(%rbp),%edx
    0.03 :	  401d70:       add    %esi,%edx
    0.27 :	  401d72:       movslq %edx,%rdx
    0.01 :	  401d75:       lea    (%rdx,%rdx,1),%rsi
    0.83 :	  401d79:       mov    -0x38(%rbp),%rdx
    0.02 :	  401d7d:       add    %rsi,%rdx
    0.42 :	  401d80:       movzwl (%rdx),%edx
    0.05 :	  401d83:       movzwl %dx,%edx
    1.01 :	  401d86:       sub    %edx,%ecx
    0.11 :	  401d88:       mov    %ecx,%edx
    0.18 :	  401d8a:       add    $0x9003,%edx
    0.02 :	  401d90:       imul   %edx,%eax
    1.25 :	  401d93:       mov    %eax,%edi
    0.04 :	  401d95:       callq  402ca5 <montgomery_reduce>
    0.06 :	  401d9a:       mov    %ax,(%rbx)
         :	    // Even level
         :	    distance = (1<<i);
         :	    for(start = 0; start < distance;start++)
         :	    {
         :	      jTwiddle = 0;
         :	      for(j=start;j<PARAM_N-1;j+=2*distance)
    6.80 :	  401d9d:       mov    -0x14(%rbp),%eax
    0.08 :	  401da0:       add    %eax,%eax
    0.02 :	  401da2:       add    %eax,-0x1c(%rbp)
    3.55 :	  401da5:       cmpl   $0x3fe,-0x1c(%rbp)
    0.20 :	  401dac:       jle    401ce6 <ntt+0x4c>
         :
         :	  for(i=0;i<10;i+=2)
         :	  {
         :	    // Even level
         :	    distance = (1<<i);
         :	    for(start = 0; start < distance;start++)
    0.06 :	  401db2:       addl   $0x1,-0x20(%rbp)
    0.72 :	  401db6:       mov    -0x20(%rbp),%eax
    0.03 :	  401db9:       cmp    -0x14(%rbp),%eax
    0.01 :	  401dbc:       jl     401cd4 <ntt+0x3a>
         :	        a[j + distance] = montgomery_reduce((W * ((uint32_t)temp + 3*PARAM_Q - a[j + distance])));
         :	      }
         :	    }
         :
         :	    // Odd level
         :	    distance <<= 1;
    0.04 :	  401dc2:       shll   -0x14(%rbp)
         :	    for(start = 0; start < distance;start++)
    0.03 :	  401dc5:       movl   $0x0,-0x20(%rbp)
    0.00 :	  401dcc:       jmpq   401ebd <ntt+0x223>
         :	    {
         :	      jTwiddle = 0;
    0.14 :	  401dd1:       movl   $0x0,-0x18(%rbp)
         :	      for(j=start;j<PARAM_N-1;j+=2*distance)
    0.02 :	  401dd8:       mov    -0x20(%rbp),%eax
    0.68 :	  401ddb:       mov    %eax,-0x1c(%rbp)
    0.09 :	  401dde:       jmpq   401eac <ntt+0x212>
         :	      {
         :	        W = omega[jTwiddle++];
    0.83 :	  401de3:       mov    -0x18(%rbp),%eax
    0.07 :	  401de6:       lea    0x1(%rax),%edx
    2.26 :	  401de9:       mov    %edx,-0x18(%rbp)
    0.05 :	  401dec:       cltq   
    0.69 :	  401dee:       lea    (%rax,%rax,1),%rdx
    0.01 :	  401df2:       mov    -0x40(%rbp),%rax
    2.13 :	  401df6:       add    %rdx,%rax
    0.02 :	  401df9:       movzwl (%rax),%eax
    0.70 :	  401dfc:       mov    %ax,-0x28(%rbp)
         :	        temp = a[j];
    0.07 :	  401e00:       mov    -0x1c(%rbp),%eax
    2.40 :	  401e03:       cltq   
    0.01 :	  401e05:       lea    (%rax,%rax,1),%rdx
    0.64 :	  401e09:       mov    -0x38(%rbp),%rax
    0.06 :	  401e0d:       add    %rdx,%rax
    1.76 :	  401e10:       movzwl (%rax),%eax
    0.25 :	  401e13:       mov    %ax,-0x26(%rbp)
         :	        a[j] = barrett_reduce((temp + a[j + distance]));
    0.75 :	  401e17:       mov    -0x1c(%rbp),%eax
    0.01 :	  401e1a:       cltq   
    1.80 :	  401e1c:       lea    (%rax,%rax,1),%rdx
    0.03 :	  401e20:       mov    -0x38(%rbp),%rax
    0.67 :	  401e24:       lea    (%rdx,%rax,1),%rbx
    0.03 :	  401e28:       mov    -0x1c(%rbp),%edx
    1.68 :	  401e2b:       mov    -0x14(%rbp),%eax
    0.03 :	  401e2e:       add    %edx,%eax
    0.66 :	  401e30:       cltq   
    0.02 :	  401e32:       lea    (%rax,%rax,1),%rdx
    1.54 :	  401e36:       mov    -0x38(%rbp),%rax
    0.03 :	  401e3a:       add    %rdx,%rax
    0.59 :	  401e3d:       movzwl (%rax),%edx
    0.17 :	  401e40:       movzwl -0x26(%rbp),%eax
    1.25 :	  401e44:       add    %edx,%eax
    0.07 :	  401e46:       movzwl %ax,%eax
    0.46 :	  401e49:       mov    %eax,%edi
    0.02 :	  401e4b:       callq  402cea <barrett_reduce>
    0.08 :	  401e50:       mov    %ax,(%rbx)
         :	        a[j + distance] = montgomery_reduce((W * ((uint32_t)temp + 3*PARAM_Q - a[j + distance])));
    3.50 :	  401e53:       mov    -0x1c(%rbp),%edx
    0.05 :	  401e56:       mov    -0x14(%rbp),%eax
    1.11 :	  401e59:       add    %edx,%eax
    0.02 :	  401e5b:       cltq   
    2.11 :	  401e5d:       lea    (%rax,%rax,1),%rdx
    0.01 :	  401e61:       mov    -0x38(%rbp),%rax
    0.10 :	  401e65:       lea    (%rdx,%rax,1),%rbx
    0.03 :	  401e69:       movzwl -0x28(%rbp),%eax
    2.49 :	  401e6d:       movzwl -0x26(%rbp),%ecx
    0.03 :	  401e71:       mov    -0x1c(%rbp),%esi
    1.07 :	  401e74:       mov    -0x14(%rbp),%edx
    0.02 :	  401e77:       add    %esi,%edx
    2.29 :	  401e79:       movslq %edx,%rdx
    0.03 :	  401e7c:       lea    (%rdx,%rdx,1),%rsi
    1.50 :	  401e80:       mov    -0x38(%rbp),%rdx
    0.03 :	  401e84:       add    %rsi,%rdx
    2.27 :	  401e87:       movzwl (%rdx),%edx
    0.15 :	  401e8a:       movzwl %dx,%edx
    1.52 :	  401e8d:       sub    %edx,%ecx
    0.09 :	  401e8f:       mov    %ecx,%edx
    2.40 :	  401e91:       add    $0x9003,%edx
    0.02 :	  401e97:       imul   %edx,%eax
    1.68 :	  401e9a:       mov    %eax,%edi
    0.01 :	  401e9c:       callq  402ca5 <montgomery_reduce>
    0.05 :	  401ea1:       mov    %ax,(%rbx)
         :	    // Odd level
         :	    distance <<= 1;
         :	    for(start = 0; start < distance;start++)
         :	    {
         :	      jTwiddle = 0;
         :	      for(j=start;j<PARAM_N-1;j+=2*distance)
    6.45 :	  401ea4:       mov    -0x14(%rbp),%eax
    0.11 :	  401ea7:       add    %eax,%eax
    0.07 :	  401ea9:       add    %eax,-0x1c(%rbp)
    3.25 :	  401eac:       cmpl   $0x3fe,-0x1c(%rbp)
    0.39 :	  401eb3:       jle    401de3 <ntt+0x149>
         :	      }
         :	    }
         :
         :	    // Odd level
         :	    distance <<= 1;
         :	    for(start = 0; start < distance;start++)
    0.09 :	  401eb9:       addl   $0x1,-0x20(%rbp)
    1.07 :	  401ebd:       mov    -0x20(%rbp),%eax
    0.12 :	  401ec0:       cmp    -0x14(%rbp),%eax
    0.00 :	  401ec3:       jl     401dd1 <ntt+0x137>
         :	{
         :	  int i, start, j, jTwiddle, distance;
         :	  uint16_t temp, W;
         :
         :
         :	  for(i=0;i<10;i+=2)
    0.05 :	  401ec9:       addl   $0x2,-0x24(%rbp)
    0.01 :	  401ecd:       cmpl   $0x9,-0x24(%rbp)
    0.01 :	  401ed1:       jle    401cb7 <ntt+0x1d>
         :	        a[j] = barrett_reduce((temp + a[j + distance]));
         :	        a[j + distance] = montgomery_reduce((W * ((uint32_t)temp + 3*PARAM_Q - a[j + distance])));
         :	      }
         :	    }
         :	  }
         :	}
    0.01 :	  401ed7:       nop
    0.00 :	  401ed8:       add    $0x38,%rsp
    0.00 :	  401edc:       pop    %rbx
    0.00 :	  401edd:       pop    %rbp
    0.00 :	  401ede:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000400a47 <crypto_core_chacha20>:
         :	crypto_core_chacha20():
         :	        unsigned char *out,
         :	  const unsigned char *in,
         :	  const unsigned char *k,
         :	  const unsigned char *c
         :	)
         :	{
    0.06 :	  400a47:       push   %rbp
    0.00 :	  400a48:       mov    %rsp,%rbp
    0.01 :	  400a4b:       sub    $0xb0,%rsp
    0.01 :	  400a52:       mov    %rdi,-0x98(%rbp)
    0.00 :	  400a59:       mov    %rsi,-0xa0(%rbp)
    0.02 :	  400a60:       mov    %rdx,-0xa8(%rbp)
    0.02 :	  400a67:       mov    %rcx,-0xb0(%rbp)
         :	  uint32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
         :	  uint32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
         :	  int i;
         :
         :	  j0  = x0  = load_littleendian(c +  0);
    0.02 :	  400a6e:       mov    -0xb0(%rbp),%rax
    0.02 :	  400a75:       mov    %rax,%rdi
    0.01 :	  400a78:       callq  4009ae <load_littleendian>
    0.02 :	  400a7d:       mov    %eax,-0x84(%rbp)
    0.02 :	  400a83:       mov    -0x84(%rbp),%eax
    0.04 :	  400a89:       mov    %eax,-0x40(%rbp)
         :	  j1  = x1  = load_littleendian(c +  4);
    0.02 :	  400a8c:       mov    -0xb0(%rbp),%rax
    0.02 :	  400a93:       add    $0x4,%rax
    0.02 :	  400a97:       mov    %rax,%rdi
    0.00 :	  400a9a:       callq  4009ae <load_littleendian>
    0.01 :	  400a9f:       mov    %eax,-0x80(%rbp)
    0.07 :	  400aa2:       mov    -0x80(%rbp),%eax
    0.04 :	  400aa5:       mov    %eax,-0x3c(%rbp)
         :	  j2  = x2  = load_littleendian(c +  8);
    0.02 :	  400aa8:       mov    -0xb0(%rbp),%rax
    0.01 :	  400aaf:       add    $0x8,%rax
    0.05 :	  400ab3:       mov    %rax,%rdi
    0.01 :	  400ab6:       callq  4009ae <load_littleendian>
    0.03 :	  400abb:       mov    %eax,-0x7c(%rbp)
    0.01 :	  400abe:       mov    -0x7c(%rbp),%eax
    0.05 :	  400ac1:       mov    %eax,-0x38(%rbp)
         :	  j3  = x3  = load_littleendian(c + 12);
    0.07 :	  400ac4:       mov    -0xb0(%rbp),%rax
    0.01 :	  400acb:       add    $0xc,%rax
    0.01 :	  400acf:       mov    %rax,%rdi
    0.04 :	  400ad2:       callq  4009ae <load_littleendian>
    0.02 :	  400ad7:       mov    %eax,-0x78(%rbp)
    0.02 :	  400ada:       mov    -0x78(%rbp),%eax
    0.04 :	  400add:       mov    %eax,-0x34(%rbp)
         :	  j4  = x4  = load_littleendian(k +  0);
    0.11 :	  400ae0:       mov    -0xa8(%rbp),%rax
    0.04 :	  400ae7:       mov    %rax,%rdi
    0.00 :	  400aea:       callq  4009ae <load_littleendian>
    0.00 :	  400aef:       mov    %eax,-0x74(%rbp)
    0.11 :	  400af2:       mov    -0x74(%rbp),%eax
    0.03 :	  400af5:       mov    %eax,-0x30(%rbp)
         :	  j5  = x5  = load_littleendian(k +  4);
    0.04 :	  400af8:       mov    -0xa8(%rbp),%rax
    0.03 :	  400aff:       add    $0x4,%rax
    0.04 :	  400b03:       mov    %rax,%rdi
    0.01 :	  400b06:       callq  4009ae <load_littleendian>
    0.02 :	  400b0b:       mov    %eax,-0x70(%rbp)
    0.02 :	  400b0e:       mov    -0x70(%rbp),%eax
    0.07 :	  400b11:       mov    %eax,-0x2c(%rbp)
         :	  j6  = x6  = load_littleendian(k +  8);
    0.12 :	  400b14:       mov    -0xa8(%rbp),%rax
    0.00 :	  400b1b:       add    $0x8,%rax
    0.01 :	  400b1f:       mov    %rax,%rdi
    0.03 :	  400b22:       callq  4009ae <load_littleendian>
    0.05 :	  400b27:       mov    %eax,-0x6c(%rbp)
    0.02 :	  400b2a:       mov    -0x6c(%rbp),%eax
    0.04 :	  400b2d:       mov    %eax,-0x28(%rbp)
         :	  j7  = x7  = load_littleendian(k + 12);
    0.09 :	  400b30:       mov    -0xa8(%rbp),%rax
    0.01 :	  400b37:       add    $0xc,%rax
    0.00 :	  400b3b:       mov    %rax,%rdi
    0.00 :	  400b3e:       callq  4009ae <load_littleendian>
    0.03 :	  400b43:       mov    %eax,-0x68(%rbp)
    0.08 :	  400b46:       mov    -0x68(%rbp),%eax
    0.06 :	  400b49:       mov    %eax,-0x24(%rbp)
         :	  j8  = x8  = load_littleendian(k + 16);
    0.17 :	  400b4c:       mov    -0xa8(%rbp),%rax
    0.04 :	  400b53:       add    $0x10,%rax
    0.01 :	  400b57:       mov    %rax,%rdi
    0.00 :	  400b5a:       callq  4009ae <load_littleendian>
    0.05 :	  400b5f:       mov    %eax,-0x64(%rbp)
    0.03 :	  400b62:       mov    -0x64(%rbp),%eax
    0.05 :	  400b65:       mov    %eax,-0x20(%rbp)
         :	  j9  = x9  = load_littleendian(k + 20);
    0.11 :	  400b68:       mov    -0xa8(%rbp),%rax
    0.01 :	  400b6f:       add    $0x14,%rax
    0.01 :	  400b73:       mov    %rax,%rdi
    0.01 :	  400b76:       callq  4009ae <load_littleendian>
    0.05 :	  400b7b:       mov    %eax,-0x60(%rbp)
    0.06 :	  400b7e:       mov    -0x60(%rbp),%eax
    0.07 :	  400b81:       mov    %eax,-0x1c(%rbp)
         :	  j10 = x10 = load_littleendian(k + 24);
    0.14 :	  400b84:       mov    -0xa8(%rbp),%rax
    0.01 :	  400b8b:       add    $0x18,%rax
    0.00 :	  400b8f:       mov    %rax,%rdi
    0.00 :	  400b92:       callq  4009ae <load_littleendian>
    0.08 :	  400b97:       mov    %eax,-0x5c(%rbp)
    0.02 :	  400b9a:       mov    -0x5c(%rbp),%eax
    0.06 :	  400b9d:       mov    %eax,-0x18(%rbp)
         :	  j11 = x11 = load_littleendian(k + 28);
    0.16 :	  400ba0:       mov    -0xa8(%rbp),%rax
    0.01 :	  400ba7:       add    $0x1c,%rax
    0.01 :	  400bab:       mov    %rax,%rdi
    0.00 :	  400bae:       callq  4009ae <load_littleendian>
    0.10 :	  400bb3:       mov    %eax,-0x58(%rbp)
    0.03 :	  400bb6:       mov    -0x58(%rbp),%eax
    0.07 :	  400bb9:       mov    %eax,-0x14(%rbp)
         :	  j12 = x12 = load_littleendian(in+  8);
    0.12 :	  400bbc:       mov    -0xa0(%rbp),%rax
    0.03 :	  400bc3:       add    $0x8,%rax
    0.01 :	  400bc7:       mov    %rax,%rdi
    0.00 :	  400bca:       callq  4009ae <load_littleendian>
    0.05 :	  400bcf:       mov    %eax,-0x54(%rbp)
    0.04 :	  400bd2:       mov    -0x54(%rbp),%eax
    0.07 :	  400bd5:       mov    %eax,-0x10(%rbp)
         :	  j13 = x13 = load_littleendian(in+ 12);
    0.12 :	  400bd8:       mov    -0xa0(%rbp),%rax
    0.01 :	  400bdf:       add    $0xc,%rax
    0.01 :	  400be3:       mov    %rax,%rdi
    0.00 :	  400be6:       callq  4009ae <load_littleendian>
    0.08 :	  400beb:       mov    %eax,-0x50(%rbp)
    0.04 :	  400bee:       mov    -0x50(%rbp),%eax
    0.07 :	  400bf1:       mov    %eax,-0xc(%rbp)
         :	  j14 = x14 = load_littleendian(in+  0);
    0.16 :	  400bf4:       mov    -0xa0(%rbp),%rax
    0.02 :	  400bfb:       mov    %rax,%rdi
    0.01 :	  400bfe:       callq  4009ae <load_littleendian>
    0.01 :	  400c03:       mov    %eax,-0x4c(%rbp)
    0.03 :	  400c06:       mov    -0x4c(%rbp),%eax
    0.06 :	  400c09:       mov    %eax,-0x8(%rbp)
         :	  j15 = x15 = load_littleendian(in+  4);
    0.13 :	  400c0c:       mov    -0xa0(%rbp),%rax
    0.00 :	  400c13:       add    $0x4,%rax
    0.02 :	  400c17:       mov    %rax,%rdi
    0.00 :	  400c1a:       callq  4009ae <load_littleendian>
    0.08 :	  400c1f:       mov    %eax,-0x48(%rbp)
    0.02 :	  400c22:       mov    -0x48(%rbp),%eax
    0.15 :	  400c25:       mov    %eax,-0x4(%rbp)
         :
         :	  for (i = ROUNDS;i > 0;i -= 2) {
    0.20 :	  400c28:       movl   $0x14,-0x44(%rbp)
    0.01 :	  400c2f:       jmpq   400e90 <crypto_core_chacha20+0x449>
         :	    QUARTERROUND(x0, x4, x8,x12);
    0.71 :	  400c34:       mov    -0x74(%rbp),%eax
    0.63 :	  400c37:       add    %eax,-0x84(%rbp)
    1.74 :	  400c3d:       mov    -0x54(%rbp),%eax
    0.07 :	  400c40:       xor    -0x84(%rbp),%eax
    1.92 :	  400c46:       rol    $0x10,%eax
    0.65 :	  400c49:       mov    %eax,-0x54(%rbp)
    1.06 :	  400c4c:       mov    -0x54(%rbp),%eax
    1.36 :	  400c4f:       add    %eax,-0x64(%rbp)
    1.68 :	  400c52:       mov    -0x74(%rbp),%eax
    0.04 :	  400c55:       xor    -0x64(%rbp),%eax
    2.12 :	  400c58:       rol    $0xc,%eax
    0.57 :	  400c5b:       mov    %eax,-0x74(%rbp)
    0.96 :	  400c5e:       mov    -0x74(%rbp),%eax
    1.28 :	  400c61:       add    %eax,-0x84(%rbp)
    1.34 :	  400c67:       mov    -0x54(%rbp),%eax
    0.02 :	  400c6a:       xor    -0x84(%rbp),%eax
    1.27 :	  400c70:       rol    $0x8,%eax
    0.52 :	  400c73:       mov    %eax,-0x54(%rbp)
    0.75 :	  400c76:       mov    -0x54(%rbp),%eax
    1.12 :	  400c79:       add    %eax,-0x64(%rbp)
    1.39 :	  400c7c:       mov    -0x74(%rbp),%eax
    0.02 :	  400c7f:       xor    -0x64(%rbp),%eax
    1.25 :	  400c82:       rol    $0x7,%eax
    0.49 :	  400c85:       mov    %eax,-0x74(%rbp)
         :	    QUARTERROUND(x1, x5, x9,x13);
    0.70 :	  400c88:       mov    -0x70(%rbp),%eax
    0.00 :	  400c8b:       add    %eax,-0x80(%rbp)
    0.00 :	  400c8e:       mov    -0x50(%rbp),%eax
    0.62 :	  400c91:       xor    -0x80(%rbp),%eax
    0.01 :	  400c94:       rol    $0x10,%eax
    0.00 :	  400c97:       mov    %eax,-0x50(%rbp)
    0.01 :	  400c9a:       mov    -0x50(%rbp),%eax
    0.37 :	  400c9d:       add    %eax,-0x60(%rbp)
    0.01 :	  400ca0:       mov    -0x70(%rbp),%eax
    0.00 :	  400ca3:       xor    -0x60(%rbp),%eax
    0.36 :	  400ca6:       rol    $0xc,%eax
    0.00 :	  400ca9:       mov    %eax,-0x70(%rbp)
    0.01 :	  400cac:       mov    -0x70(%rbp),%eax
    0.05 :	  400caf:       add    %eax,-0x80(%rbp)
    0.51 :	  400cb2:       mov    -0x50(%rbp),%eax
    0.01 :	  400cb5:       xor    -0x80(%rbp),%eax
    0.03 :	  400cb8:       rol    $0x8,%eax
    0.54 :	  400cbb:       mov    %eax,-0x50(%rbp)
    0.05 :	  400cbe:       mov    -0x50(%rbp),%eax
    0.04 :	  400cc1:       add    %eax,-0x60(%rbp)
    0.48 :	  400cc4:       mov    -0x70(%rbp),%eax
    0.00 :	  400cc7:       xor    -0x60(%rbp),%eax
    0.14 :	  400cca:       rol    $0x7,%eax
    0.04 :	  400ccd:       mov    %eax,-0x70(%rbp)
         :	    QUARTERROUND(x2, x6,x10,x14);
    0.59 :	  400cd0:       mov    -0x6c(%rbp),%eax
    0.00 :	  400cd3:       add    %eax,-0x7c(%rbp)
    0.00 :	  400cd6:       mov    -0x4c(%rbp),%eax
    0.41 :	  400cd9:       xor    -0x7c(%rbp),%eax
    0.01 :	  400cdc:       rol    $0x10,%eax
    0.00 :	  400cdf:       mov    %eax,-0x4c(%rbp)
    0.00 :	  400ce2:       mov    -0x4c(%rbp),%eax
    0.59 :	  400ce5:       add    %eax,-0x5c(%rbp)
    0.05 :	  400ce8:       mov    -0x6c(%rbp),%eax
    0.00 :	  400ceb:       xor    -0x5c(%rbp),%eax
    0.43 :	  400cee:       rol    $0xc,%eax
    0.01 :	  400cf1:       mov    %eax,-0x6c(%rbp)
    0.01 :	  400cf4:       mov    -0x6c(%rbp),%eax
    0.08 :	  400cf7:       add    %eax,-0x7c(%rbp)
    0.50 :	  400cfa:       mov    -0x4c(%rbp),%eax
    0.00 :	  400cfd:       xor    -0x7c(%rbp),%eax
    0.13 :	  400d00:       rol    $0x8,%eax
    0.61 :	  400d03:       mov    %eax,-0x4c(%rbp)
    0.10 :	  400d06:       mov    -0x4c(%rbp),%eax
    0.13 :	  400d09:       add    %eax,-0x5c(%rbp)
    0.63 :	  400d0c:       mov    -0x6c(%rbp),%eax
    0.01 :	  400d0f:       xor    -0x5c(%rbp),%eax
    0.32 :	  400d12:       rol    $0x7,%eax
    0.11 :	  400d15:       mov    %eax,-0x6c(%rbp)
         :	    QUARTERROUND(x3, x7,x11,x15);
    0.53 :	  400d18:       mov    -0x68(%rbp),%eax
    0.03 :	  400d1b:       add    %eax,-0x78(%rbp)
    0.01 :	  400d1e:       mov    -0x48(%rbp),%eax
    0.62 :	  400d21:       xor    -0x78(%rbp),%eax
    0.04 :	  400d24:       rol    $0x10,%eax
    0.00 :	  400d27:       mov    %eax,-0x48(%rbp)
    0.00 :	  400d2a:       mov    -0x48(%rbp),%eax
    0.55 :	  400d2d:       add    %eax,-0x58(%rbp)
    0.07 :	  400d30:       mov    -0x68(%rbp),%eax
    0.00 :	  400d33:       xor    -0x58(%rbp),%eax
    0.51 :	  400d36:       rol    $0xc,%eax
    0.01 :	  400d39:       mov    %eax,-0x68(%rbp)
    0.03 :	  400d3c:       mov    -0x68(%rbp),%eax
    0.12 :	  400d3f:       add    %eax,-0x78(%rbp)
    1.13 :	  400d42:       mov    -0x48(%rbp),%eax
    0.04 :	  400d45:       xor    -0x78(%rbp),%eax
    0.34 :	  400d48:       rol    $0x8,%eax
    1.14 :	  400d4b:       mov    %eax,-0x48(%rbp)
    0.53 :	  400d4e:       mov    -0x48(%rbp),%eax
    0.77 :	  400d51:       add    %eax,-0x58(%rbp)
    1.92 :	  400d54:       mov    -0x68(%rbp),%eax
    0.03 :	  400d57:       xor    -0x58(%rbp),%eax
    1.80 :	  400d5a:       rol    $0x7,%eax
    0.83 :	  400d5d:       mov    %eax,-0x68(%rbp)
         :	    QUARTERROUND(x0, x5,x10,x15);
    1.71 :	  400d60:       mov    -0x70(%rbp),%eax
    0.02 :	  400d63:       add    %eax,-0x84(%rbp)
    0.02 :	  400d69:       mov    -0x48(%rbp),%eax
    0.87 :	  400d6c:       xor    -0x84(%rbp),%eax
    0.05 :	  400d72:       rol    $0x10,%eax
    0.00 :	  400d75:       mov    %eax,-0x48(%rbp)
    0.01 :	  400d78:       mov    -0x48(%rbp),%eax
    0.98 :	  400d7b:       add    %eax,-0x5c(%rbp)
    0.64 :	  400d7e:       mov    -0x70(%rbp),%eax
    0.02 :	  400d81:       xor    -0x5c(%rbp),%eax
    2.62 :	  400d84:       rol    $0xc,%eax
    0.81 :	  400d87:       mov    %eax,-0x70(%rbp)
    1.34 :	  400d8a:       mov    -0x70(%rbp),%eax
    1.83 :	  400d8d:       add    %eax,-0x84(%rbp)
    2.07 :	  400d93:       mov    -0x48(%rbp),%eax
    0.02 :	  400d96:       xor    -0x84(%rbp),%eax
    2.04 :	  400d9c:       rol    $0x8,%eax
    0.72 :	  400d9f:       mov    %eax,-0x48(%rbp)
    1.28 :	  400da2:       mov    -0x48(%rbp),%eax
    1.31 :	  400da5:       add    %eax,-0x5c(%rbp)
    1.59 :	  400da8:       mov    -0x70(%rbp),%eax
    0.02 :	  400dab:       xor    -0x5c(%rbp),%eax
    1.37 :	  400dae:       rol    $0x7,%eax
    0.55 :	  400db1:       mov    %eax,-0x70(%rbp)
         :	    QUARTERROUND(x1, x6,x11,x12);
    0.77 :	  400db4:       mov    -0x6c(%rbp),%eax
    0.00 :	  400db7:       add    %eax,-0x80(%rbp)
    0.01 :	  400dba:       mov    -0x54(%rbp),%eax
    0.74 :	  400dbd:       xor    -0x80(%rbp),%eax
    0.02 :	  400dc0:       rol    $0x10,%eax
    0.00 :	  400dc3:       mov    %eax,-0x54(%rbp)
    0.01 :	  400dc6:       mov    -0x54(%rbp),%eax
    0.46 :	  400dc9:       add    %eax,-0x58(%rbp)
    0.03 :	  400dcc:       mov    -0x6c(%rbp),%eax
    0.00 :	  400dcf:       xor    -0x58(%rbp),%eax
    0.43 :	  400dd2:       rol    $0xc,%eax
    0.01 :	  400dd5:       mov    %eax,-0x6c(%rbp)
    0.01 :	  400dd8:       mov    -0x6c(%rbp),%eax
    0.05 :	  400ddb:       add    %eax,-0x80(%rbp)
    0.48 :	  400dde:       mov    -0x54(%rbp),%eax
    0.00 :	  400de1:       xor    -0x80(%rbp),%eax
    0.08 :	  400de4:       rol    $0x8,%eax
    0.45 :	  400de7:       mov    %eax,-0x54(%rbp)
    0.05 :	  400dea:       mov    -0x54(%rbp),%eax
    0.08 :	  400ded:       add    %eax,-0x58(%rbp)
    0.45 :	  400df0:       mov    -0x6c(%rbp),%eax
    0.00 :	  400df3:       xor    -0x58(%rbp),%eax
    0.30 :	  400df6:       rol    $0x7,%eax
    0.11 :	  400df9:       mov    %eax,-0x6c(%rbp)
         :	    QUARTERROUND(x2, x7, x8,x13);
    0.70 :	  400dfc:       mov    -0x68(%rbp),%eax
    0.01 :	  400dff:       add    %eax,-0x7c(%rbp)
    0.00 :	  400e02:       mov    -0x50(%rbp),%eax
    0.40 :	  400e05:       xor    -0x7c(%rbp),%eax
    0.01 :	  400e08:       rol    $0x10,%eax
    0.00 :	  400e0b:       mov    %eax,-0x50(%rbp)
    0.00 :	  400e0e:       mov    -0x50(%rbp),%eax
    0.52 :	  400e11:       add    %eax,-0x64(%rbp)
    0.01 :	  400e14:       mov    -0x68(%rbp),%eax
    0.00 :	  400e17:       xor    -0x64(%rbp),%eax
    0.39 :	  400e1a:       rol    $0xc,%eax
    0.00 :	  400e1d:       mov    %eax,-0x68(%rbp)
    0.01 :	  400e20:       mov    -0x68(%rbp),%eax
    0.08 :	  400e23:       add    %eax,-0x7c(%rbp)
    0.45 :	  400e26:       mov    -0x50(%rbp),%eax
    0.01 :	  400e29:       xor    -0x7c(%rbp),%eax
    0.42 :	  400e2c:       rol    $0x8,%eax
    0.62 :	  400e2f:       mov    %eax,-0x50(%rbp)
    0.54 :	  400e32:       mov    -0x50(%rbp),%eax
    0.81 :	  400e35:       add    %eax,-0x64(%rbp)
    1.61 :	  400e38:       mov    -0x68(%rbp),%eax
    0.04 :	  400e3b:       xor    -0x64(%rbp),%eax
    1.91 :	  400e3e:       rol    $0x7,%eax
    0.74 :	  400e41:       mov    %eax,-0x68(%rbp)
         :	    QUARTERROUND(x3, x4, x9,x14);
    1.53 :	  400e44:       mov    -0x74(%rbp),%eax
    0.04 :	  400e47:       add    %eax,-0x78(%rbp)
    0.00 :	  400e4a:       mov    -0x4c(%rbp),%eax
    0.80 :	  400e4d:       xor    -0x78(%rbp),%eax
    0.03 :	  400e50:       rol    $0x10,%eax
    0.01 :	  400e53:       mov    %eax,-0x4c(%rbp)
    0.00 :	  400e56:       mov    -0x4c(%rbp),%eax
    0.81 :	  400e59:       add    %eax,-0x60(%rbp)
    0.03 :	  400e5c:       mov    -0x74(%rbp),%eax
    0.00 :	  400e5f:       xor    -0x60(%rbp),%eax
    0.77 :	  400e62:       rol    $0xc,%eax
    0.02 :	  400e65:       mov    %eax,-0x74(%rbp)
    0.04 :	  400e68:       mov    -0x74(%rbp),%eax
    0.16 :	  400e6b:       add    %eax,-0x78(%rbp)
    1.03 :	  400e6e:       mov    -0x4c(%rbp),%eax
    0.02 :	  400e71:       xor    -0x78(%rbp),%eax
    0.53 :	  400e74:       rol    $0x8,%eax
    0.68 :	  400e77:       mov    %eax,-0x4c(%rbp)
    0.74 :	  400e7a:       mov    -0x4c(%rbp),%eax
    0.81 :	  400e7d:       add    %eax,-0x60(%rbp)
    1.64 :	  400e80:       mov    -0x74(%rbp),%eax
    0.02 :	  400e83:       xor    -0x60(%rbp),%eax
    1.47 :	  400e86:       rol    $0x7,%eax
    0.59 :	  400e89:       mov    %eax,-0x74(%rbp)
         :	  j12 = x12 = load_littleendian(in+  8);
         :	  j13 = x13 = load_littleendian(in+ 12);
         :	  j14 = x14 = load_littleendian(in+  0);
         :	  j15 = x15 = load_littleendian(in+  4);
         :
         :	  for (i = ROUNDS;i > 0;i -= 2) {
    1.06 :	  400e8c:       subl   $0x2,-0x44(%rbp)
    0.04 :	  400e90:       cmpl   $0x0,-0x44(%rbp)
    0.11 :	  400e94:       jg     400c34 <crypto_core_chacha20+0x1ed>
         :	    QUARTERROUND(x1, x6,x11,x12);
         :	    QUARTERROUND(x2, x7, x8,x13);
         :	    QUARTERROUND(x3, x4, x9,x14);
         :	  }
         :
         :	  x0 += j0;
    0.08 :	  400e9a:       mov    -0x40(%rbp),%eax
    0.17 :	  400e9d:       add    %eax,-0x84(%rbp)
         :	  x1 += j1;
    0.25 :	  400ea3:       mov    -0x3c(%rbp),%eax
    0.01 :	  400ea6:       add    %eax,-0x80(%rbp)
         :	  x2 += j2;
    0.17 :	  400ea9:       mov    -0x38(%rbp),%eax
    0.00 :	  400eac:       add    %eax,-0x7c(%rbp)
         :	  x3 += j3;
    0.06 :	  400eaf:       mov    -0x34(%rbp),%eax
    0.02 :	  400eb2:       add    %eax,-0x78(%rbp)
         :	  x4 += j4;
    0.02 :	  400eb5:       mov    -0x30(%rbp),%eax
    0.01 :	  400eb8:       add    %eax,-0x74(%rbp)
         :	  x5 += j5;
    0.05 :	  400ebb:       mov    -0x2c(%rbp),%eax
    0.01 :	  400ebe:       add    %eax,-0x70(%rbp)
         :	  x6 += j6;
    0.08 :	  400ec1:       mov    -0x28(%rbp),%eax
    0.01 :	  400ec4:       add    %eax,-0x6c(%rbp)
         :	  x7 += j7;
    0.08 :	  400ec7:       mov    -0x24(%rbp),%eax
    0.01 :	  400eca:       add    %eax,-0x68(%rbp)
         :	  x8 += j8;
    0.05 :	  400ecd:       mov    -0x20(%rbp),%eax
    0.00 :	  400ed0:       add    %eax,-0x64(%rbp)
         :	  x9 += j9;
    0.08 :	  400ed3:       mov    -0x1c(%rbp),%eax
    0.00 :	  400ed6:       add    %eax,-0x60(%rbp)
         :	  x10 += j10;
    0.04 :	  400ed9:       mov    -0x18(%rbp),%eax
    0.00 :	  400edc:       add    %eax,-0x5c(%rbp)
         :	  x11 += j11;
    0.07 :	  400edf:       mov    -0x14(%rbp),%eax
    0.00 :	  400ee2:       add    %eax,-0x58(%rbp)
         :	  x12 += j12;
    0.02 :	  400ee5:       mov    -0x10(%rbp),%eax
    0.00 :	  400ee8:       add    %eax,-0x54(%rbp)
         :	  x13 += j13;
    0.04 :	  400eeb:       mov    -0xc(%rbp),%eax
    0.00 :	  400eee:       add    %eax,-0x50(%rbp)
         :	  x14 += j14;
    0.06 :	  400ef1:       mov    -0x8(%rbp),%eax
    0.00 :	  400ef4:       add    %eax,-0x4c(%rbp)
         :	  x15 += j15;
    0.10 :	  400ef7:       mov    -0x4(%rbp),%eax
    0.00 :	  400efa:       add    %eax,-0x48(%rbp)
         :
         :	  store_littleendian(out + 0,x0);
    0.07 :	  400efd:       mov    -0x84(%rbp),%edx
    0.02 :	  400f03:       mov    -0x98(%rbp),%rax
    0.00 :	  400f0a:       mov    %edx,%esi
    0.01 :	  400f0c:       mov    %rax,%rdi
    0.03 :	  400f0f:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 4,x1);
    0.00 :	  400f14:       mov    -0x98(%rbp),%rax
    0.05 :	  400f1b:       lea    0x4(%rax),%rdx
    0.02 :	  400f1f:       mov    -0x80(%rbp),%eax
    0.01 :	  400f22:       mov    %eax,%esi
    0.00 :	  400f24:       mov    %rdx,%rdi
    0.03 :	  400f27:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 8,x2);
    0.00 :	  400f2c:       mov    -0x98(%rbp),%rax
    0.06 :	  400f33:       lea    0x8(%rax),%rdx
    0.00 :	  400f37:       mov    -0x7c(%rbp),%eax
    0.00 :	  400f3a:       mov    %eax,%esi
    0.00 :	  400f3c:       mov    %rdx,%rdi
    0.05 :	  400f3f:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 12,x3);
    0.00 :	  400f44:       mov    -0x98(%rbp),%rax
    0.08 :	  400f4b:       lea    0xc(%rax),%rdx
    0.00 :	  400f4f:       mov    -0x78(%rbp),%eax
    0.00 :	  400f52:       mov    %eax,%esi
    0.00 :	  400f54:       mov    %rdx,%rdi
    0.02 :	  400f57:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 16,x4);
    0.02 :	  400f5c:       mov    -0x98(%rbp),%rax
    0.06 :	  400f63:       lea    0x10(%rax),%rdx
    0.00 :	  400f67:       mov    -0x74(%rbp),%eax
    0.00 :	  400f6a:       mov    %eax,%esi
    0.00 :	  400f6c:       mov    %rdx,%rdi
    0.06 :	  400f6f:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 20,x5);
    0.01 :	  400f74:       mov    -0x98(%rbp),%rax
    0.08 :	  400f7b:       lea    0x14(%rax),%rdx
    0.01 :	  400f7f:       mov    -0x70(%rbp),%eax
    0.00 :	  400f82:       mov    %eax,%esi
    0.00 :	  400f84:       mov    %rdx,%rdi
    0.07 :	  400f87:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 24,x6);
    0.01 :	  400f8c:       mov    -0x98(%rbp),%rax
    0.08 :	  400f93:       lea    0x18(%rax),%rdx
    0.00 :	  400f97:       mov    -0x6c(%rbp),%eax
    0.00 :	  400f9a:       mov    %eax,%esi
    0.00 :	  400f9c:       mov    %rdx,%rdi
    0.08 :	  400f9f:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 28,x7);
    0.00 :	  400fa4:       mov    -0x98(%rbp),%rax
    0.07 :	  400fab:       lea    0x1c(%rax),%rdx
    0.00 :	  400faf:       mov    -0x68(%rbp),%eax
    0.00 :	  400fb2:       mov    %eax,%esi
    0.00 :	  400fb4:       mov    %rdx,%rdi
    0.06 :	  400fb7:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 32,x8);
    0.00 :	  400fbc:       mov    -0x98(%rbp),%rax
    0.08 :	  400fc3:       lea    0x20(%rax),%rdx
    0.01 :	  400fc7:       mov    -0x64(%rbp),%eax
    0.00 :	  400fca:       mov    %eax,%esi
    0.00 :	  400fcc:       mov    %rdx,%rdi
    0.08 :	  400fcf:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 36,x9);
    0.01 :	  400fd4:       mov    -0x98(%rbp),%rax
    0.10 :	  400fdb:       lea    0x24(%rax),%rdx
    0.00 :	  400fdf:       mov    -0x60(%rbp),%eax
    0.00 :	  400fe2:       mov    %eax,%esi
    0.00 :	  400fe4:       mov    %rdx,%rdi
    0.08 :	  400fe7:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 40,x10);
    0.01 :	  400fec:       mov    -0x98(%rbp),%rax
    0.08 :	  400ff3:       lea    0x28(%rax),%rdx
    0.00 :	  400ff7:       mov    -0x5c(%rbp),%eax
    0.00 :	  400ffa:       mov    %eax,%esi
    0.00 :	  400ffc:       mov    %rdx,%rdi
    0.07 :	  400fff:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 44,x11);
    0.00 :	  401004:       mov    -0x98(%rbp),%rax
    0.07 :	  40100b:       lea    0x2c(%rax),%rdx
    0.01 :	  40100f:       mov    -0x58(%rbp),%eax
    0.00 :	  401012:       mov    %eax,%esi
    0.00 :	  401014:       mov    %rdx,%rdi
    0.08 :	  401017:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 48,x12);
    0.01 :	  40101c:       mov    -0x98(%rbp),%rax
    0.05 :	  401023:       lea    0x30(%rax),%rdx
    0.00 :	  401027:       mov    -0x54(%rbp),%eax
    0.00 :	  40102a:       mov    %eax,%esi
    0.00 :	  40102c:       mov    %rdx,%rdi
    0.05 :	  40102f:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 52,x13);
    0.00 :	  401034:       mov    -0x98(%rbp),%rax
    0.07 :	  40103b:       lea    0x34(%rax),%rdx
    0.00 :	  40103f:       mov    -0x50(%rbp),%eax
    0.00 :	  401042:       mov    %eax,%esi
    0.00 :	  401044:       mov    %rdx,%rdi
    0.07 :	  401047:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 56,x14);
    0.01 :	  40104c:       mov    -0x98(%rbp),%rax
    0.07 :	  401053:       lea    0x38(%rax),%rdx
    0.00 :	  401057:       mov    -0x4c(%rbp),%eax
    0.00 :	  40105a:       mov    %eax,%esi
    0.00 :	  40105c:       mov    %rdx,%rdi
    0.10 :	  40105f:       callq  4009fb <store_littleendian>
         :	  store_littleendian(out + 60,x15);
    0.00 :	  401064:       mov    -0x98(%rbp),%rax
    0.05 :	  40106b:       lea    0x3c(%rax),%rdx
    0.00 :	  40106f:       mov    -0x48(%rbp),%eax
    0.00 :	  401072:       mov    %eax,%esi
    0.00 :	  401074:       mov    %rdx,%rdi
    0.08 :	  401077:       callq  4009fb <store_littleendian>
         :
         :	  return 0;
    0.01 :	  40107c:       mov    $0x0,%eax
         :	}
    0.05 :	  401081:       leaveq 
    0.00 :	  401082:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004018d1 <poly_getnoise>:
         :	poly_getnoise():
         :	  }
         :	}
         :
         :
         :	void poly_getnoise(poly *r, unsigned char *seed, unsigned char nonce)
         :	{
    0.00 :	  4018d1:       push   %rbp
    0.00 :	  4018d2:       mov    %rsp,%rbp
    0.00 :	  4018d5:       sub    $0x1050,%rsp
    0.00 :	  4018dc:       mov    %rdi,-0x1038(%rbp)
    0.00 :	  4018e3:       mov    %rsi,-0x1040(%rbp)
    0.00 :	  4018ea:       mov    %edx,%eax
    0.00 :	  4018ec:       mov    %al,-0x1044(%rbp)
    0.00 :	  4018f2:       mov    %fs:0x28,%rax
    0.02 :	  4018fb:       mov    %rax,-0x8(%rbp)
    0.00 :	  4018ff:       xor    %eax,%eax
         :	  uint32_t buf[PARAM_N];
         :	  uint32_t t,d, a, b;
         :	  unsigned char n[8];
         :	  int i,j;
         :
         :	  for(i=1;i<8;i++)
    0.00 :	  401901:       movl   $0x1,-0x1024(%rbp)
    0.00 :	  40190b:       jmp    401921 <poly_getnoise+0x50>
         :	    n[i] = 0;
    0.00 :	  40190d:       mov    -0x1024(%rbp),%eax
    0.00 :	  401913:       cltq   
    0.00 :	  401915:       movb   $0x0,-0x10(%rbp,%rax,1)
         :	  uint32_t buf[PARAM_N];
         :	  uint32_t t,d, a, b;
         :	  unsigned char n[8];
         :	  int i,j;
         :
         :	  for(i=1;i<8;i++)
    0.02 :	  40191a:       addl   $0x1,-0x1024(%rbp)
    0.02 :	  401921:       cmpl   $0x7,-0x1024(%rbp)
    0.02 :	  401928:       jle    40190d <poly_getnoise+0x3c>
         :	    n[i] = 0;
         :	  n[0] = nonce;
    0.00 :	  40192a:       movzbl -0x1044(%rbp),%eax
    0.00 :	  401931:       mov    %al,-0x10(%rbp)
         :
         :	  crypto_stream_chacha20((unsigned char *)buf,4*PARAM_N,n,seed);
    0.00 :	  401934:       mov    -0x1040(%rbp),%rcx
    0.00 :	  40193b:       lea    -0x10(%rbp),%rdx
    0.00 :	  40193f:       lea    -0x1010(%rbp),%rax
    0.00 :	  401946:       mov    $0x1000,%esi
    0.00 :	  40194b:       mov    %rax,%rdi
    0.00 :	  40194e:       callq  401083 <crypto_stream_chacha20>
         :
         :	  for(i=0;i<PARAM_N;i++)
    0.00 :	  401953:       movl   $0x0,-0x1024(%rbp)
    0.00 :	  40195d:       jmpq   401a29 <poly_getnoise+0x158>
         :	  {
         :	    t = buf[i];
    1.57 :	  401962:       mov    -0x1024(%rbp),%eax
    0.09 :	  401968:       cltq   
    0.00 :	  40196a:       mov    -0x1010(%rbp,%rax,4),%eax
    0.34 :	  401971:       mov    %eax,-0x101c(%rbp)
         :	    d = 0;
    1.65 :	  401977:       movl   $0x0,-0x1028(%rbp)
         :	    for(j=0;j<8;j++)
    0.02 :	  401981:       movl   $0x0,-0x1020(%rbp)
    0.02 :	  40198b:       jmp    4019b1 <poly_getnoise+0xe0>
         :	      d += (t >> j) & 0x01010101;
    8.16 :	  40198d:       mov    -0x1020(%rbp),%eax
    3.30 :	  401993:       mov    -0x101c(%rbp),%edx
    0.43 :	  401999:       mov    %eax,%ecx
    3.61 :	  40199b:       shr    %cl,%edx
   13.73 :	  40199d:       mov    %edx,%eax
    4.19 :	  40199f:       and    $0x1010101,%eax
    6.69 :	  4019a4:       add    %eax,-0x1028(%rbp)
         :
         :	  for(i=0;i<PARAM_N;i++)
         :	  {
         :	    t = buf[i];
         :	    d = 0;
         :	    for(j=0;j<8;j++)
   20.04 :	  4019aa:       addl   $0x1,-0x1020(%rbp)
    4.95 :	  4019b1:       cmpl   $0x7,-0x1020(%rbp)
   10.33 :	  4019b8:       jle    40198d <poly_getnoise+0xbc>
         :	      d += (t >> j) & 0x01010101;
         :	    a = ((d >> 8) & 0xff) + (d & 0xff);
    1.48 :	  4019ba:       mov    -0x1028(%rbp),%eax
    0.95 :	  4019c0:       shr    $0x8,%eax
    1.18 :	  4019c3:       movzbl %al,%edx
    0.00 :	  4019c6:       mov    -0x1028(%rbp),%eax
    0.46 :	  4019cc:       movzbl %al,%eax
    0.43 :	  4019cf:       add    %edx,%eax
    1.08 :	  4019d1:       mov    %eax,-0x1018(%rbp)
         :	    b = (d >> 24) + ((d >> 16) & 0xff);
    2.66 :	  4019d7:       mov    -0x1028(%rbp),%eax
    0.29 :	  4019dd:       shr    $0x18,%eax
    0.00 :	  4019e0:       mov    %eax,%edx
    0.02 :	  4019e2:       mov    -0x1028(%rbp),%eax
    1.21 :	  4019e8:       shr    $0x10,%eax
    0.24 :	  4019eb:       movzbl %al,%eax
    0.09 :	  4019ee:       add    %edx,%eax
    0.37 :	  4019f0:       mov    %eax,-0x1014(%rbp)
         :	    r->coeffs[i] = a + PARAM_Q - b;
    2.20 :	  4019f6:       mov    -0x1018(%rbp),%eax
    0.18 :	  4019fc:       mov    %eax,%edx
    0.00 :	  4019fe:       mov    -0x1014(%rbp),%eax
    1.80 :	  401a04:       sub    %eax,%edx
    1.34 :	  401a06:       mov    %edx,%eax
    0.15 :	  401a08:       lea    0x3001(%rax),%ecx
    1.25 :	  401a0e:       mov    -0x1038(%rbp),%rax
    0.03 :	  401a15:       mov    -0x1024(%rbp),%edx
    0.03 :	  401a1b:       movslq %edx,%rdx
    0.06 :	  401a1e:       mov    %cx,(%rax,%rdx,2)
         :	    n[i] = 0;
         :	  n[0] = nonce;
         :
         :	  crypto_stream_chacha20((unsigned char *)buf,4*PARAM_N,n,seed);
         :
         :	  for(i=0;i<PARAM_N;i++)
    3.13 :	  401a22:       addl   $0x1,-0x1024(%rbp)
    0.09 :	  401a29:       cmpl   $0x3ff,-0x1024(%rbp)
    0.06 :	  401a33:       jle    401962 <poly_getnoise+0x91>
         :	      d += (t >> j) & 0x01010101;
         :	    a = ((d >> 8) & 0xff) + (d & 0xff);
         :	    b = (d >> 24) + ((d >> 16) & 0xff);
         :	    r->coeffs[i] = a + PARAM_Q - b;
         :	  }
         :	}
    0.00 :	  401a39:       nop
    0.00 :	  401a3a:       mov    -0x8(%rbp),%rax
    0.03 :	  401a3e:       xor    %fs:0x28,%rax
    0.02 :	  401a47:       je     401a4e <poly_getnoise+0x17d>
    0.00 :	  401a49:       callq  446080 <__stack_chk_fail>
    0.00 :	  401a4e:       leaveq 
    0.00 :	  401a4f:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402da5 <KeccakF1600_StatePermute>:
         :	KeccakF1600_StatePermute():
         :	    (uint64_t)0x0000000080000001ULL,
         :	    (uint64_t)0x8000000080008008ULL
         :	};
         :
         :	void KeccakF1600_StatePermute(uint64_t * state)
         :	{
    0.00 :	  402da5:       push   %rbp
    0.00 :	  402da6:       mov    %rsp,%rbp
    0.00 :	  402da9:       sub    $0x180,%rsp
    0.04 :	  402db0:       mov    %rdi,-0x1f8(%rbp)
         :	        uint64_t Eka, Eke, Eki, Eko, Eku;
         :	        uint64_t Ema, Eme, Emi, Emo, Emu;
         :	        uint64_t Esa, Ese, Esi, Eso, Esu;
         :
         :	        //copyFromState(A, state)
         :	        Aba = state[ 0];
    0.02 :	  402db7:       mov    -0x1f8(%rbp),%rax
    0.04 :	  402dbe:       mov    (%rax),%rax
    0.10 :	  402dc1:       mov    %rax,-0x1e0(%rbp)
         :	        Abe = state[ 1];
    0.10 :	  402dc8:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402dcf:       mov    0x8(%rax),%rax
    0.00 :	  402dd3:       mov    %rax,-0x1d8(%rbp)
         :	        Abi = state[ 2];
    0.00 :	  402dda:       mov    -0x1f8(%rbp),%rax
    0.02 :	  402de1:       mov    0x10(%rax),%rax
    0.00 :	  402de5:       mov    %rax,-0x1d0(%rbp)
         :	        Abo = state[ 3];
    0.00 :	  402dec:       mov    -0x1f8(%rbp),%rax
    0.02 :	  402df3:       mov    0x18(%rax),%rax
    0.02 :	  402df7:       mov    %rax,-0x1c8(%rbp)
         :	        Abu = state[ 4];
    0.00 :	  402dfe:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e05:       mov    0x20(%rax),%rax
    0.00 :	  402e09:       mov    %rax,-0x1c0(%rbp)
         :	        Aga = state[ 5];
    0.06 :	  402e10:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e17:       mov    0x28(%rax),%rax
    0.00 :	  402e1b:       mov    %rax,-0x1b8(%rbp)
         :	        Age = state[ 6];
    0.00 :	  402e22:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e29:       mov    0x30(%rax),%rax
    0.00 :	  402e2d:       mov    %rax,-0x1b0(%rbp)
         :	        Agi = state[ 7];
    0.00 :	  402e34:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e3b:       mov    0x38(%rax),%rax
    0.02 :	  402e3f:       mov    %rax,-0x1a8(%rbp)
         :	        Ago = state[ 8];
    0.00 :	  402e46:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e4d:       mov    0x40(%rax),%rax
    0.00 :	  402e51:       mov    %rax,-0x1a0(%rbp)
         :	        Agu = state[ 9];
    0.02 :	  402e58:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e5f:       mov    0x48(%rax),%rax
    0.00 :	  402e63:       mov    %rax,-0x198(%rbp)
         :	        Aka = state[10];
    0.02 :	  402e6a:       mov    -0x1f8(%rbp),%rax
    0.02 :	  402e71:       mov    0x50(%rax),%rax
    0.00 :	  402e75:       mov    %rax,-0x190(%rbp)
         :	        Ake = state[11];
    0.00 :	  402e7c:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e83:       mov    0x58(%rax),%rax
    0.00 :	  402e87:       mov    %rax,-0x188(%rbp)
         :	        Aki = state[12];
    0.00 :	  402e8e:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402e95:       mov    0x60(%rax),%rax
    0.00 :	  402e99:       mov    %rax,-0x180(%rbp)
         :	        Ako = state[13];
    0.04 :	  402ea0:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402ea7:       mov    0x68(%rax),%rax
    0.00 :	  402eab:       mov    %rax,-0x178(%rbp)
         :	        Aku = state[14];
    0.00 :	  402eb2:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402eb9:       mov    0x70(%rax),%rax
    0.00 :	  402ebd:       mov    %rax,-0x170(%rbp)
         :	        Ama = state[15];
    0.00 :	  402ec4:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402ecb:       mov    0x78(%rax),%rax
    0.00 :	  402ecf:       mov    %rax,-0x168(%rbp)
         :	        Ame = state[16];
    0.00 :	  402ed6:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402edd:       mov    0x80(%rax),%rax
    0.00 :	  402ee4:       mov    %rax,-0x160(%rbp)
         :	        Ami = state[17];
    0.00 :	  402eeb:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402ef2:       mov    0x88(%rax),%rax
    0.00 :	  402ef9:       mov    %rax,-0x158(%rbp)
         :	        Amo = state[18];
    0.02 :	  402f00:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402f07:       mov    0x90(%rax),%rax
    0.00 :	  402f0e:       mov    %rax,-0x150(%rbp)
         :	        Amu = state[19];
    0.02 :	  402f15:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402f1c:       mov    0x98(%rax),%rax
    0.00 :	  402f23:       mov    %rax,-0x148(%rbp)
         :	        Asa = state[20];
    0.02 :	  402f2a:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402f31:       mov    0xa0(%rax),%rax
    0.00 :	  402f38:       mov    %rax,-0x140(%rbp)
         :	        Ase = state[21];
    0.02 :	  402f3f:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402f46:       mov    0xa8(%rax),%rax
    0.00 :	  402f4d:       mov    %rax,-0x138(%rbp)
         :	        Asi = state[22];
    0.10 :	  402f54:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402f5b:       mov    0xb0(%rax),%rax
    0.00 :	  402f62:       mov    %rax,-0x130(%rbp)
         :	        Aso = state[23];
    0.10 :	  402f69:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402f70:       mov    0xb8(%rax),%rax
    0.00 :	  402f77:       mov    %rax,-0x128(%rbp)
         :	        Asu = state[24];
    0.10 :	  402f7e:       mov    -0x1f8(%rbp),%rax
    0.00 :	  402f85:       mov    0xc0(%rax),%rax
    0.00 :	  402f8c:       mov    %rax,-0x120(%rbp)
         :
         :	        for( round = 0; round < NROUNDS; round += 2 )
    0.10 :	  402f93:       movl   $0x0,-0x1e4(%rbp)
    0.02 :	  402f9d:       jmpq   403df2 <KeccakF1600_StatePermute+0x104d>
         :	        {
         :	            //    prepareTheta
         :	            BCa = Aba^Aga^Aka^Ama^Asa;
    0.26 :	  402fa2:       mov    -0x1e0(%rbp),%rax
    0.00 :	  402fa9:       xor    -0x1b8(%rbp),%rax
    0.02 :	  402fb0:       xor    -0x190(%rbp),%rax
    0.32 :	  402fb7:       xor    -0x168(%rbp),%rax
    0.18 :	  402fbe:       xor    -0x140(%rbp),%rax
    0.02 :	  402fc5:       mov    %rax,-0x118(%rbp)
         :	            BCe = Abe^Age^Ake^Ame^Ase;
    0.10 :	  402fcc:       mov    -0x1d8(%rbp),%rax
    0.22 :	  402fd3:       xor    -0x1b0(%rbp),%rax
    0.18 :	  402fda:       xor    -0x188(%rbp),%rax
    0.06 :	  402fe1:       xor    -0x160(%rbp),%rax
    0.10 :	  402fe8:       xor    -0x138(%rbp),%rax
    0.10 :	  402fef:       mov    %rax,-0x110(%rbp)
         :	            BCi = Abi^Agi^Aki^Ami^Asi;
    0.36 :	  402ff6:       mov    -0x1d0(%rbp),%rax
    0.00 :	  402ffd:       xor    -0x1a8(%rbp),%rax
    0.02 :	  403004:       xor    -0x180(%rbp),%rax
    0.06 :	  40300b:       xor    -0x158(%rbp),%rax
    0.10 :	  403012:       xor    -0x130(%rbp),%rax
    0.00 :	  403019:       mov    %rax,-0x108(%rbp)
         :	            BCo = Abo^Ago^Ako^Amo^Aso;
    0.20 :	  403020:       mov    -0x1c8(%rbp),%rax
    0.00 :	  403027:       xor    -0x1a0(%rbp),%rax
    0.04 :	  40302e:       xor    -0x178(%rbp),%rax
    0.02 :	  403035:       xor    -0x150(%rbp),%rax
    0.28 :	  40303c:       xor    -0x128(%rbp),%rax
    0.04 :	  403043:       mov    %rax,-0x100(%rbp)
         :	            BCu = Abu^Agu^Aku^Amu^Asu;
    0.75 :	  40304a:       mov    -0x1c0(%rbp),%rax
    0.00 :	  403051:       xor    -0x198(%rbp),%rax
    0.02 :	  403058:       xor    -0x170(%rbp),%rax
    0.00 :	  40305f:       xor    -0x148(%rbp),%rax
    0.24 :	  403066:       xor    -0x120(%rbp),%rax
    0.00 :	  40306d:       mov    %rax,-0xf8(%rbp)
         :
         :	            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
         :	            Da = BCu^ROL(BCe, 1);
    0.48 :	  403074:       mov    -0x110(%rbp),%rax
    0.00 :	  40307b:       rol    %rax
    0.02 :	  40307e:       xor    -0xf8(%rbp),%rax
    1.05 :	  403085:       mov    %rax,-0xf0(%rbp)
         :	            De = BCa^ROL(BCi, 1);
    0.77 :	  40308c:       mov    -0x108(%rbp),%rax
    0.00 :	  403093:       rol    %rax
    0.00 :	  403096:       xor    -0x118(%rbp),%rax
    0.34 :	  40309d:       mov    %rax,-0xe8(%rbp)
         :	            Di = BCe^ROL(BCo, 1);
    0.12 :	  4030a4:       mov    -0x100(%rbp),%rax
    0.00 :	  4030ab:       rol    %rax
    0.46 :	  4030ae:       xor    -0x110(%rbp),%rax
    0.04 :	  4030b5:       mov    %rax,-0xe0(%rbp)
         :	            Do = BCi^ROL(BCu, 1);
    0.42 :	  4030bc:       mov    -0xf8(%rbp),%rax
    0.00 :	  4030c3:       rol    %rax
    0.22 :	  4030c6:       xor    -0x108(%rbp),%rax
    0.26 :	  4030cd:       mov    %rax,-0xd8(%rbp)
         :	            Du = BCo^ROL(BCa, 1);
    0.10 :	  4030d4:       mov    -0x118(%rbp),%rax
    0.08 :	  4030db:       rol    %rax
    0.22 :	  4030de:       xor    -0x100(%rbp),%rax
    0.14 :	  4030e5:       mov    %rax,-0xd0(%rbp)
         :
         :	            Aba ^= Da;
    0.12 :	  4030ec:       mov    -0xf0(%rbp),%rax
    0.12 :	  4030f3:       xor    %rax,-0x1e0(%rbp)
         :	            BCa = Aba;
    0.46 :	  4030fa:       mov    -0x1e0(%rbp),%rax
    1.17 :	  403101:       mov    %rax,-0x118(%rbp)
         :	            Age ^= De;
    0.65 :	  403108:       mov    -0xe8(%rbp),%rax
    0.00 :	  40310f:       xor    %rax,-0x1b0(%rbp)
         :	            BCe = ROL(Age, 44);
    0.00 :	  403116:       mov    -0x1b0(%rbp),%rax
    0.30 :	  40311d:       ror    $0x14,%rax
    0.06 :	  403121:       mov    %rax,-0x110(%rbp)
         :	            Aki ^= Di;
    0.16 :	  403128:       mov    -0xe0(%rbp),%rax
    0.00 :	  40312f:       xor    %rax,-0x180(%rbp)
         :	            BCi = ROL(Aki, 43);
    0.14 :	  403136:       mov    -0x180(%rbp),%rax
    0.18 :	  40313d:       ror    $0x15,%rax
    0.08 :	  403141:       mov    %rax,-0x108(%rbp)
         :	            Amo ^= Do;
    0.18 :	  403148:       mov    -0xd8(%rbp),%rax
    0.00 :	  40314f:       xor    %rax,-0x150(%rbp)
         :	            BCo = ROL(Amo, 21);
    0.02 :	  403156:       mov    -0x150(%rbp),%rax
    0.22 :	  40315d:       rol    $0x15,%rax
    0.02 :	  403161:       mov    %rax,-0x100(%rbp)
         :	            Asu ^= Du;
    0.10 :	  403168:       mov    -0xd0(%rbp),%rax
    0.00 :	  40316f:       xor    %rax,-0x120(%rbp)
         :	            BCu = ROL(Asu, 14);
    0.30 :	  403176:       mov    -0x120(%rbp),%rax
    0.16 :	  40317d:       rol    $0xe,%rax
    0.00 :	  403181:       mov    %rax,-0xf8(%rbp)
         :	            Eba =   BCa ^((~BCe)&  BCi );
    0.16 :	  403188:       mov    -0x110(%rbp),%rax
    0.12 :	  40318f:       not    %rax
    0.08 :	  403192:       and    -0x108(%rbp),%rax
    0.20 :	  403199:       xor    -0x118(%rbp),%rax
    0.20 :	  4031a0:       mov    %rax,-0xc8(%rbp)
         :	            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    0.48 :	  4031a7:       mov    -0x1e4(%rbp),%eax
    0.06 :	  4031ad:       cltq   
    0.00 :	  4031af:       mov    0x4a4460(,%rax,8),%rax
    0.36 :	  4031b7:       xor    %rax,-0xc8(%rbp)
         :	            Ebe =   BCe ^((~BCi)&  BCo );
    1.41 :	  4031be:       mov    -0x108(%rbp),%rax
    0.04 :	  4031c5:       not    %rax
    0.00 :	  4031c8:       and    -0x100(%rbp),%rax
    0.02 :	  4031cf:       xor    -0x110(%rbp),%rax
    0.14 :	  4031d6:       mov    %rax,-0xc0(%rbp)
         :	            Ebi =   BCi ^((~BCo)&  BCu );
    0.04 :	  4031dd:       mov    -0x100(%rbp),%rax
    0.00 :	  4031e4:       not    %rax
    0.00 :	  4031e7:       and    -0xf8(%rbp),%rax
    0.36 :	  4031ee:       xor    -0x108(%rbp),%rax
    0.02 :	  4031f5:       mov    %rax,-0xb8(%rbp)
         :	            Ebo =   BCo ^((~BCu)&  BCa );
    0.04 :	  4031fc:       mov    -0xf8(%rbp),%rax
    0.00 :	  403203:       not    %rax
    0.20 :	  403206:       and    -0x118(%rbp),%rax
    0.02 :	  40320d:       xor    -0x100(%rbp),%rax
    0.04 :	  403214:       mov    %rax,-0xb0(%rbp)
         :	            Ebu =   BCu ^((~BCa)&  BCe );
    0.04 :	  40321b:       mov    -0x118(%rbp),%rax
    0.20 :	  403222:       not    %rax
    0.02 :	  403225:       and    -0x110(%rbp),%rax
    0.06 :	  40322c:       xor    -0xf8(%rbp),%rax
    0.00 :	  403233:       mov    %rax,-0xa8(%rbp)
         :
         :	            Abo ^= Do;
    0.10 :	  40323a:       mov    -0xd8(%rbp),%rax
    0.02 :	  403241:       xor    %rax,-0x1c8(%rbp)
         :	            BCa = ROL(Abo, 28);
    0.10 :	  403248:       mov    -0x1c8(%rbp),%rax
    0.36 :	  40324f:       rol    $0x1c,%rax
    0.10 :	  403253:       mov    %rax,-0x118(%rbp)
         :	            Agu ^= Du;
    0.30 :	  40325a:       mov    -0xd0(%rbp),%rax
    0.00 :	  403261:       xor    %rax,-0x198(%rbp)
         :	            BCe = ROL(Agu, 20);
    0.18 :	  403268:       mov    -0x198(%rbp),%rax
    0.28 :	  40326f:       rol    $0x14,%rax
    0.00 :	  403273:       mov    %rax,-0x110(%rbp)
         :	            Aka ^= Da;
    0.36 :	  40327a:       mov    -0xf0(%rbp),%rax
    0.02 :	  403281:       xor    %rax,-0x190(%rbp)
         :	            BCi = ROL(Aka,  3);
    0.16 :	  403288:       mov    -0x190(%rbp),%rax
    0.24 :	  40328f:       rol    $0x3,%rax
    0.00 :	  403293:       mov    %rax,-0x108(%rbp)
         :	            Ame ^= De;
    0.42 :	  40329a:       mov    -0xe8(%rbp),%rax
    0.02 :	  4032a1:       xor    %rax,-0x160(%rbp)
         :	            BCo = ROL(Ame, 45);
    0.12 :	  4032a8:       mov    -0x160(%rbp),%rax
    0.22 :	  4032af:       ror    $0x13,%rax
    0.00 :	  4032b3:       mov    %rax,-0x100(%rbp)
         :	            Asi ^= Di;
    0.16 :	  4032ba:       mov    -0xe0(%rbp),%rax
    0.04 :	  4032c1:       xor    %rax,-0x130(%rbp)
         :	            BCu = ROL(Asi, 61);
    0.06 :	  4032c8:       mov    -0x130(%rbp),%rax
    0.20 :	  4032cf:       ror    $0x3,%rax
    0.02 :	  4032d3:       mov    %rax,-0xf8(%rbp)
         :	            Ega =   BCa ^((~BCe)&  BCi );
    0.26 :	  4032da:       mov    -0x110(%rbp),%rax
    0.00 :	  4032e1:       not    %rax
    0.18 :	  4032e4:       and    -0x108(%rbp),%rax
    0.06 :	  4032eb:       xor    -0x118(%rbp),%rax
    0.24 :	  4032f2:       mov    %rax,-0xa0(%rbp)
         :	            Ege =   BCe ^((~BCi)&  BCo );
    0.08 :	  4032f9:       mov    -0x108(%rbp),%rax
    0.00 :	  403300:       not    %rax
    0.00 :	  403303:       and    -0x100(%rbp),%rax
    0.30 :	  40330a:       xor    -0x110(%rbp),%rax
    0.16 :	  403311:       mov    %rax,-0x98(%rbp)
         :	            Egi =   BCi ^((~BCo)&  BCu );
    0.42 :	  403318:       mov    -0x100(%rbp),%rax
    0.02 :	  40331f:       not    %rax
    0.06 :	  403322:       and    -0xf8(%rbp),%rax
    0.02 :	  403329:       xor    -0x108(%rbp),%rax
    0.50 :	  403330:       mov    %rax,-0x90(%rbp)
         :	            Ego =   BCo ^((~BCu)&  BCa );
    0.57 :	  403337:       mov    -0xf8(%rbp),%rax
    0.00 :	  40333e:       not    %rax
    0.00 :	  403341:       and    -0x118(%rbp),%rax
    0.10 :	  403348:       xor    -0x100(%rbp),%rax
    0.26 :	  40334f:       mov    %rax,-0x88(%rbp)
         :	            Egu =   BCu ^((~BCa)&  BCe );
    0.42 :	  403356:       mov    -0x118(%rbp),%rax
    0.04 :	  40335d:       not    %rax
    0.02 :	  403360:       and    -0x110(%rbp),%rax
    0.06 :	  403367:       xor    -0xf8(%rbp),%rax
    0.18 :	  40336e:       mov    %rax,-0x80(%rbp)
         :
         :	            Abe ^= De;
    0.08 :	  403372:       mov    -0xe8(%rbp),%rax
    0.04 :	  403379:       xor    %rax,-0x1d8(%rbp)
         :	            BCa = ROL(Abe,  1);
    0.34 :	  403380:       mov    -0x1d8(%rbp),%rax
    0.46 :	  403387:       rol    %rax
    0.50 :	  40338a:       mov    %rax,-0x118(%rbp)
         :	            Agi ^= Di;
    0.34 :	  403391:       mov    -0xe0(%rbp),%rax
    0.02 :	  403398:       xor    %rax,-0x1a8(%rbp)
         :	            BCe = ROL(Agi,  6);
    0.02 :	  40339f:       mov    -0x1a8(%rbp),%rax
    0.36 :	  4033a6:       rol    $0x6,%rax
    0.04 :	  4033aa:       mov    %rax,-0x110(%rbp)
         :	            Ako ^= Do;
    0.26 :	  4033b1:       mov    -0xd8(%rbp),%rax
    0.00 :	  4033b8:       xor    %rax,-0x178(%rbp)
         :	            BCi = ROL(Ako, 25);
    0.14 :	  4033bf:       mov    -0x178(%rbp),%rax
    0.22 :	  4033c6:       rol    $0x19,%rax
    0.02 :	  4033ca:       mov    %rax,-0x108(%rbp)
         :	            Amu ^= Du;
    0.24 :	  4033d1:       mov    -0xd0(%rbp),%rax
    0.00 :	  4033d8:       xor    %rax,-0x148(%rbp)
         :	            BCo = ROL(Amu,  8);
    0.20 :	  4033df:       mov    -0x148(%rbp),%rax
    0.32 :	  4033e6:       rol    $0x8,%rax
    0.06 :	  4033ea:       mov    %rax,-0x100(%rbp)
         :	            Asa ^= Da;
    0.24 :	  4033f1:       mov    -0xf0(%rbp),%rax
    0.02 :	  4033f8:       xor    %rax,-0x140(%rbp)
         :	            BCu = ROL(Asa, 18);
    0.14 :	  4033ff:       mov    -0x140(%rbp),%rax
    0.20 :	  403406:       rol    $0x12,%rax
    0.04 :	  40340a:       mov    %rax,-0xf8(%rbp)
         :	            Eka =   BCa ^((~BCe)&  BCi );
    0.52 :	  403411:       mov    -0x110(%rbp),%rax
    0.02 :	  403418:       not    %rax
    0.10 :	  40341b:       and    -0x108(%rbp),%rax
    0.04 :	  403422:       xor    -0x118(%rbp),%rax
    0.30 :	  403429:       mov    %rax,-0x78(%rbp)
         :	            Eke =   BCe ^((~BCi)&  BCo );
    0.34 :	  40342d:       mov    -0x108(%rbp),%rax
    0.00 :	  403434:       not    %rax
    0.00 :	  403437:       and    -0x100(%rbp),%rax
    0.12 :	  40343e:       xor    -0x110(%rbp),%rax
    0.14 :	  403445:       mov    %rax,-0x70(%rbp)
         :	            Eki =   BCi ^((~BCo)&  BCu );
    0.79 :	  403449:       mov    -0x100(%rbp),%rax
    0.00 :	  403450:       not    %rax
    0.00 :	  403453:       and    -0xf8(%rbp),%rax
    0.00 :	  40345a:       xor    -0x108(%rbp),%rax
    0.24 :	  403461:       mov    %rax,-0x68(%rbp)
         :	            Eko =   BCo ^((~BCu)&  BCa );
    0.22 :	  403465:       mov    -0xf8(%rbp),%rax
    0.04 :	  40346c:       not    %rax
    0.00 :	  40346f:       and    -0x118(%rbp),%rax
    0.06 :	  403476:       xor    -0x100(%rbp),%rax
    0.10 :	  40347d:       mov    %rax,-0x60(%rbp)
         :	            Eku =   BCu ^((~BCa)&  BCe );
    0.28 :	  403481:       mov    -0x118(%rbp),%rax
    0.00 :	  403488:       not    %rax
    0.02 :	  40348b:       and    -0x110(%rbp),%rax
    0.02 :	  403492:       xor    -0xf8(%rbp),%rax
    0.18 :	  403499:       mov    %rax,-0x58(%rbp)
         :
         :	            Abu ^= Du;
    0.02 :	  40349d:       mov    -0xd0(%rbp),%rax
    0.02 :	  4034a4:       xor    %rax,-0x1c0(%rbp)
         :	            BCa = ROL(Abu, 27);
    0.42 :	  4034ab:       mov    -0x1c0(%rbp),%rax
    0.38 :	  4034b2:       rol    $0x1b,%rax
    0.20 :	  4034b6:       mov    %rax,-0x118(%rbp)
         :	            Aga ^= Da;
    0.95 :	  4034bd:       mov    -0xf0(%rbp),%rax
    0.02 :	  4034c4:       xor    %rax,-0x1b8(%rbp)
         :	            BCe = ROL(Aga, 36);
    0.02 :	  4034cb:       mov    -0x1b8(%rbp),%rax
    0.24 :	  4034d2:       ror    $0x1c,%rax
    0.04 :	  4034d6:       mov    %rax,-0x110(%rbp)
         :	            Ake ^= De;
    0.14 :	  4034dd:       mov    -0xe8(%rbp),%rax
    0.00 :	  4034e4:       xor    %rax,-0x188(%rbp)
         :	            BCi = ROL(Ake, 10);
    0.12 :	  4034eb:       mov    -0x188(%rbp),%rax
    0.10 :	  4034f2:       rol    $0xa,%rax
    0.00 :	  4034f6:       mov    %rax,-0x108(%rbp)
         :	            Ami ^= Di;
    0.38 :	  4034fd:       mov    -0xe0(%rbp),%rax
    0.00 :	  403504:       xor    %rax,-0x158(%rbp)
         :	            BCo = ROL(Ami, 15);
    0.08 :	  40350b:       mov    -0x158(%rbp),%rax
    0.38 :	  403512:       rol    $0xf,%rax
    0.04 :	  403516:       mov    %rax,-0x100(%rbp)
         :	            Aso ^= Do;
    0.18 :	  40351d:       mov    -0xd8(%rbp),%rax
    0.00 :	  403524:       xor    %rax,-0x128(%rbp)
         :	            BCu = ROL(Aso, 56);
    0.26 :	  40352b:       mov    -0x128(%rbp),%rax
    0.20 :	  403532:       ror    $0x8,%rax
    0.08 :	  403536:       mov    %rax,-0xf8(%rbp)
         :	            Ema =   BCa ^((~BCe)&  BCi );
    0.59 :	  40353d:       mov    -0x110(%rbp),%rax
    0.02 :	  403544:       not    %rax
    0.00 :	  403547:       and    -0x108(%rbp),%rax
    0.02 :	  40354e:       xor    -0x118(%rbp),%rax
    0.38 :	  403555:       mov    %rax,-0x50(%rbp)
         :	            Eme =   BCe ^((~BCi)&  BCo );
    0.20 :	  403559:       mov    -0x108(%rbp),%rax
    0.00 :	  403560:       not    %rax
    0.00 :	  403563:       and    -0x100(%rbp),%rax
    0.18 :	  40356a:       xor    -0x110(%rbp),%rax
    0.18 :	  403571:       mov    %rax,-0x48(%rbp)
         :	            Emi =   BCi ^((~BCo)&  BCu );
    0.75 :	  403575:       mov    -0x100(%rbp),%rax
    0.00 :	  40357c:       not    %rax
    0.00 :	  40357f:       and    -0xf8(%rbp),%rax
    0.00 :	  403586:       xor    -0x108(%rbp),%rax
    0.16 :	  40358d:       mov    %rax,-0x40(%rbp)
         :	            Emo =   BCo ^((~BCu)&  BCa );
    0.24 :	  403591:       mov    -0xf8(%rbp),%rax
    0.00 :	  403598:       not    %rax
    0.00 :	  40359b:       and    -0x118(%rbp),%rax
    0.06 :	  4035a2:       xor    -0x100(%rbp),%rax
    0.20 :	  4035a9:       mov    %rax,-0x38(%rbp)
         :	            Emu =   BCu ^((~BCa)&  BCe );
    0.48 :	  4035ad:       mov    -0x118(%rbp),%rax
    0.02 :	  4035b4:       not    %rax
    0.00 :	  4035b7:       and    -0x110(%rbp),%rax
    0.02 :	  4035be:       xor    -0xf8(%rbp),%rax
    0.30 :	  4035c5:       mov    %rax,-0x30(%rbp)
         :
         :	            Abi ^= Di;
    0.00 :	  4035c9:       mov    -0xe0(%rbp),%rax
    0.00 :	  4035d0:       xor    %rax,-0x1d0(%rbp)
         :	            BCa = ROL(Abi, 62);
    0.50 :	  4035d7:       mov    -0x1d0(%rbp),%rax
    0.38 :	  4035de:       ror    $0x2,%rax
    0.36 :	  4035e2:       mov    %rax,-0x118(%rbp)
         :	            Ago ^= Do;
    0.63 :	  4035e9:       mov    -0xd8(%rbp),%rax
    0.02 :	  4035f0:       xor    %rax,-0x1a0(%rbp)
         :	            BCe = ROL(Ago, 55);
    0.00 :	  4035f7:       mov    -0x1a0(%rbp),%rax
    0.18 :	  4035fe:       ror    $0x9,%rax
    0.00 :	  403602:       mov    %rax,-0x110(%rbp)
         :	            Aku ^= Du;
    0.08 :	  403609:       mov    -0xd0(%rbp),%rax
    0.00 :	  403610:       xor    %rax,-0x170(%rbp)
         :	            BCi = ROL(Aku, 39);
    0.12 :	  403617:       mov    -0x170(%rbp),%rax
    0.14 :	  40361e:       ror    $0x19,%rax
    0.02 :	  403622:       mov    %rax,-0x108(%rbp)
         :	            Ama ^= Da;
    0.34 :	  403629:       mov    -0xf0(%rbp),%rax
    0.00 :	  403630:       xor    %rax,-0x168(%rbp)
         :	            BCo = ROL(Ama, 41);
    0.04 :	  403637:       mov    -0x168(%rbp),%rax
    0.46 :	  40363e:       ror    $0x17,%rax
    0.10 :	  403642:       mov    %rax,-0x100(%rbp)
         :	            Ase ^= De;
    0.34 :	  403649:       mov    -0xe8(%rbp),%rax
    0.00 :	  403650:       xor    %rax,-0x138(%rbp)
         :	            BCu = ROL(Ase,  2);
    0.08 :	  403657:       mov    -0x138(%rbp),%rax
    0.18 :	  40365e:       rol    $0x2,%rax
    0.04 :	  403662:       mov    %rax,-0xf8(%rbp)
         :	            Esa =   BCa ^((~BCe)&  BCi );
    0.55 :	  403669:       mov    -0x110(%rbp),%rax
    0.00 :	  403670:       not    %rax
    0.04 :	  403673:       and    -0x108(%rbp),%rax
    0.02 :	  40367a:       xor    -0x118(%rbp),%rax
    0.46 :	  403681:       mov    %rax,-0x28(%rbp)
         :	            Ese =   BCe ^((~BCi)&  BCo );
    0.12 :	  403685:       mov    -0x108(%rbp),%rax
    0.04 :	  40368c:       not    %rax
    0.00 :	  40368f:       and    -0x100(%rbp),%rax
    0.26 :	  403696:       xor    -0x110(%rbp),%rax
    0.10 :	  40369d:       mov    %rax,-0x20(%rbp)
         :	            Esi =   BCi ^((~BCo)&  BCu );
    0.67 :	  4036a1:       mov    -0x100(%rbp),%rax
    0.00 :	  4036a8:       not    %rax
    0.00 :	  4036ab:       and    -0xf8(%rbp),%rax
    0.00 :	  4036b2:       xor    -0x108(%rbp),%rax
    0.38 :	  4036b9:       mov    %rax,-0x18(%rbp)
         :	            Eso =   BCo ^((~BCu)&  BCa );
    0.36 :	  4036bd:       mov    -0xf8(%rbp),%rax
    0.00 :	  4036c4:       not    %rax
    0.02 :	  4036c7:       and    -0x118(%rbp),%rax
    0.06 :	  4036ce:       xor    -0x100(%rbp),%rax
    0.22 :	  4036d5:       mov    %rax,-0x10(%rbp)
         :	            Esu =   BCu ^((~BCa)&  BCe );
    0.42 :	  4036d9:       mov    -0x118(%rbp),%rax
    0.02 :	  4036e0:       not    %rax
    0.02 :	  4036e3:       and    -0x110(%rbp),%rax
    0.00 :	  4036ea:       xor    -0xf8(%rbp),%rax
    0.26 :	  4036f1:       mov    %rax,-0x8(%rbp)
         :
         :	            //    prepareTheta
         :	            BCa = Eba^Ega^Eka^Ema^Esa;
    0.00 :	  4036f5:       mov    -0xc8(%rbp),%rax
    0.02 :	  4036fc:       xor    -0xa0(%rbp),%rax
    0.04 :	  403703:       xor    -0x78(%rbp),%rax
    0.34 :	  403707:       xor    -0x50(%rbp),%rax
    0.00 :	  40370b:       xor    -0x28(%rbp),%rax
    0.00 :	  40370f:       mov    %rax,-0x118(%rbp)
         :	            BCe = Ebe^Ege^Eke^Eme^Ese;
    0.10 :	  403716:       mov    -0xc0(%rbp),%rax
    0.36 :	  40371d:       xor    -0x98(%rbp),%rax
    0.00 :	  403724:       xor    -0x70(%rbp),%rax
    0.02 :	  403728:       xor    -0x48(%rbp),%rax
    0.00 :	  40372c:       xor    -0x20(%rbp),%rax
    0.32 :	  403730:       mov    %rax,-0x110(%rbp)
         :	            BCi = Ebi^Egi^Eki^Emi^Esi;
    0.16 :	  403737:       mov    -0xb8(%rbp),%rax
    0.00 :	  40373e:       xor    -0x90(%rbp),%rax
    0.00 :	  403745:       xor    -0x68(%rbp),%rax
    0.24 :	  403749:       xor    -0x40(%rbp),%rax
    0.08 :	  40374d:       xor    -0x18(%rbp),%rax
    0.00 :	  403751:       mov    %rax,-0x108(%rbp)
         :	            BCo = Ebo^Ego^Eko^Emo^Eso;
    0.32 :	  403758:       mov    -0xb0(%rbp),%rax
    0.04 :	  40375f:       xor    -0x88(%rbp),%rax
    0.04 :	  403766:       xor    -0x60(%rbp),%rax
    0.00 :	  40376a:       xor    -0x38(%rbp),%rax
    0.34 :	  40376e:       xor    -0x10(%rbp),%rax
    0.04 :	  403772:       mov    %rax,-0x100(%rbp)
         :	            BCu = Ebu^Egu^Eku^Emu^Esu;
    0.61 :	  403779:       mov    -0xa8(%rbp),%rax
    0.00 :	  403780:       xor    -0x80(%rbp),%rax
    0.04 :	  403784:       xor    -0x58(%rbp),%rax
    0.02 :	  403788:       xor    -0x30(%rbp),%rax
    0.59 :	  40378c:       xor    -0x8(%rbp),%rax
    0.04 :	  403790:       mov    %rax,-0xf8(%rbp)
         :
         :	            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
         :	            Da = BCu^ROL(BCe, 1);
    0.38 :	  403797:       mov    -0x110(%rbp),%rax
    0.02 :	  40379e:       rol    %rax
    0.08 :	  4037a1:       xor    -0xf8(%rbp),%rax
    1.31 :	  4037a8:       mov    %rax,-0xf0(%rbp)
         :	            De = BCa^ROL(BCi, 1);
    0.73 :	  4037af:       mov    -0x108(%rbp),%rax
    0.00 :	  4037b6:       rol    %rax
    0.00 :	  4037b9:       xor    -0x118(%rbp),%rax
    0.40 :	  4037c0:       mov    %rax,-0xe8(%rbp)
         :	            Di = BCe^ROL(BCo, 1);
    0.04 :	  4037c7:       mov    -0x100(%rbp),%rax
    0.00 :	  4037ce:       rol    %rax
    0.50 :	  4037d1:       xor    -0x110(%rbp),%rax
    0.04 :	  4037d8:       mov    %rax,-0xe0(%rbp)
         :	            Do = BCi^ROL(BCu, 1);
    0.34 :	  4037df:       mov    -0xf8(%rbp),%rax
    0.00 :	  4037e6:       rol    %rax
    0.28 :	  4037e9:       xor    -0x108(%rbp),%rax
    0.16 :	  4037f0:       mov    %rax,-0xd8(%rbp)
         :	            Du = BCo^ROL(BCa, 1);
    0.18 :	  4037f7:       mov    -0x118(%rbp),%rax
    0.12 :	  4037fe:       rol    %rax
    0.18 :	  403801:       xor    -0x100(%rbp),%rax
    0.10 :	  403808:       mov    %rax,-0xd0(%rbp)
         :
         :	            Eba ^= Da;
    0.14 :	  40380f:       mov    -0xf0(%rbp),%rax
    0.08 :	  403816:       xor    %rax,-0xc8(%rbp)
         :	            BCa = Eba;
    0.46 :	  40381d:       mov    -0xc8(%rbp),%rax
    1.01 :	  403824:       mov    %rax,-0x118(%rbp)
         :	            Ege ^= De;
    0.46 :	  40382b:       mov    -0xe8(%rbp),%rax
    0.00 :	  403832:       xor    %rax,-0x98(%rbp)
         :	            BCe = ROL(Ege, 44);
    0.04 :	  403839:       mov    -0x98(%rbp),%rax
    0.38 :	  403840:       ror    $0x14,%rax
    0.08 :	  403844:       mov    %rax,-0x110(%rbp)
         :	            Eki ^= Di;
    0.14 :	  40384b:       mov    -0xe0(%rbp),%rax
    0.00 :	  403852:       xor    %rax,-0x68(%rbp)
         :	            BCi = ROL(Eki, 43);
    0.16 :	  403856:       mov    -0x68(%rbp),%rax
    0.12 :	  40385a:       ror    $0x15,%rax
    0.00 :	  40385e:       mov    %rax,-0x108(%rbp)
         :	            Emo ^= Do;
    0.32 :	  403865:       mov    -0xd8(%rbp),%rax
    0.00 :	  40386c:       xor    %rax,-0x38(%rbp)
         :	            BCo = ROL(Emo, 21);
    0.14 :	  403870:       mov    -0x38(%rbp),%rax
    0.30 :	  403874:       rol    $0x15,%rax
    0.04 :	  403878:       mov    %rax,-0x100(%rbp)
         :	            Esu ^= Du;
    0.06 :	  40387f:       mov    -0xd0(%rbp),%rax
    0.00 :	  403886:       xor    %rax,-0x8(%rbp)
         :	            BCu = ROL(Esu, 14);
    0.24 :	  40388a:       mov    -0x8(%rbp),%rax
    0.12 :	  40388e:       rol    $0xe,%rax
    0.02 :	  403892:       mov    %rax,-0xf8(%rbp)
         :	            Aba =   BCa ^((~BCe)&  BCi );
    0.18 :	  403899:       mov    -0x110(%rbp),%rax
    0.06 :	  4038a0:       not    %rax
    0.24 :	  4038a3:       and    -0x108(%rbp),%rax
    0.08 :	  4038aa:       xor    -0x118(%rbp),%rax
    0.32 :	  4038b1:       mov    %rax,-0x1e0(%rbp)
         :	            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    0.42 :	  4038b8:       mov    -0x1e4(%rbp),%eax
    0.04 :	  4038be:       add    $0x1,%eax
    0.00 :	  4038c1:       cltq   
    0.08 :	  4038c3:       mov    0x4a4460(,%rax,8),%rax
    0.34 :	  4038cb:       xor    %rax,-0x1e0(%rbp)
         :	            Abe =   BCe ^((~BCi)&  BCo );
    0.99 :	  4038d2:       mov    -0x108(%rbp),%rax
    0.02 :	  4038d9:       not    %rax
    0.00 :	  4038dc:       and    -0x100(%rbp),%rax
    0.02 :	  4038e3:       xor    -0x110(%rbp),%rax
    0.30 :	  4038ea:       mov    %rax,-0x1d8(%rbp)
         :	            Abi =   BCi ^((~BCo)&  BCu );
    0.02 :	  4038f1:       mov    -0x100(%rbp),%rax
    0.00 :	  4038f8:       not    %rax
    0.00 :	  4038fb:       and    -0xf8(%rbp),%rax
    0.08 :	  403902:       xor    -0x108(%rbp),%rax
    0.02 :	  403909:       mov    %rax,-0x1d0(%rbp)
         :	            Abo =   BCo ^((~BCu)&  BCa );
    0.02 :	  403910:       mov    -0xf8(%rbp),%rax
    0.00 :	  403917:       not    %rax
    0.18 :	  40391a:       and    -0x118(%rbp),%rax
    0.02 :	  403921:       xor    -0x100(%rbp),%rax
    0.10 :	  403928:       mov    %rax,-0x1c8(%rbp)
         :	            Abu =   BCu ^((~BCa)&  BCe );
    0.00 :	  40392f:       mov    -0x118(%rbp),%rax
    0.16 :	  403936:       not    %rax
    0.00 :	  403939:       and    -0x110(%rbp),%rax
    0.04 :	  403940:       xor    -0xf8(%rbp),%rax
    0.00 :	  403947:       mov    %rax,-0x1c0(%rbp)
         :
         :	            Ebo ^= Do;
    0.18 :	  40394e:       mov    -0xd8(%rbp),%rax
    0.02 :	  403955:       xor    %rax,-0xb0(%rbp)
         :	            BCa = ROL(Ebo, 28);
    0.06 :	  40395c:       mov    -0xb0(%rbp),%rax
    0.28 :	  403963:       rol    $0x1c,%rax
    0.12 :	  403967:       mov    %rax,-0x118(%rbp)
         :	            Egu ^= Du;
    0.44 :	  40396e:       mov    -0xd0(%rbp),%rax
    0.00 :	  403975:       xor    %rax,-0x80(%rbp)
         :	            BCe = ROL(Egu, 20);
    0.08 :	  403979:       mov    -0x80(%rbp),%rax
    0.30 :	  40397d:       rol    $0x14,%rax
    0.06 :	  403981:       mov    %rax,-0x110(%rbp)
         :	            Eka ^= Da;
    0.12 :	  403988:       mov    -0xf0(%rbp),%rax
    0.00 :	  40398f:       xor    %rax,-0x78(%rbp)
         :	            BCi = ROL(Eka, 3);
    0.18 :	  403993:       mov    -0x78(%rbp),%rax
    0.20 :	  403997:       rol    $0x3,%rax
    0.00 :	  40399b:       mov    %rax,-0x108(%rbp)
         :	            Eme ^= De;
    0.22 :	  4039a2:       mov    -0xe8(%rbp),%rax
    0.00 :	  4039a9:       xor    %rax,-0x48(%rbp)
         :	            BCo = ROL(Eme, 45);
    0.16 :	  4039ad:       mov    -0x48(%rbp),%rax
    0.20 :	  4039b1:       ror    $0x13,%rax
    0.06 :	  4039b5:       mov    %rax,-0x100(%rbp)
         :	            Esi ^= Di;
    0.26 :	  4039bc:       mov    -0xe0(%rbp),%rax
    0.00 :	  4039c3:       xor    %rax,-0x18(%rbp)
         :	            BCu = ROL(Esi, 61);
    0.06 :	  4039c7:       mov    -0x18(%rbp),%rax
    0.18 :	  4039cb:       ror    $0x3,%rax
    0.04 :	  4039cf:       mov    %rax,-0xf8(%rbp)
         :	            Aga =   BCa ^((~BCe)&  BCi );
    0.20 :	  4039d6:       mov    -0x110(%rbp),%rax
    0.02 :	  4039dd:       not    %rax
    0.08 :	  4039e0:       and    -0x108(%rbp),%rax
    0.10 :	  4039e7:       xor    -0x118(%rbp),%rax
    0.28 :	  4039ee:       mov    %rax,-0x1b8(%rbp)
         :	            Age =   BCe ^((~BCi)&  BCo );
    0.30 :	  4039f5:       mov    -0x108(%rbp),%rax
    0.02 :	  4039fc:       not    %rax
    0.00 :	  4039ff:       and    -0x100(%rbp),%rax
    0.06 :	  403a06:       xor    -0x110(%rbp),%rax
    0.22 :	  403a0d:       mov    %rax,-0x1b0(%rbp)
         :	            Agi =   BCi ^((~BCo)&  BCu );
    0.87 :	  403a14:       mov    -0x100(%rbp),%rax
    0.02 :	  403a1b:       not    %rax
    0.04 :	  403a1e:       and    -0xf8(%rbp),%rax
    0.02 :	  403a25:       xor    -0x108(%rbp),%rax
    0.52 :	  403a2c:       mov    %rax,-0x1a8(%rbp)
         :	            Ago =   BCo ^((~BCu)&  BCa );
    0.55 :	  403a33:       mov    -0xf8(%rbp),%rax
    0.02 :	  403a3a:       not    %rax
    0.02 :	  403a3d:       and    -0x118(%rbp),%rax
    0.02 :	  403a44:       xor    -0x100(%rbp),%rax
    0.32 :	  403a4b:       mov    %rax,-0x1a0(%rbp)
         :	            Agu =   BCu ^((~BCa)&  BCe );
    0.40 :	  403a52:       mov    -0x118(%rbp),%rax
    0.00 :	  403a59:       not    %rax
    0.00 :	  403a5c:       and    -0x110(%rbp),%rax
    0.04 :	  403a63:       xor    -0xf8(%rbp),%rax
    0.22 :	  403a6a:       mov    %rax,-0x198(%rbp)
         :
         :	            Ebe ^= De;
    0.00 :	  403a71:       mov    -0xe8(%rbp),%rax
    0.02 :	  403a78:       xor    %rax,-0xc0(%rbp)
         :	            BCa = ROL(Ebe, 1);
    0.36 :	  403a7f:       mov    -0xc0(%rbp),%rax
    0.32 :	  403a86:       rol    %rax
    0.55 :	  403a89:       mov    %rax,-0x118(%rbp)
         :	            Egi ^= Di;
    0.26 :	  403a90:       mov    -0xe0(%rbp),%rax
    0.02 :	  403a97:       xor    %rax,-0x90(%rbp)
         :	            BCe = ROL(Egi, 6);
    0.04 :	  403a9e:       mov    -0x90(%rbp),%rax
    0.26 :	  403aa5:       rol    $0x6,%rax
    0.04 :	  403aa9:       mov    %rax,-0x110(%rbp)
         :	            Eko ^= Do;
    0.30 :	  403ab0:       mov    -0xd8(%rbp),%rax
    0.00 :	  403ab7:       xor    %rax,-0x60(%rbp)
         :	            BCi = ROL(Eko, 25);
    0.10 :	  403abb:       mov    -0x60(%rbp),%rax
    0.28 :	  403abf:       rol    $0x19,%rax
    0.00 :	  403ac3:       mov    %rax,-0x108(%rbp)
         :	            Emu ^= Du;
    0.24 :	  403aca:       mov    -0xd0(%rbp),%rax
    0.00 :	  403ad1:       xor    %rax,-0x30(%rbp)
         :	            BCo = ROL(Emu, 8);
    0.30 :	  403ad5:       mov    -0x30(%rbp),%rax
    0.20 :	  403ad9:       rol    $0x8,%rax
    0.02 :	  403add:       mov    %rax,-0x100(%rbp)
         :	            Esa ^= Da;
    0.24 :	  403ae4:       mov    -0xf0(%rbp),%rax
    0.00 :	  403aeb:       xor    %rax,-0x28(%rbp)
         :	            BCu = ROL(Esa, 18);
    0.18 :	  403aef:       mov    -0x28(%rbp),%rax
    0.20 :	  403af3:       rol    $0x12,%rax
    0.04 :	  403af7:       mov    %rax,-0xf8(%rbp)
         :	            Aka =   BCa ^((~BCe)&  BCi );
    0.32 :	  403afe:       mov    -0x110(%rbp),%rax
    0.02 :	  403b05:       not    %rax
    0.08 :	  403b08:       and    -0x108(%rbp),%rax
    0.04 :	  403b0f:       xor    -0x118(%rbp),%rax
    0.24 :	  403b16:       mov    %rax,-0x190(%rbp)
         :	            Ake =   BCe ^((~BCi)&  BCo );
    0.34 :	  403b1d:       mov    -0x108(%rbp),%rax
    0.00 :	  403b24:       not    %rax
    0.00 :	  403b27:       and    -0x100(%rbp),%rax
    0.20 :	  403b2e:       xor    -0x110(%rbp),%rax
    0.22 :	  403b35:       mov    %rax,-0x188(%rbp)
         :	            Aki =   BCi ^((~BCo)&  BCu );
    0.59 :	  403b3c:       mov    -0x100(%rbp),%rax
    0.02 :	  403b43:       not    %rax
    0.00 :	  403b46:       and    -0xf8(%rbp),%rax
    0.00 :	  403b4d:       xor    -0x108(%rbp),%rax
    0.36 :	  403b54:       mov    %rax,-0x180(%rbp)
         :	            Ako =   BCo ^((~BCu)&  BCa );
    0.24 :	  403b5b:       mov    -0xf8(%rbp),%rax
    0.00 :	  403b62:       not    %rax
    0.00 :	  403b65:       and    -0x118(%rbp),%rax
    0.06 :	  403b6c:       xor    -0x100(%rbp),%rax
    0.12 :	  403b73:       mov    %rax,-0x178(%rbp)
         :	            Aku =   BCu ^((~BCa)&  BCe );
    0.48 :	  403b7a:       mov    -0x118(%rbp),%rax
    0.00 :	  403b81:       not    %rax
    0.02 :	  403b84:       and    -0x110(%rbp),%rax
    0.04 :	  403b8b:       xor    -0xf8(%rbp),%rax
    0.20 :	  403b92:       mov    %rax,-0x170(%rbp)
         :
         :	            Ebu ^= Du;
    0.00 :	  403b99:       mov    -0xd0(%rbp),%rax
    0.04 :	  403ba0:       xor    %rax,-0xa8(%rbp)
         :	            BCa = ROL(Ebu, 27);
    0.36 :	  403ba7:       mov    -0xa8(%rbp),%rax
    0.46 :	  403bae:       rol    $0x1b,%rax
    0.24 :	  403bb2:       mov    %rax,-0x118(%rbp)
         :	            Ega ^= Da;
    0.93 :	  403bb9:       mov    -0xf0(%rbp),%rax
    0.00 :	  403bc0:       xor    %rax,-0xa0(%rbp)
         :	            BCe = ROL(Ega, 36);
    0.02 :	  403bc7:       mov    -0xa0(%rbp),%rax
    0.38 :	  403bce:       ror    $0x1c,%rax
    0.04 :	  403bd2:       mov    %rax,-0x110(%rbp)
         :	            Eke ^= De;
    0.16 :	  403bd9:       mov    -0xe8(%rbp),%rax
    0.00 :	  403be0:       xor    %rax,-0x70(%rbp)
         :	            BCi = ROL(Eke, 10);
    0.06 :	  403be4:       mov    -0x70(%rbp),%rax
    0.24 :	  403be8:       rol    $0xa,%rax
    0.02 :	  403bec:       mov    %rax,-0x108(%rbp)
         :	            Emi ^= Di;
    0.16 :	  403bf3:       mov    -0xe0(%rbp),%rax
    0.00 :	  403bfa:       xor    %rax,-0x40(%rbp)
         :	            BCo = ROL(Emi, 15);
    0.12 :	  403bfe:       mov    -0x40(%rbp),%rax
    0.38 :	  403c02:       rol    $0xf,%rax
    0.00 :	  403c06:       mov    %rax,-0x100(%rbp)
         :	            Eso ^= Do;
    0.26 :	  403c0d:       mov    -0xd8(%rbp),%rax
    0.00 :	  403c14:       xor    %rax,-0x10(%rbp)
         :	            BCu = ROL(Eso, 56);
    0.08 :	  403c18:       mov    -0x10(%rbp),%rax
    0.22 :	  403c1c:       ror    $0x8,%rax
    0.12 :	  403c20:       mov    %rax,-0xf8(%rbp)
         :	            Ama =   BCa ^((~BCe)&  BCi );
    0.61 :	  403c27:       mov    -0x110(%rbp),%rax
    0.00 :	  403c2e:       not    %rax
    0.04 :	  403c31:       and    -0x108(%rbp),%rax
    0.02 :	  403c38:       xor    -0x118(%rbp),%rax
    0.48 :	  403c3f:       mov    %rax,-0x168(%rbp)
         :	            Ame =   BCe ^((~BCi)&  BCo );
    0.22 :	  403c46:       mov    -0x108(%rbp),%rax
    0.00 :	  403c4d:       not    %rax
    0.00 :	  403c50:       and    -0x100(%rbp),%rax
    0.26 :	  403c57:       xor    -0x110(%rbp),%rax
    0.14 :	  403c5e:       mov    %rax,-0x160(%rbp)
         :	            Ami =   BCi ^((~BCo)&  BCu );
    0.69 :	  403c65:       mov    -0x100(%rbp),%rax
    0.02 :	  403c6c:       not    %rax
    0.00 :	  403c6f:       and    -0xf8(%rbp),%rax
    0.08 :	  403c76:       xor    -0x108(%rbp),%rax
    0.32 :	  403c7d:       mov    %rax,-0x158(%rbp)
         :	            Amo =   BCo ^((~BCu)&  BCa );
    0.16 :	  403c84:       mov    -0xf8(%rbp),%rax
    0.00 :	  403c8b:       not    %rax
    0.00 :	  403c8e:       and    -0x118(%rbp),%rax
    0.02 :	  403c95:       xor    -0x100(%rbp),%rax
    0.16 :	  403c9c:       mov    %rax,-0x150(%rbp)
         :	            Amu =   BCu ^((~BCa)&  BCe );
    0.40 :	  403ca3:       mov    -0x118(%rbp),%rax
    0.00 :	  403caa:       not    %rax
    0.02 :	  403cad:       and    -0x110(%rbp),%rax
    0.00 :	  403cb4:       xor    -0xf8(%rbp),%rax
    0.32 :	  403cbb:       mov    %rax,-0x148(%rbp)
         :
         :	            Ebi ^= Di;
    0.00 :	  403cc2:       mov    -0xe0(%rbp),%rax
    0.00 :	  403cc9:       xor    %rax,-0xb8(%rbp)
         :	            BCa = ROL(Ebi, 62);
    0.59 :	  403cd0:       mov    -0xb8(%rbp),%rax
    0.34 :	  403cd7:       ror    $0x2,%rax
    0.30 :	  403cdb:       mov    %rax,-0x118(%rbp)
         :	            Ego ^= Do;
    0.67 :	  403ce2:       mov    -0xd8(%rbp),%rax
    0.06 :	  403ce9:       xor    %rax,-0x88(%rbp)
         :	            BCe = ROL(Ego, 55);
    0.00 :	  403cf0:       mov    -0x88(%rbp),%rax
    0.34 :	  403cf7:       ror    $0x9,%rax
    0.04 :	  403cfb:       mov    %rax,-0x110(%rbp)
         :	            Eku ^= Du;
    0.04 :	  403d02:       mov    -0xd0(%rbp),%rax
    0.02 :	  403d09:       xor    %rax,-0x58(%rbp)
         :	            BCi = ROL(Eku, 39);
    0.12 :	  403d0d:       mov    -0x58(%rbp),%rax
    0.08 :	  403d11:       ror    $0x19,%rax
    0.00 :	  403d15:       mov    %rax,-0x108(%rbp)
         :	            Ema ^= Da;
    0.42 :	  403d1c:       mov    -0xf0(%rbp),%rax
    0.00 :	  403d23:       xor    %rax,-0x50(%rbp)
         :	            BCo = ROL(Ema, 41);
    0.06 :	  403d27:       mov    -0x50(%rbp),%rax
    0.40 :	  403d2b:       ror    $0x17,%rax
    0.04 :	  403d2f:       mov    %rax,-0x100(%rbp)
         :	            Ese ^= De;
    0.22 :	  403d36:       mov    -0xe8(%rbp),%rax
    0.00 :	  403d3d:       xor    %rax,-0x20(%rbp)
         :	            BCu = ROL(Ese, 2);
    0.14 :	  403d41:       mov    -0x20(%rbp),%rax
    0.12 :	  403d45:       rol    $0x2,%rax
    0.04 :	  403d49:       mov    %rax,-0xf8(%rbp)
         :	            Asa =   BCa ^((~BCe)&  BCi );
    0.59 :	  403d50:       mov    -0x110(%rbp),%rax
    0.00 :	  403d57:       not    %rax
    0.04 :	  403d5a:       and    -0x108(%rbp),%rax
    0.06 :	  403d61:       xor    -0x118(%rbp),%rax
    0.32 :	  403d68:       mov    %rax,-0x140(%rbp)
         :	            Ase =   BCe ^((~BCi)&  BCo );
    0.14 :	  403d6f:       mov    -0x108(%rbp),%rax
    0.02 :	  403d76:       not    %rax
    0.00 :	  403d79:       and    -0x100(%rbp),%rax
    0.14 :	  403d80:       xor    -0x110(%rbp),%rax
    0.10 :	  403d87:       mov    %rax,-0x138(%rbp)
         :	            Asi =   BCi ^((~BCo)&  BCu );
    0.65 :	  403d8e:       mov    -0x100(%rbp),%rax
    0.02 :	  403d95:       not    %rax
    0.00 :	  403d98:       and    -0xf8(%rbp),%rax
    0.00 :	  403d9f:       xor    -0x108(%rbp),%rax
    0.24 :	  403da6:       mov    %rax,-0x130(%rbp)
         :	            Aso =   BCo ^((~BCu)&  BCa );
    0.20 :	  403dad:       mov    -0xf8(%rbp),%rax
    0.00 :	  403db4:       not    %rax
    0.00 :	  403db7:       and    -0x118(%rbp),%rax
    0.04 :	  403dbe:       xor    -0x100(%rbp),%rax
    0.12 :	  403dc5:       mov    %rax,-0x128(%rbp)
         :	            Asu =   BCu ^((~BCa)&  BCe );
    0.42 :	  403dcc:       mov    -0x118(%rbp),%rax
    0.00 :	  403dd3:       not    %rax
    0.02 :	  403dd6:       and    -0x110(%rbp),%rax
    0.00 :	  403ddd:       xor    -0xf8(%rbp),%rax
    0.40 :	  403de4:       mov    %rax,-0x120(%rbp)
         :	        Ase = state[21];
         :	        Asi = state[22];
         :	        Aso = state[23];
         :	        Asu = state[24];
         :
         :	        for( round = 0; round < NROUNDS; round += 2 )
    0.04 :	  403deb:       addl   $0x2,-0x1e4(%rbp)
    0.10 :	  403df2:       cmpl   $0x17,-0x1e4(%rbp)
    0.52 :	  403df9:       jle    402fa2 <KeccakF1600_StatePermute+0x1fd>
         :	            Aso =   BCo ^((~BCu)&  BCa );
         :	            Asu =   BCu ^((~BCa)&  BCe );
         :	        }
         :
         :	        //copyToState(state, A)
         :	        state[ 0] = Aba;
    0.32 :	  403dff:       mov    -0x1f8(%rbp),%rax
    0.12 :	  403e06:       mov    -0x1e0(%rbp),%rdx
    0.00 :	  403e0d:       mov    %rdx,(%rax)
         :	        state[ 1] = Abe;
    0.02 :	  403e10:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403e17:       lea    0x8(%rax),%rdx
    0.00 :	  403e1b:       mov    -0x1d8(%rbp),%rax
    0.00 :	  403e22:       mov    %rax,(%rdx)
         :	        state[ 2] = Abi;
    0.02 :	  403e25:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403e2c:       lea    0x10(%rax),%rdx
    0.00 :	  403e30:       mov    -0x1d0(%rbp),%rax
    0.00 :	  403e37:       mov    %rax,(%rdx)
         :	        state[ 3] = Abo;
    0.00 :	  403e3a:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403e41:       lea    0x18(%rax),%rdx
    0.00 :	  403e45:       mov    -0x1c8(%rbp),%rax
    0.00 :	  403e4c:       mov    %rax,(%rdx)
         :	        state[ 4] = Abu;
    0.00 :	  403e4f:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403e56:       lea    0x20(%rax),%rdx
    0.00 :	  403e5a:       mov    -0x1c0(%rbp),%rax
    0.00 :	  403e61:       mov    %rax,(%rdx)
         :	        state[ 5] = Aga;
    0.00 :	  403e64:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403e6b:       lea    0x28(%rax),%rdx
    0.00 :	  403e6f:       mov    -0x1b8(%rbp),%rax
    0.00 :	  403e76:       mov    %rax,(%rdx)
         :	        state[ 6] = Age;
    0.00 :	  403e79:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403e80:       lea    0x30(%rax),%rdx
    0.00 :	  403e84:       mov    -0x1b0(%rbp),%rax
    0.00 :	  403e8b:       mov    %rax,(%rdx)
         :	        state[ 7] = Agi;
    0.02 :	  403e8e:       mov    -0x1f8(%rbp),%rax
    0.02 :	  403e95:       lea    0x38(%rax),%rdx
    0.00 :	  403e99:       mov    -0x1a8(%rbp),%rax
    0.00 :	  403ea0:       mov    %rax,(%rdx)
         :	        state[ 8] = Ago;
    0.02 :	  403ea3:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403eaa:       lea    0x40(%rax),%rdx
    0.00 :	  403eae:       mov    -0x1a0(%rbp),%rax
    0.00 :	  403eb5:       mov    %rax,(%rdx)
         :	        state[ 9] = Agu;
    0.00 :	  403eb8:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403ebf:       lea    0x48(%rax),%rdx
    0.00 :	  403ec3:       mov    -0x198(%rbp),%rax
    0.00 :	  403eca:       mov    %rax,(%rdx)
         :	        state[10] = Aka;
    0.00 :	  403ecd:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403ed4:       lea    0x50(%rax),%rdx
    0.00 :	  403ed8:       mov    -0x190(%rbp),%rax
    0.00 :	  403edf:       mov    %rax,(%rdx)
         :	        state[11] = Ake;
    0.06 :	  403ee2:       mov    -0x1f8(%rbp),%rax
    0.10 :	  403ee9:       lea    0x58(%rax),%rdx
    0.04 :	  403eed:       mov    -0x188(%rbp),%rax
    0.00 :	  403ef4:       mov    %rax,(%rdx)
         :	        state[12] = Aki;
    0.12 :	  403ef7:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403efe:       lea    0x60(%rax),%rdx
    0.00 :	  403f02:       mov    -0x180(%rbp),%rax
    0.06 :	  403f09:       mov    %rax,(%rdx)
         :	        state[13] = Ako;
    0.08 :	  403f0c:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403f13:       lea    0x68(%rax),%rdx
    0.00 :	  403f17:       mov    -0x178(%rbp),%rax
    0.00 :	  403f1e:       mov    %rax,(%rdx)
         :	        state[14] = Aku;
    0.02 :	  403f21:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403f28:       lea    0x70(%rax),%rdx
    0.00 :	  403f2c:       mov    -0x170(%rbp),%rax
    0.00 :	  403f33:       mov    %rax,(%rdx)
         :	        state[15] = Ama;
    0.04 :	  403f36:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403f3d:       lea    0x78(%rax),%rdx
    0.00 :	  403f41:       mov    -0x168(%rbp),%rax
    0.00 :	  403f48:       mov    %rax,(%rdx)
         :	        state[16] = Ame;
    0.02 :	  403f4b:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403f52:       lea    0x80(%rax),%rdx
    0.00 :	  403f59:       mov    -0x160(%rbp),%rax
    0.00 :	  403f60:       mov    %rax,(%rdx)
         :	        state[17] = Ami;
    0.04 :	  403f63:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403f6a:       lea    0x88(%rax),%rdx
    0.00 :	  403f71:       mov    -0x158(%rbp),%rax
    0.00 :	  403f78:       mov    %rax,(%rdx)
         :	        state[18] = Amo;
    0.02 :	  403f7b:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403f82:       lea    0x90(%rax),%rdx
    0.02 :	  403f89:       mov    -0x150(%rbp),%rax
    0.00 :	  403f90:       mov    %rax,(%rdx)
         :	        state[19] = Amu;
    0.02 :	  403f93:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403f9a:       lea    0x98(%rax),%rdx
    0.00 :	  403fa1:       mov    -0x148(%rbp),%rax
    0.00 :	  403fa8:       mov    %rax,(%rdx)
         :	        state[20] = Asa;
    0.00 :	  403fab:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403fb2:       lea    0xa0(%rax),%rdx
    0.00 :	  403fb9:       mov    -0x140(%rbp),%rax
    0.00 :	  403fc0:       mov    %rax,(%rdx)
         :	        state[21] = Ase;
    0.02 :	  403fc3:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403fca:       lea    0xa8(%rax),%rdx
    0.00 :	  403fd1:       mov    -0x138(%rbp),%rax
    0.00 :	  403fd8:       mov    %rax,(%rdx)
         :	        state[22] = Asi;
    0.02 :	  403fdb:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403fe2:       lea    0xb0(%rax),%rdx
    0.00 :	  403fe9:       mov    -0x130(%rbp),%rax
    0.00 :	  403ff0:       mov    %rax,(%rdx)
         :	        state[23] = Aso;
    0.04 :	  403ff3:       mov    -0x1f8(%rbp),%rax
    0.00 :	  403ffa:       lea    0xb8(%rax),%rdx
    0.00 :	  404001:       mov    -0x128(%rbp),%rax
    0.00 :	  404008:       mov    %rax,(%rdx)
         :	        state[24] = Asu;
    0.06 :	  40400b:       mov    -0x1f8(%rbp),%rax
    0.00 :	  404012:       lea    0xc0(%rax),%rdx
    0.04 :	  404019:       mov    -0x120(%rbp),%rax
    0.00 :	  404020:       mov    %rax,(%rdx)
         :
         :	        #undef    round
         :	}
    0.14 :	  404023:       nop
    0.00 :	  404024:       leaveq 
    0.06 :	  404025:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402cea <barrett_reduce>:
         :	barrett_reduce():
         :	  return a >> 18;
         :	}
         :
         :
         :	uint16_t barrett_reduce(uint16_t a)
         :	{
    6.70 :	  402cea:       push   %rbp
    1.58 :	  402ceb:       mov    %rsp,%rbp
    6.81 :	  402cee:       mov    %edi,%eax
    0.63 :	  402cf0:       mov    %ax,-0x14(%rbp)
         :	  uint32_t u;
         :
         :	  u = ((uint32_t) a * 5) >> 16;
    2.75 :	  402cf4:       movzwl -0x14(%rbp),%edx
    1.85 :	  402cf8:       mov    %edx,%eax
    4.58 :	  402cfa:       shl    $0x2,%eax
    1.24 :	  402cfd:       add    %edx,%eax
    3.53 :	  402cff:       shr    $0x10,%eax
    1.49 :	  402d02:       mov    %eax,-0x4(%rbp)
         :	  u *= PARAM_Q;
    7.27 :	  402d05:       mov    -0x4(%rbp),%eax
    2.50 :	  402d08:       imul   $0x3001,%eax,%eax
    8.53 :	  402d0e:       mov    %eax,-0x4(%rbp)
         :	  a -= u;
    6.89 :	  402d11:       mov    -0x4(%rbp),%eax
    9.52 :	  402d14:       sub    %ax,-0x14(%rbp)
         :	  return a;
   17.23 :	  402d18:       movzwl -0x14(%rbp),%eax
         :	}
   13.98 :	  402d1c:       pop    %rbp
    2.90 :	  402d1d:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004009fb <store_littleendian>:
         :	store_littleendian():
         :	  | (((uint32) (x[2])) << 16) \
         :	  | (((uint32) (x[3])) << 24);
         :	}
         :
         :	static void store_littleendian(unsigned char *x,uint32 u)
         :	{
    0.56 :	  4009fb:       push   %rbp
    0.33 :	  4009fc:       mov    %rsp,%rbp
    5.84 :	  4009ff:       mov    %rdi,-0x8(%rbp)
    0.98 :	  400a03:       mov    %esi,-0xc(%rbp)
         :	  x[0] = u; u >>= 8;
    0.20 :	  400a06:       mov    -0xc(%rbp),%eax
    6.56 :	  400a09:       mov    %eax,%edx
    0.20 :	  400a0b:       mov    -0x8(%rbp),%rax
    0.20 :	  400a0f:       mov    %dl,(%rax)
    4.72 :	  400a11:       shrl   $0x8,-0xc(%rbp)
         :	  x[1] = u; u >>= 8;
   10.66 :	  400a15:       mov    -0x8(%rbp),%rax
    0.69 :	  400a19:       add    $0x1,%rax
    4.16 :	  400a1d:       mov    -0xc(%rbp),%edx
    4.03 :	  400a20:       mov    %dl,(%rax)
    6.79 :	  400a22:       shrl   $0x8,-0xc(%rbp)
         :	  x[2] = u; u >>= 8;
    6.43 :	  400a26:       mov    -0x8(%rbp),%rax
    0.69 :	  400a2a:       add    $0x2,%rax
    0.10 :	  400a2e:       mov    -0xc(%rbp),%edx
    9.57 :	  400a31:       mov    %dl,(%rax)
    7.84 :	  400a33:       shrl   $0x8,-0xc(%rbp)
         :	  x[3] = u;
    6.75 :	  400a37:       mov    -0x8(%rbp),%rax
    0.43 :	  400a3b:       add    $0x3,%rax
    0.10 :	  400a3f:       mov    -0xc(%rbp),%edx
    9.64 :	  400a42:       mov    %dl,(%rax)
         :	}
   12.20 :	  400a44:       nop
    0.23 :	  400a45:       pop    %rbp
    0.13 :	  400a46:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004009ae <load_littleendian>:
         :	load_littleendian():
         :	#define ROUNDS 20
         :
         :	typedef uint32_t uint32;
         :
         :	static uint32 load_littleendian(const unsigned char *x)
         :	{
    9.95 :	  4009ae:       push   %rbp
    2.25 :	  4009af:       mov    %rsp,%rbp
    9.54 :	  4009b2:       mov    %rdi,-0x8(%rbp)
         :	  return
         :	      (uint32) (x[0]) \
    2.73 :	  4009b6:       mov    -0x8(%rbp),%rax
    2.78 :	  4009ba:       movzbl (%rax),%eax
    4.38 :	  4009bd:       movzbl %al,%eax
         :	  | (((uint32) (x[1])) << 8) \
    6.99 :	  4009c0:       mov    -0x8(%rbp),%rdx
    3.14 :	  4009c4:       add    $0x1,%rdx
    2.19 :	  4009c8:       movzbl (%rdx),%edx
    2.43 :	  4009cb:       movzbl %dl,%edx
    7.41 :	  4009ce:       shl    $0x8,%edx
    2.90 :	  4009d1:       or     %eax,%edx
         :	  | (((uint32) (x[2])) << 16) \
    2.73 :	  4009d3:       mov    -0x8(%rbp),%rax
    2.31 :	  4009d7:       add    $0x2,%rax
    5.33 :	  4009db:       movzbl (%rax),%eax
    2.90 :	  4009de:       movzbl %al,%eax
    3.55 :	  4009e1:       shl    $0x10,%eax
    1.42 :	  4009e4:       or     %eax,%edx
         :	  | (((uint32) (x[3])) << 24);
    5.69 :	  4009e6:       mov    -0x8(%rbp),%rax
    2.31 :	  4009ea:       add    $0x3,%rax
    2.07 :	  4009ee:       movzbl (%rax),%eax
    1.72 :	  4009f1:       movzbl %al,%eax
    6.81 :	  4009f4:       shl    $0x18,%eax
         :	typedef uint32_t uint32;
         :
         :	static uint32 load_littleendian(const unsigned char *x)
         :	{
         :	  return
         :	      (uint32) (x[0]) \
    2.13 :	  4009f7:       or     %edx,%eax
         :	  | (((uint32) (x[1])) << 8) \
         :	  | (((uint32) (x[2])) << 16) \
         :	  | (((uint32) (x[3])) << 24);
         :	}
    3.14 :	  4009f9:       pop    %rbp
    1.18 :	  4009fa:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401fa4 <g>:
         :	g():
         :
         :	  return abs(x-((*v0)*2*PARAM_Q));
         :	}
         :
         :	static int32_t g(int32_t x)
         :	{
    3.44 :	  401fa4:       push   %rbp
    0.24 :	  401fa5:       mov    %rsp,%rbp
    0.12 :	  401fa8:       sub    $0x18,%rsp
    2.96 :	  401fac:       mov    %edi,-0x14(%rbp)
         :	  int32_t t,c,b;
         :
         :	  // Next 6 lines compute t = x/(4*PARAM_Q);
         :	  b = x*2730;
    0.24 :	  401faf:       mov    -0x14(%rbp),%eax
    0.42 :	  401fb2:       imul   $0xaaa,%eax,%eax
    0.54 :	  401fb8:       mov    %eax,-0xc(%rbp)
         :	  t = b >> 27;
    4.17 :	  401fbb:       mov    -0xc(%rbp),%eax
    0.36 :	  401fbe:       sar    $0x1b,%eax
    0.36 :	  401fc1:       mov    %eax,-0x8(%rbp)
         :	  b = x - t*49156;
    0.42 :	  401fc4:       mov    -0x8(%rbp),%eax
    3.87 :	  401fc7:       imul   $0xffff3ffc,%eax,%edx
    1.09 :	  401fcd:       mov    -0x14(%rbp),%eax
    0.79 :	  401fd0:       add    %edx,%eax
    0.18 :	  401fd2:       mov    %eax,-0xc(%rbp)
         :	  b = 49155 - b;
    3.02 :	  401fd5:       mov    $0xc003,%eax
    0.24 :	  401fda:       sub    -0xc(%rbp),%eax
    1.27 :	  401fdd:       mov    %eax,-0xc(%rbp)
         :	  b >>= 31;
    1.45 :	  401fe0:       sarl   $0x1f,-0xc(%rbp)
         :	  t -= b;
    6.22 :	  401fe4:       mov    -0xc(%rbp),%eax
    3.08 :	  401fe7:       sub    %eax,-0x8(%rbp)
         :
         :	  c = t & 1;
    5.92 :	  401fea:       mov    -0x8(%rbp),%eax
    1.99 :	  401fed:       and    $0x1,%eax
    2.24 :	  401ff0:       mov    %eax,-0x4(%rbp)
         :	  t = (t >> 1) + c; // t = round(x/(8*PARAM_Q))
    5.02 :	  401ff3:       mov    -0x8(%rbp),%eax
    0.30 :	  401ff6:       sar    %eax
    0.12 :	  401ff8:       mov    %eax,%edx
    0.00 :	  401ffa:       mov    -0x4(%rbp),%eax
    5.86 :	  401ffd:       add    %edx,%eax
    1.93 :	  401fff:       mov    %eax,-0x8(%rbp)
         :
         :	  t *= 8*PARAM_Q;
    4.77 :	  402002:       mov    -0x8(%rbp),%eax
    5.86 :	  402005:       imul   $0x18008,%eax,%eax
    9.55 :	  40200b:       mov    %eax,-0x8(%rbp)
         :
         :	  return abs(t - x);
    7.13 :	  40200e:       mov    -0x8(%rbp),%eax
    7.19 :	  402011:       sub    -0x14(%rbp),%eax
    4.17 :	  402014:       mov    %eax,%edi
    0.60 :	  402016:       callq  401edf <abs>
         :	}
    0.00 :	  40201b:       leaveq 
    2.84 :	  40201c:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401c27 <mul_coefficients>:
         :	mul_coefficients():
         :	        }
         :	    }
         :	}
         :	 
         :	void mul_coefficients(uint16_t* poly, const uint16_t* factors)
         :	{
    0.00 :	  401c27:       push   %rbp
    0.00 :	  401c28:       mov    %rsp,%rbp
    0.00 :	  401c2b:       push   %rbx
    0.00 :	  401c2c:       sub    $0x28,%rsp
    0.00 :	  401c30:       mov    %rdi,-0x28(%rbp)
    0.00 :	  401c34:       mov    %rsi,-0x30(%rbp)
         :	    unsigned int i;
         :
         :	    for(i = 0; i < PARAM_N; i++)
    0.00 :	  401c38:       movl   $0x0,-0x14(%rbp)
    0.00 :	  401c3f:       jmp    401c89 <mul_coefficients+0x62>
         :	      poly[i] = montgomery_reduce((poly[i] * factors[i]));
   11.85 :	  401c41:       mov    -0x14(%rbp),%eax
    0.16 :	  401c44:       lea    (%rax,%rax,1),%rdx
    0.23 :	  401c48:       mov    -0x28(%rbp),%rax
    0.78 :	  401c4c:       lea    (%rdx,%rax,1),%rbx
   12.16 :	  401c50:       mov    -0x14(%rbp),%eax
    0.08 :	  401c53:       lea    (%rax,%rax,1),%rdx
    0.23 :	  401c57:       mov    -0x28(%rbp),%rax
    2.49 :	  401c5b:       add    %rdx,%rax
   13.17 :	  401c5e:       movzwl (%rax),%eax
    0.86 :	  401c61:       movzwl %ax,%edx
    0.94 :	  401c64:       mov    -0x14(%rbp),%eax
    0.47 :	  401c67:       lea    (%rax,%rax,1),%rcx
   13.48 :	  401c6b:       mov    -0x30(%rbp),%rax
    0.16 :	  401c6f:       add    %rcx,%rax
    0.47 :	  401c72:       movzwl (%rax),%eax
    3.04 :	  401c75:       movzwl %ax,%eax
   11.93 :	  401c78:       imul   %edx,%eax
    0.55 :	  401c7b:       mov    %eax,%edi
    0.70 :	  401c7d:       callq  402ca5 <montgomery_reduce>
    1.17 :	  401c82:       mov    %ax,(%rbx)
         :	 
         :	void mul_coefficients(uint16_t* poly, const uint16_t* factors)
         :	{
         :	    unsigned int i;
         :
         :	    for(i = 0; i < PARAM_N; i++)
   22.99 :	  401c85:       addl   $0x1,-0x14(%rbp)
    0.62 :	  401c89:       cmpl   $0x3ff,-0x14(%rbp)
    1.40 :	  401c90:       jbe    401c41 <mul_coefficients+0x1a>
         :	      poly[i] = montgomery_reduce((poly[i] * factors[i]));
         :	}
    0.08 :	  401c92:       nop
    0.00 :	  401c93:       add    $0x28,%rsp
    0.00 :	  401c97:       pop    %rbx
    0.00 :	  401c98:       pop    %rbp
    0.00 :	  401c99:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402d6e <store64>:
         :	store64():
         :	  }
         :	  return r;
         :	}
         :
         :	static void store64(uint8_t *x, uint64_t u)
         :	{
    1.87 :	  402d6e:       push   %rbp
    0.00 :	  402d6f:       mov    %rsp,%rbp
    1.64 :	  402d72:       mov    %rdi,-0x18(%rbp)
    0.00 :	  402d76:       mov    %rsi,-0x20(%rbp)
         :	  unsigned int i;
         :
         :	  for(i=0; i<8; ++i) {
    0.08 :	  402d7a:       movl   $0x0,-0x4(%rbp)
    0.08 :	  402d81:       jmp    402d9c <store64+0x2e>
         :	    x[i] = u;
   12.40 :	  402d83:       mov    -0x4(%rbp),%edx
    6.47 :	  402d86:       mov    -0x18(%rbp),%rax
    0.16 :	  402d8a:       add    %rdx,%rax
    0.70 :	  402d8d:       mov    -0x20(%rbp),%rdx
   14.27 :	  402d91:       mov    %dl,(%rax)
         :	    u >>= 8;
   40.41 :	  402d93:       shrq   $0x8,-0x20(%rbp)
         :
         :	static void store64(uint8_t *x, uint64_t u)
         :	{
         :	  unsigned int i;
         :
         :	  for(i=0; i<8; ++i) {
   10.69 :	  402d98:       addl   $0x1,-0x4(%rbp)
    6.01 :	  402d9c:       cmpl   $0x7,-0x4(%rbp)
    2.18 :	  402da0:       jbe    402d83 <store64+0x15>
         :	    x[i] = u;
         :	    u >>= 8;
         :	  }
         :	}
    0.94 :	  402da2:       nop
    1.56 :	  402da3:       pop    %rbp
    0.55 :	  402da4:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000040147f <poly_tobytes>:
         :	poly_tobytes():
         :	    r->coeffs[4*i+3] = (a[7*i+5] >> 2) | (((uint16_t)a[7*i+6]) << 6); 
         :	  }
         :	}
         :
         :	void poly_tobytes(unsigned char *r, const poly *p)
         :	{
    0.00 :	  40147f:       push   %rbp
    0.00 :	  401480:       mov    %rsp,%rbp
    0.00 :	  401483:       sub    $0x20,%rsp
    0.00 :	  401487:       mov    %rdi,-0x18(%rbp)
    0.00 :	  40148b:       mov    %rsi,-0x20(%rbp)
         :	  int i;
         :	  uint16_t t0,t1,t2,t3,m;
         :	  int16_t c;
         :	  for(i=0;i<PARAM_N/4;i++)
    0.00 :	  40148f:       movl   $0x0,-0x4(%rbp)
    0.00 :	  401496:       jmpq   4016ed <poly_tobytes+0x26e>
         :	  {
         :	    t0 = barrett_reduce(p->coeffs[4*i+0]); //Make sure that coefficients have only 14 bits
    0.17 :	  40149b:       mov    -0x4(%rbp),%eax
    2.62 :	  40149e:       lea    0x0(,%rax,4),%edx
    0.44 :	  4014a5:       mov    -0x20(%rbp),%rax
    0.00 :	  4014a9:       movslq %edx,%rdx
    0.09 :	  4014ac:       movzwl (%rax,%rdx,2),%eax
    3.66 :	  4014b0:       movzwl %ax,%eax
    0.17 :	  4014b3:       mov    %eax,%edi
    0.00 :	  4014b5:       callq  402cea <barrett_reduce>
    0.26 :	  4014ba:       mov    %ax,-0x10(%rbp)
         :	    t1 = barrett_reduce(p->coeffs[4*i+1]);
    4.45 :	  4014be:       mov    -0x4(%rbp),%eax
    0.00 :	  4014c1:       shl    $0x2,%eax
    0.00 :	  4014c4:       lea    0x1(%rax),%edx
    0.00 :	  4014c7:       mov    -0x20(%rbp),%rax
    1.83 :	  4014cb:       movslq %edx,%rdx
    0.00 :	  4014ce:       movzwl (%rax,%rdx,2),%eax
    0.09 :	  4014d2:       movzwl %ax,%eax
    0.09 :	  4014d5:       mov    %eax,%edi
    1.57 :	  4014d7:       callq  402cea <barrett_reduce>
    0.00 :	  4014dc:       mov    %ax,-0xe(%rbp)
         :	    t2 = barrett_reduce(p->coeffs[4*i+2]);
    1.57 :	  4014e0:       mov    -0x4(%rbp),%eax
    0.09 :	  4014e3:       shl    $0x2,%eax
    0.00 :	  4014e6:       lea    0x2(%rax),%edx
    0.00 :	  4014e9:       mov    -0x20(%rbp),%rax
    0.52 :	  4014ed:       movslq %edx,%rdx
    0.17 :	  4014f0:       movzwl (%rax,%rdx,2),%eax
    0.00 :	  4014f4:       movzwl %ax,%eax
    0.00 :	  4014f7:       mov    %eax,%edi
    1.13 :	  4014f9:       callq  402cea <barrett_reduce>
    0.09 :	  4014fe:       mov    %ax,-0xc(%rbp)
         :	    t3 = barrett_reduce(p->coeffs[4*i+3]);
    2.01 :	  401502:       mov    -0x4(%rbp),%eax
    0.26 :	  401505:       shl    $0x2,%eax
    0.26 :	  401508:       lea    0x3(%rax),%edx
    0.00 :	  40150b:       mov    -0x20(%rbp),%rax
    1.22 :	  40150f:       movslq %edx,%rdx
    0.26 :	  401512:       movzwl (%rax,%rdx,2),%eax
    0.17 :	  401516:       movzwl %ax,%eax
    0.00 :	  401519:       mov    %eax,%edi
    0.61 :	  40151b:       callq  402cea <barrett_reduce>
    0.17 :	  401520:       mov    %ax,-0xa(%rbp)
         :
         :	    m = t0 - PARAM_Q;
    2.27 :	  401524:       movzwl -0x10(%rbp),%eax
    0.35 :	  401528:       sub    $0x3001,%ax
    0.09 :	  40152c:       mov    %ax,-0x8(%rbp)
         :	    c = m;
    0.00 :	  401530:       movzwl -0x8(%rbp),%eax
    1.75 :	  401534:       mov    %ax,-0x6(%rbp)
         :	    c >>= 15;
    0.17 :	  401538:       sarw   $0xf,-0x6(%rbp)
         :	    t0 = m ^ ((t0^m)&c); // <Make sure that coefficients are in [0,q]
    1.40 :	  40153d:       movzwl -0x10(%rbp),%eax
    0.17 :	  401541:       xor    -0x8(%rbp),%ax
    0.00 :	  401545:       and    -0x6(%rbp),%ax
    0.87 :	  401549:       mov    %eax,%edx
    1.05 :	  40154b:       movzwl -0x8(%rbp),%eax
    0.17 :	  40154f:       xor    %edx,%eax
    0.26 :	  401551:       mov    %ax,-0x10(%rbp)
         :
         :	    m = t1 - PARAM_Q;
    0.35 :	  401555:       movzwl -0xe(%rbp),%eax
    1.57 :	  401559:       sub    $0x3001,%ax
    0.00 :	  40155d:       mov    %ax,-0x8(%rbp)
         :	    c = m;
    0.00 :	  401561:       movzwl -0x8(%rbp),%eax
    0.17 :	  401565:       mov    %ax,-0x6(%rbp)
         :	    c >>= 15;
    1.31 :	  401569:       sarw   $0xf,-0x6(%rbp)
         :	    t1 = m ^ ((t1^m)&c); // <Make sure that coefficients are in [0,q]
    0.96 :	  40156e:       movzwl -0xe(%rbp),%eax
    0.52 :	  401572:       xor    -0x8(%rbp),%ax
    0.17 :	  401576:       and    -0x6(%rbp),%ax
    0.61 :	  40157a:       mov    %eax,%edx
    0.09 :	  40157c:       movzwl -0x8(%rbp),%eax
    0.70 :	  401580:       xor    %edx,%eax
    0.26 :	  401582:       mov    %ax,-0xe(%rbp)
         :
         :	    m = t2 - PARAM_Q;
    0.96 :	  401586:       movzwl -0xc(%rbp),%eax
    0.09 :	  40158a:       sub    $0x3001,%ax
    0.70 :	  40158e:       mov    %ax,-0x8(%rbp)
         :	    c = m;
    0.35 :	  401592:       movzwl -0x8(%rbp),%eax
    0.61 :	  401596:       mov    %ax,-0x6(%rbp)
         :	    c >>= 15;
    0.44 :	  40159a:       sarw   $0xf,-0x6(%rbp)
         :	    t2 = m ^ ((t2^m)&c); // <Make sure that coefficients are in [0,q]
    1.66 :	  40159f:       movzwl -0xc(%rbp),%eax
    0.09 :	  4015a3:       xor    -0x8(%rbp),%ax
    0.35 :	  4015a7:       and    -0x6(%rbp),%ax
    1.75 :	  4015ab:       mov    %eax,%edx
    0.00 :	  4015ad:       movzwl -0x8(%rbp),%eax
    0.09 :	  4015b1:       xor    %edx,%eax
    0.96 :	  4015b3:       mov    %ax,-0xc(%rbp)
         :
         :	    m = t3 - PARAM_Q;
    1.66 :	  4015b7:       movzwl -0xa(%rbp),%eax
    0.09 :	  4015bb:       sub    $0x3001,%ax
    0.00 :	  4015bf:       mov    %ax,-0x8(%rbp)
         :	    c = m;
    0.17 :	  4015c3:       movzwl -0x8(%rbp),%eax
    1.13 :	  4015c7:       mov    %ax,-0x6(%rbp)
         :	    c >>= 15;
    0.26 :	  4015cb:       sarw   $0xf,-0x6(%rbp)
         :	    t3 = m ^ ((t3^m)&c); // <Make sure that coefficients are in [0,q]
    2.97 :	  4015d0:       movzwl -0xa(%rbp),%eax
    0.17 :	  4015d4:       xor    -0x8(%rbp),%ax
    0.09 :	  4015d8:       and    -0x6(%rbp),%ax
    2.97 :	  4015dc:       mov    %eax,%edx
    0.17 :	  4015de:       movzwl -0x8(%rbp),%eax
    0.00 :	  4015e2:       xor    %edx,%eax
    1.05 :	  4015e4:       mov    %ax,-0xa(%rbp)
         :
         :	    r[7*i+0] =  t0 & 0xff;
    2.27 :	  4015e8:       mov    -0x4(%rbp),%edx
    0.35 :	  4015eb:       mov    %edx,%eax
    0.09 :	  4015ed:       shl    $0x3,%eax
    0.00 :	  4015f0:       sub    %edx,%eax
    1.22 :	  4015f2:       movslq %eax,%rdx
    0.35 :	  4015f5:       mov    -0x18(%rbp),%rax
    0.00 :	  4015f9:       add    %rdx,%rax
    0.00 :	  4015fc:       movzwl -0x10(%rbp),%edx
    1.40 :	  401600:       mov    %dl,(%rax)
         :	    r[7*i+1] = (t0 >> 8) | (t1 << 6);
    0.35 :	  401602:       mov    -0x4(%rbp),%edx
    0.09 :	  401605:       mov    %edx,%eax
    0.00 :	  401607:       shl    $0x3,%eax
    1.40 :	  40160a:       sub    %edx,%eax
    0.17 :	  40160c:       cltq   
    0.00 :	  40160e:       lea    0x1(%rax),%rdx
    0.09 :	  401612:       mov    -0x18(%rbp),%rax
    1.31 :	  401616:       add    %rdx,%rax
    0.26 :	  401619:       movzwl -0x10(%rbp),%edx
    0.17 :	  40161d:       shr    $0x8,%dx
    0.00 :	  401621:       mov    %edx,%ecx
    2.01 :	  401623:       movzwl -0xe(%rbp),%edx
    0.00 :	  401627:       shl    $0x6,%edx
    0.00 :	  40162a:       or     %ecx,%edx
    0.00 :	  40162c:       mov    %dl,(%rax)
         :	    r[7*i+2] = (t1 >> 2);
    1.48 :	  40162e:       mov    -0x4(%rbp),%edx
    0.26 :	  401631:       mov    %edx,%eax
    0.00 :	  401633:       shl    $0x3,%eax
    0.00 :	  401636:       sub    %edx,%eax
    1.31 :	  401638:       cltq   
    0.35 :	  40163a:       lea    0x2(%rax),%rdx
    0.09 :	  40163e:       mov    -0x18(%rbp),%rax
    0.00 :	  401642:       add    %rdx,%rax
    0.87 :	  401645:       movzwl -0xe(%rbp),%edx
    0.44 :	  401649:       shr    $0x2,%dx
    0.00 :	  40164d:       mov    %dl,(%rax)
         :	    r[7*i+3] = (t1 >> 10) | (t2 << 4);
    0.09 :	  40164f:       mov    -0x4(%rbp),%edx
    1.22 :	  401652:       mov    %edx,%eax
    0.00 :	  401654:       shl    $0x3,%eax
    0.00 :	  401657:       sub    %edx,%eax
    0.09 :	  401659:       cltq   
    1.13 :	  40165b:       lea    0x3(%rax),%rdx
    0.09 :	  40165f:       mov    -0x18(%rbp),%rax
    0.00 :	  401663:       add    %rdx,%rax
    0.17 :	  401666:       movzwl -0xe(%rbp),%edx
    0.87 :	  40166a:       shr    $0xa,%dx
    0.70 :	  40166e:       mov    %edx,%ecx
    0.00 :	  401670:       movzwl -0xc(%rbp),%edx
    0.09 :	  401674:       shl    $0x4,%edx
    1.40 :	  401677:       or     %ecx,%edx
    0.00 :	  401679:       mov    %dl,(%rax)
         :	    r[7*i+4] = (t2 >> 4);
    0.17 :	  40167b:       mov    -0x4(%rbp),%edx
    0.09 :	  40167e:       mov    %edx,%eax
    1.48 :	  401680:       shl    $0x3,%eax
    0.00 :	  401683:       sub    %edx,%eax
    0.09 :	  401685:       cltq   
    0.00 :	  401687:       lea    0x4(%rax),%rdx
    0.09 :	  40168b:       mov    -0x18(%rbp),%rax
    0.17 :	  40168f:       add    %rdx,%rax
    0.00 :	  401692:       movzwl -0xc(%rbp),%edx
    0.00 :	  401696:       shr    $0x4,%dx
    1.57 :	  40169a:       mov    %dl,(%rax)
         :	    r[7*i+5] = (t2 >> 12) | (t3 << 2);
    0.17 :	  40169c:       mov    -0x4(%rbp),%edx
    0.00 :	  40169f:       mov    %edx,%eax
    0.00 :	  4016a1:       shl    $0x3,%eax
    1.40 :	  4016a4:       sub    %edx,%eax
    0.26 :	  4016a6:       cltq   
    0.09 :	  4016a8:       lea    0x5(%rax),%rdx
    0.00 :	  4016ac:       mov    -0x18(%rbp),%rax
    0.26 :	  4016b0:       add    %rdx,%rax
    0.44 :	  4016b3:       movzwl -0xc(%rbp),%edx
    0.00 :	  4016b7:       shr    $0xc,%dx
    0.00 :	  4016bb:       mov    %edx,%ecx
    1.48 :	  4016bd:       movzwl -0xa(%rbp),%edx
    0.09 :	  4016c1:       shl    $0x2,%edx
    0.09 :	  4016c4:       or     %ecx,%edx
    0.00 :	  4016c6:       mov    %dl,(%rax)
         :	    r[7*i+6] = (t3 >> 6);
    2.62 :	  4016c8:       mov    -0x4(%rbp),%edx
    0.44 :	  4016cb:       mov    %edx,%eax
    0.09 :	  4016cd:       shl    $0x3,%eax
    0.00 :	  4016d0:       sub    %edx,%eax
    2.27 :	  4016d2:       cltq   
    0.87 :	  4016d4:       lea    0x6(%rax),%rdx
    0.09 :	  4016d8:       mov    -0x18(%rbp),%rax
    0.00 :	  4016dc:       add    %rdx,%rax
    1.75 :	  4016df:       movzwl -0xa(%rbp),%edx
    0.35 :	  4016e3:       shr    $0x6,%dx
    0.09 :	  4016e7:       mov    %dl,(%rax)
         :	void poly_tobytes(unsigned char *r, const poly *p)
         :	{
         :	  int i;
         :	  uint16_t t0,t1,t2,t3,m;
         :	  int16_t c;
         :	  for(i=0;i<PARAM_N/4;i++)
    0.61 :	  4016e9:       addl   $0x1,-0x4(%rbp)
    2.09 :	  4016ed:       cmpl   $0xff,-0x4(%rbp)
    0.44 :	  4016f4:       jle    40149b <poly_tobytes+0x1c>
         :	    r[7*i+3] = (t1 >> 10) | (t2 << 4);
         :	    r[7*i+4] = (t2 >> 4);
         :	    r[7*i+5] = (t2 >> 12) | (t3 << 2);
         :	    r[7*i+6] = (t3 >> 6);
         :	  }
         :	}
    0.00 :	  4016fa:       nop
    0.00 :	  4016fb:       leaveq 
    0.17 :	  4016fc:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004012ab <poly_frombytes>:
         :	poly_frombytes():
         :	#include "reduce.h"
         :	#include "fips202.h"
         :	#include "crypto_stream_chacha20.h"
         :
         :	void poly_frombytes(poly *r, const unsigned char *a)
         :	{
    0.00 :	  4012ab:       push   %rbp
    0.00 :	  4012ac:       mov    %rsp,%rbp
    0.00 :	  4012af:       mov    %rdi,-0x18(%rbp)
    0.00 :	  4012b3:       mov    %rsi,-0x20(%rbp)
         :	  int i;
         :	  for(i=0;i<PARAM_N/4;i++)
    0.00 :	  4012b7:       movl   $0x0,-0x4(%rbp)
    0.00 :	  4012be:       jmpq   40146f <poly_frombytes+0x1c4>
         :	  {
         :	    r->coeffs[4*i+0] =                               a[7*i+0]        | (((uint16_t)a[7*i+1] & 0x3f) << 8);
    2.59 :	  4012c3:       mov    -0x4(%rbp),%eax
    0.10 :	  4012c6:       lea    0x0(,%rax,4),%esi
    0.00 :	  4012cd:       mov    -0x4(%rbp),%edx
    0.00 :	  4012d0:       mov    %edx,%eax
    1.82 :	  4012d2:       shl    $0x3,%eax
    0.00 :	  4012d5:       sub    %edx,%eax
    0.19 :	  4012d7:       movslq %eax,%rdx
    0.10 :	  4012da:       mov    -0x20(%rbp),%rax
    2.88 :	  4012de:       add    %rdx,%rax
    0.10 :	  4012e1:       movzbl (%rax),%eax
    7.57 :	  4012e4:       movzbl %al,%ecx
    0.10 :	  4012e7:       mov    -0x4(%rbp),%edx
    0.10 :	  4012ea:       mov    %edx,%eax
    0.00 :	  4012ec:       shl    $0x3,%eax
    2.40 :	  4012ef:       sub    %edx,%eax
    0.19 :	  4012f1:       cltq   
    0.00 :	  4012f3:       lea    0x1(%rax),%rdx
    0.00 :	  4012f7:       mov    -0x20(%rbp),%rax
    4.22 :	  4012fb:       add    %rdx,%rax
    0.10 :	  4012fe:       movzbl (%rax),%eax
    1.44 :	  401301:       movzbl %al,%eax
    1.53 :	  401304:       and    $0x3f,%eax
    3.16 :	  401307:       shl    $0x8,%eax
    2.30 :	  40130a:       or     %ecx,%eax
    2.11 :	  40130c:       mov    %eax,%ecx
    0.29 :	  40130e:       mov    -0x18(%rbp),%rax
    0.10 :	  401312:       movslq %esi,%rdx
    0.00 :	  401315:       mov    %cx,(%rax,%rdx,2)
         :	    r->coeffs[4*i+1] = (a[7*i+1] >> 6) | (((uint16_t)a[7*i+2]) << 2) | (((uint16_t)a[7*i+3] & 0x0f) << 10);
    4.22 :	  401319:       mov    -0x4(%rbp),%eax
    0.19 :	  40131c:       shl    $0x2,%eax
    0.00 :	  40131f:       lea    0x1(%rax),%esi
    0.00 :	  401322:       mov    -0x4(%rbp),%edx
    1.73 :	  401325:       mov    %edx,%eax
    0.10 :	  401327:       shl    $0x3,%eax
    0.00 :	  40132a:       sub    %edx,%eax
    0.00 :	  40132c:       cltq   
    1.53 :	  40132e:       lea    0x1(%rax),%rdx
    0.00 :	  401332:       mov    -0x20(%rbp),%rax
    0.10 :	  401336:       add    %rdx,%rax
    0.10 :	  401339:       movzbl (%rax),%eax
    1.73 :	  40133c:       shr    $0x6,%al
    0.00 :	  40133f:       movzbl %al,%ecx
    0.10 :	  401342:       mov    -0x4(%rbp),%edx
    0.00 :	  401345:       mov    %edx,%eax
    1.82 :	  401347:       shl    $0x3,%eax
    0.00 :	  40134a:       sub    %edx,%eax
    0.00 :	  40134c:       cltq   
    0.10 :	  40134e:       lea    0x2(%rax),%rdx
    1.15 :	  401352:       mov    -0x20(%rbp),%rax
    0.38 :	  401356:       add    %rdx,%rax
    0.10 :	  401359:       movzbl (%rax),%eax
    0.00 :	  40135c:       movzbl %al,%eax
    1.34 :	  40135f:       shl    $0x2,%eax
    0.10 :	  401362:       or     %eax,%ecx
    0.00 :	  401364:       mov    -0x4(%rbp),%edx
    0.00 :	  401367:       mov    %edx,%eax
    0.48 :	  401369:       shl    $0x3,%eax
    0.00 :	  40136c:       sub    %edx,%eax
    0.00 :	  40136e:       cltq   
    0.00 :	  401370:       lea    0x3(%rax),%rdx
    1.63 :	  401374:       mov    -0x20(%rbp),%rax
    0.00 :	  401378:       add    %rdx,%rax
    0.00 :	  40137b:       movzbl (%rax),%eax
    0.00 :	  40137e:       movzbl %al,%eax
    1.25 :	  401381:       and    $0xf,%eax
    0.29 :	  401384:       shl    $0xa,%eax
    0.10 :	  401387:       or     %ecx,%eax
    0.10 :	  401389:       mov    %eax,%ecx
    1.92 :	  40138b:       mov    -0x18(%rbp),%rax
    0.10 :	  40138f:       movslq %esi,%rdx
    0.00 :	  401392:       mov    %cx,(%rax,%rdx,2)
         :	    r->coeffs[4*i+2] = (a[7*i+3] >> 4) | (((uint16_t)a[7*i+4]) << 4) | (((uint16_t)a[7*i+5] & 0x03) << 12);
    0.38 :	  401396:       mov    -0x4(%rbp),%eax
    0.96 :	  401399:       shl    $0x2,%eax
    0.00 :	  40139c:       lea    0x2(%rax),%esi
    0.10 :	  40139f:       mov    -0x4(%rbp),%edx
    0.10 :	  4013a2:       mov    %edx,%eax
    0.67 :	  4013a4:       shl    $0x3,%eax
    0.00 :	  4013a7:       sub    %edx,%eax
    0.19 :	  4013a9:       cltq   
    0.00 :	  4013ab:       lea    0x3(%rax),%rdx
    0.86 :	  4013af:       mov    -0x20(%rbp),%rax
    0.00 :	  4013b3:       add    %rdx,%rax
    0.00 :	  4013b6:       movzbl (%rax),%eax
    0.00 :	  4013b9:       shr    $0x4,%al
    0.77 :	  4013bc:       movzbl %al,%ecx
    0.10 :	  4013bf:       mov    -0x4(%rbp),%edx
    0.00 :	  4013c2:       mov    %edx,%eax
    0.10 :	  4013c4:       shl    $0x3,%eax
    0.67 :	  4013c7:       sub    %edx,%eax
    0.00 :	  4013c9:       cltq   
    0.10 :	  4013cb:       lea    0x4(%rax),%rdx
    0.19 :	  4013cf:       mov    -0x20(%rbp),%rax
    2.68 :	  4013d3:       add    %rdx,%rax
    0.00 :	  4013d6:       movzbl (%rax),%eax
    0.00 :	  4013d9:       movzbl %al,%eax
    0.10 :	  4013dc:       shl    $0x4,%eax
    0.19 :	  4013df:       or     %eax,%ecx
    0.10 :	  4013e1:       mov    -0x4(%rbp),%edx
    0.00 :	  4013e4:       mov    %edx,%eax
    0.19 :	  4013e6:       shl    $0x3,%eax
    1.92 :	  4013e9:       sub    %edx,%eax
    0.38 :	  4013eb:       cltq   
    0.19 :	  4013ed:       lea    0x5(%rax),%rdx
    0.00 :	  4013f1:       mov    -0x20(%rbp),%rax
    3.26 :	  4013f5:       add    %rdx,%rax
    0.38 :	  4013f8:       movzbl (%rax),%eax
    0.29 :	  4013fb:       movzbl %al,%eax
    0.10 :	  4013fe:       and    $0x3,%eax
    2.30 :	  401401:       shl    $0xc,%eax
    0.48 :	  401404:       or     %ecx,%eax
    0.19 :	  401406:       mov    %eax,%ecx
    0.00 :	  401408:       mov    -0x18(%rbp),%rax
    2.11 :	  40140c:       movslq %esi,%rdx
    0.19 :	  40140f:       mov    %cx,(%rax,%rdx,2)
         :	    r->coeffs[4*i+3] = (a[7*i+5] >> 2) | (((uint16_t)a[7*i+6]) << 6); 
    0.58 :	  401413:       mov    -0x4(%rbp),%eax
    0.00 :	  401416:       shl    $0x2,%eax
    1.82 :	  401419:       lea    0x3(%rax),%esi
    0.00 :	  40141c:       mov    -0x4(%rbp),%edx
    0.19 :	  40141f:       mov    %edx,%eax
    0.00 :	  401421:       shl    $0x3,%eax
    1.63 :	  401424:       sub    %edx,%eax
    0.00 :	  401426:       cltq   
    0.38 :	  401428:       lea    0x5(%rax),%rdx
    0.00 :	  40142c:       mov    -0x20(%rbp),%rax
    1.82 :	  401430:       add    %rdx,%rax
    0.00 :	  401433:       movzbl (%rax),%eax
    0.96 :	  401436:       shr    $0x2,%al
    0.10 :	  401439:       movzbl %al,%ecx
    2.59 :	  40143c:       mov    -0x4(%rbp),%edx
    0.19 :	  40143f:       mov    %edx,%eax
    0.38 :	  401441:       shl    $0x3,%eax
    0.48 :	  401444:       sub    %edx,%eax
    2.30 :	  401446:       cltq   
    0.10 :	  401448:       lea    0x6(%rax),%rdx
    0.48 :	  40144c:       mov    -0x20(%rbp),%rax
    0.19 :	  401450:       add    %rdx,%rax
    1.92 :	  401453:       movzbl (%rax),%eax
    0.19 :	  401456:       movzbl %al,%eax
    1.05 :	  401459:       shl    $0x6,%eax
    1.25 :	  40145c:       or     %ecx,%eax
    2.88 :	  40145e:       mov    %eax,%ecx
    0.19 :	  401460:       mov    -0x18(%rbp),%rax
    0.29 :	  401464:       movslq %esi,%rdx
    0.00 :	  401467:       mov    %cx,(%rax,%rdx,2)
         :	#include "crypto_stream_chacha20.h"
         :
         :	void poly_frombytes(poly *r, const unsigned char *a)
         :	{
         :	  int i;
         :	  for(i=0;i<PARAM_N/4;i++)
    3.07 :	  40146b:       addl   $0x1,-0x4(%rbp)
    0.29 :	  40146f:       cmpl   $0xff,-0x4(%rbp)
    0.38 :	  401476:       jle    4012c3 <poly_frombytes+0x18>
         :	    r->coeffs[4*i+0] =                               a[7*i+0]        | (((uint16_t)a[7*i+1] & 0x3f) << 8);
         :	    r->coeffs[4*i+1] = (a[7*i+1] >> 6) | (((uint16_t)a[7*i+2]) << 2) | (((uint16_t)a[7*i+3] & 0x0f) << 10);
         :	    r->coeffs[4*i+2] = (a[7*i+3] >> 4) | (((uint16_t)a[7*i+4]) << 4) | (((uint16_t)a[7*i+5] & 0x03) << 12);
         :	    r->coeffs[4*i+3] = (a[7*i+5] >> 2) | (((uint16_t)a[7*i+6]) << 6); 
         :	  }
         :	}
    0.10 :	  40147c:       nop
    0.00 :	  40147d:       pop    %rbp
    0.00 :	  40147e:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004016fd <poly_uniform>:
         :	poly_uniform():
         :	    r[7*i+6] = (t3 >> 6);
         :	  }
         :	}
         :
         :	void poly_uniform(poly *a, const unsigned char *seed)
         :	{
    0.00 :	  4016fd:       push   %rbp
    0.10 :	  4016fe:       mov    %rsp,%rbp
    0.00 :	  401701:       push   %rbx
    0.10 :	  401702:       sub    $0x108,%rsp
    0.00 :	  401709:       mov    %rdi,-0x108(%rbp)
    0.10 :	  401710:       mov    %rsi,-0x110(%rbp)
    0.00 :	  401717:       mov    %fs:0x28,%rax
    0.00 :	  401720:       mov    %rax,-0x18(%rbp)
    0.00 :	  401724:       xor    %eax,%eax
    0.10 :	  401726:       mov    %rsp,%rax
    0.00 :	  401729:       mov    %rax,%rbx
         :	  unsigned int pos=0, ctr=0;
    0.00 :	  40172c:       movl   $0x0,-0xfc(%rbp)
    0.00 :	  401736:       movl   $0x0,-0xf8(%rbp)
         :	  uint16_t val;
         :	  uint64_t state[25];
         :	  unsigned int nblocks=14;
    0.00 :	  401740:       movl   $0xe,-0xf4(%rbp)
         :	  uint8_t buf[SHAKE128_RATE*nblocks];
    0.00 :	  40174a:       mov    -0xf4(%rbp),%eax
    0.00 :	  401750:       imul   $0xa8,%eax,%eax
    0.00 :	  401756:       mov    %eax,%edx
    0.00 :	  401758:       sub    $0x1,%rdx
    0.00 :	  40175c:       mov    %rdx,-0xf0(%rbp)
    0.00 :	  401763:       mov    %eax,%edx
    0.00 :	  401765:       mov    %rdx,%r10
    0.00 :	  401768:       mov    $0x0,%r11d
    0.00 :	  40176e:       mov    %eax,%edx
    0.10 :	  401770:       mov    %rdx,%r8
    0.00 :	  401773:       mov    $0x0,%r9d
    0.00 :	  401779:       mov    %eax,%edx
    0.00 :	  40177b:       mov    $0x10,%eax
    0.00 :	  401780:       sub    $0x1,%rax
    0.00 :	  401784:       add    %rdx,%rax
    0.00 :	  401787:       mov    $0x10,%esi
    0.00 :	  40178c:       mov    $0x0,%edx
    0.00 :	  401791:       div    %rsi
    0.10 :	  401794:       imul   $0x10,%rax,%rax
    0.10 :	  401798:       sub    %rax,%rsp
    0.00 :	  40179b:       mov    %rsp,%rax
    0.00 :	  40179e:       add    $0x0,%rax
    0.00 :	  4017a2:       mov    %rax,-0xe8(%rbp)
         :
         :	  shake128_absorb(state, seed, NEWHOPE_SEEDBYTES);
    0.00 :	  4017a9:       mov    -0x110(%rbp),%rcx
    0.00 :	  4017b0:       lea    -0xe0(%rbp),%rax
    0.00 :	  4017b7:       mov    $0x20,%edx
    0.00 :	  4017bc:       mov    %rcx,%rsi
    0.00 :	  4017bf:       mov    %rax,%rdi
    0.00 :	  4017c2:       callq  404355 <shake128_absorb>
         :	  
         :	  shake128_squeezeblocks((unsigned char *) buf, nblocks, state);
    0.00 :	  4017c7:       mov    -0xf4(%rbp),%ecx
    0.10 :	  4017cd:       mov    -0xe8(%rbp),%rax
    0.00 :	  4017d4:       lea    -0xe0(%rbp),%rdx
    0.00 :	  4017db:       mov    %rcx,%rsi
    0.00 :	  4017de:       mov    %rax,%rdi
    0.00 :	  4017e1:       callq  404389 <shake128_squeezeblocks>
         :
         :	  while(ctr < PARAM_N)
    0.10 :	  4017e6:       jmpq   4018a3 <poly_uniform+0x1a6>
         :	  {
         :	    val = (buf[pos] | ((uint16_t) buf[pos+1] << 8));
    7.79 :	  4017eb:       mov    -0xe8(%rbp),%rdx
    0.29 :	  4017f2:       mov    -0xfc(%rbp),%eax
    0.10 :	  4017f8:       movzbl (%rdx,%rax,1),%eax
    1.06 :	  4017fc:       movzbl %al,%edx
    8.75 :	  4017ff:       mov    -0xfc(%rbp),%eax
    0.10 :	  401805:       lea    0x1(%rax),%ecx
    0.00 :	  401808:       mov    -0xe8(%rbp),%rax
    0.38 :	  40180f:       mov    %ecx,%ecx
    8.75 :	  401811:       movzbl (%rax,%rcx,1),%eax
    1.15 :	  401815:       movzbl %al,%eax
    1.25 :	  401818:       shl    $0x8,%eax
    1.54 :	  40181b:       or     %edx,%eax
    7.21 :	  40181d:       mov    %ax,-0xfe(%rbp)
         :	    if(val < 5*PARAM_Q)
    3.94 :	  401824:       cmpw   $0xf004,-0xfe(%rbp)
    8.46 :	  40182d:       ja     401852 <poly_uniform+0x155>
         :	      a->coeffs[ctr++] = val;
    5.38 :	  40182f:       mov    -0xf8(%rbp),%eax
    3.37 :	  401835:       lea    0x1(%rax),%edx
    0.10 :	  401838:       mov    %edx,-0xf8(%rbp)
    0.19 :	  40183e:       mov    -0x108(%rbp),%rdx
    4.33 :	  401845:       mov    %eax,%ecx
    3.56 :	  401847:       movzwl -0xfe(%rbp),%eax
    0.00 :	  40184e:       mov    %ax,(%rdx,%rcx,2)
         :	    pos += 2;
    5.77 :	  401852:       addl   $0x2,-0xfc(%rbp)
         :	    if(pos > SHAKE128_RATE*nblocks-2)
   15.10 :	  401859:       mov    -0xf4(%rbp),%eax
    0.19 :	  40185f:       imul   $0xa8,%eax,%eax
    0.19 :	  401865:       sub    $0x2,%eax
    5.00 :	  401868:       cmp    -0xfc(%rbp),%eax
    0.00 :	  40186e:       jae    4018a3 <poly_uniform+0x1a6>
         :	    {
         :	      nblocks=1;
    0.00 :	  401870:       movl   $0x1,-0xf4(%rbp)
         :	      shake128_squeezeblocks((unsigned char *) buf,nblocks,state);
    0.00 :	  40187a:       mov    -0xf4(%rbp),%ecx
    0.00 :	  401880:       mov    -0xe8(%rbp),%rax
    0.00 :	  401887:       lea    -0xe0(%rbp),%rdx
    0.00 :	  40188e:       mov    %rcx,%rsi
    0.00 :	  401891:       mov    %rax,%rdi
    0.00 :	  401894:       callq  404389 <shake128_squeezeblocks>
         :	      pos = 0;
    0.00 :	  401899:       movl   $0x0,-0xfc(%rbp)
         :
         :	  shake128_absorb(state, seed, NEWHOPE_SEEDBYTES);
         :	  
         :	  shake128_squeezeblocks((unsigned char *) buf, nblocks, state);
         :
         :	  while(ctr < PARAM_N)
    4.81 :	  4018a3:       cmpl   $0x3ff,-0xf8(%rbp)
    0.19 :	  4018ad:       jbe    4017eb <poly_uniform+0xee>
    0.10 :	  4018b3:       mov    %rbx,%rsp
         :	      nblocks=1;
         :	      shake128_squeezeblocks((unsigned char *) buf,nblocks,state);
         :	      pos = 0;
         :	    }
         :	  }
         :	}
    0.00 :	  4018b6:       nop
    0.00 :	  4018b7:       mov    -0x18(%rbp),%rax
    0.10 :	  4018bb:       xor    %fs:0x28,%rax
    0.00 :	  4018c4:       je     4018cb <poly_uniform+0x1ce>
    0.00 :	  4018c6:       callq  446080 <__stack_chk_fail>
    0.00 :	  4018cb:       mov    -0x8(%rbp),%rbx
    0.00 :	  4018cf:       leaveq 
    0.00 :	  4018d0:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401083 <crypto_stream_chacha20>:
         :	crypto_stream_chacha20():
         :	}
         :
         :	static const unsigned char sigma[16] = "expand 32-byte k";
         :
         :	int crypto_stream_chacha20(unsigned char *c,unsigned long long clen, const unsigned char *n, const unsigned char *k)
         :	{
    0.00 :	  401083:       push   %rbp
    0.00 :	  401084:       mov    %rsp,%rbp
    0.00 :	  401087:       sub    $0xb0,%rsp
    0.00 :	  40108e:       mov    %rdi,-0x98(%rbp)
    0.00 :	  401095:       mov    %rsi,-0xa0(%rbp)
    0.00 :	  40109c:       mov    %rdx,-0xa8(%rbp)
    0.00 :	  4010a3:       mov    %rcx,-0xb0(%rbp)
    0.00 :	  4010aa:       mov    %fs:0x28,%rax
    0.00 :	  4010b3:       mov    %rax,-0x8(%rbp)
    0.00 :	  4010b7:       xor    %eax,%eax
         :	  unsigned char block[64];
         :	  unsigned char kcopy[32];
         :	  unsigned long long i;
         :	  unsigned int u;
         :
         :	  if (!clen) return 0;
    0.00 :	  4010b9:       cmpq   $0x0,-0xa0(%rbp)
    0.00 :	  4010c1:       jne    4010cd <crypto_stream_chacha20+0x4a>
    0.00 :	  4010c3:       mov    $0x0,%eax
    0.00 :	  4010c8:       jmpq   401295 <crypto_stream_chacha20+0x212>
         :
         :	  for (i = 0;i < 32;++i) kcopy[i] = k[i];
    0.00 :	  4010cd:       movq   $0x0,-0x88(%rbp)
    0.00 :	  4010d8:       jmp    401106 <crypto_stream_chacha20+0x83>
    1.12 :	  4010da:       mov    -0xb0(%rbp),%rdx
    0.20 :	  4010e1:       mov    -0x88(%rbp),%rax
    0.00 :	  4010e8:       add    %rdx,%rax
    0.00 :	  4010eb:       movzbl (%rax),%eax
    1.53 :	  4010ee:       lea    -0x70(%rbp),%rcx
    0.10 :	  4010f2:       mov    -0x88(%rbp),%rdx
    0.00 :	  4010f9:       add    %rcx,%rdx
    0.00 :	  4010fc:       mov    %al,(%rdx)
    0.81 :	  4010fe:       addq   $0x1,-0x88(%rbp)
    0.00 :	  401106:       cmpq   $0x1f,-0x88(%rbp)
    0.10 :	  40110e:       jbe    4010da <crypto_stream_chacha20+0x57>
         :	  for (i = 0;i < 8;++i) in[i] = n[i];
    0.20 :	  401110:       movq   $0x0,-0x88(%rbp)
    0.31 :	  40111b:       jmp    401149 <crypto_stream_chacha20+0xc6>
    0.00 :	  40111d:       mov    -0xa8(%rbp),%rdx
    0.00 :	  401124:       mov    -0x88(%rbp),%rax
    0.00 :	  40112b:       add    %rdx,%rax
    0.00 :	  40112e:       movzbl (%rax),%eax
    0.41 :	  401131:       lea    -0x80(%rbp),%rcx
    0.00 :	  401135:       mov    -0x88(%rbp),%rdx
    0.00 :	  40113c:       add    %rcx,%rdx
    0.00 :	  40113f:       mov    %al,(%rdx)
    0.10 :	  401141:       addq   $0x1,-0x88(%rbp)
    0.31 :	  401149:       cmpq   $0x7,-0x88(%rbp)
    0.51 :	  401151:       jbe    40111d <crypto_stream_chacha20+0x9a>
         :	  for (i = 8;i < 16;++i) in[i] = 0;
    0.00 :	  401153:       movq   $0x8,-0x88(%rbp)
    0.00 :	  40115e:       jmp    401179 <crypto_stream_chacha20+0xf6>
    0.00 :	  401160:       lea    -0x80(%rbp),%rdx
    0.00 :	  401164:       mov    -0x88(%rbp),%rax
    0.10 :	  40116b:       add    %rdx,%rax
    0.00 :	  40116e:       movb   $0x0,(%rax)
    0.31 :	  401171:       addq   $0x1,-0x88(%rbp)
    0.00 :	  401179:       cmpq   $0xf,-0x88(%rbp)
    0.00 :	  401181:       jbe    401160 <crypto_stream_chacha20+0xdd>
         :
         :	  while (clen >= 64) {
    0.00 :	  401183:       jmpq   401216 <crypto_stream_chacha20+0x193>
         :	    crypto_core_chacha20(c,in,kcopy,sigma);
    0.10 :	  401188:       lea    -0x70(%rbp),%rdx
    0.00 :	  40118c:       lea    -0x80(%rbp),%rsi
    0.61 :	  401190:       mov    -0x98(%rbp),%rax
    0.41 :	  401197:       mov    $0x4a4430,%ecx
    0.00 :	  40119c:       mov    %rax,%rdi
    0.00 :	  40119f:       callq  400a47 <crypto_core_chacha20>
         :
         :	    u = 1;
    0.61 :	  4011a4:       movl   $0x1,-0x8c(%rbp)
         :	    for (i = 8;i < 16;++i) {
    0.10 :	  4011ae:       movq   $0x8,-0x88(%rbp)
    0.00 :	  4011b9:       jmp    4011fc <crypto_stream_chacha20+0x179>
         :	      u += (unsigned int) in[i];
    5.60 :	  4011bb:       lea    -0x80(%rbp),%rdx
    1.63 :	  4011bf:       mov    -0x88(%rbp),%rax
    0.81 :	  4011c6:       add    %rdx,%rax
    0.10 :	  4011c9:       movzbl (%rax),%eax
   10.99 :	  4011cc:       movzbl %al,%eax
    2.75 :	  4011cf:       add    %eax,-0x8c(%rbp)
         :	      in[i] = u;
   14.04 :	  4011d5:       mov    -0x8c(%rbp),%eax
   15.67 :	  4011db:       mov    %eax,%ecx
    0.00 :	  4011dd:       lea    -0x80(%rbp),%rdx
    0.00 :	  4011e1:       mov    -0x88(%rbp),%rax
    0.00 :	  4011e8:       add    %rdx,%rax
    9.56 :	  4011eb:       mov    %cl,(%rax)
         :	      u >>= 8;
    8.75 :	  4011ed:       shrl   $0x8,-0x8c(%rbp)
         :
         :	  while (clen >= 64) {
         :	    crypto_core_chacha20(c,in,kcopy,sigma);
         :
         :	    u = 1;
         :	    for (i = 8;i < 16;++i) {
   15.77 :	  4011f4:       addq   $0x1,-0x88(%rbp)
    3.36 :	  4011fc:       cmpq   $0xf,-0x88(%rbp)
    0.81 :	  401204:       jbe    4011bb <crypto_stream_chacha20+0x138>
         :	      u += (unsigned int) in[i];
         :	      in[i] = u;
         :	      u >>= 8;
         :	    }
         :
         :	    clen -= 64;
    0.71 :	  401206:       subq   $0x40,-0xa0(%rbp)
         :	    c += 64;
    0.51 :	  40120e:       addq   $0x40,-0x98(%rbp)
         :
         :	  for (i = 0;i < 32;++i) kcopy[i] = k[i];
         :	  for (i = 0;i < 8;++i) in[i] = n[i];
         :	  for (i = 8;i < 16;++i) in[i] = 0;
         :
         :	  while (clen >= 64) {
    0.71 :	  401216:       cmpq   $0x3f,-0xa0(%rbp)
    0.10 :	  40121e:       ja     401188 <crypto_stream_chacha20+0x105>
         :
         :	    clen -= 64;
         :	    c += 64;
         :	  }
         :
         :	  if (clen) {
    0.00 :	  401224:       cmpq   $0x0,-0xa0(%rbp)
    0.00 :	  40122c:       je     401290 <crypto_stream_chacha20+0x20d>
         :	    crypto_core_chacha20(block,in,kcopy,sigma);
    0.00 :	  40122e:       lea    -0x70(%rbp),%rdx
    0.00 :	  401232:       lea    -0x80(%rbp),%rsi
    0.00 :	  401236:       lea    -0x50(%rbp),%rax
    0.00 :	  40123a:       mov    $0x4a4430,%ecx
    0.00 :	  40123f:       mov    %rax,%rdi
    0.00 :	  401242:       callq  400a47 <crypto_core_chacha20>
         :	    for (i = 0;i < clen;++i) c[i] = block[i];
    0.00 :	  401247:       movq   $0x0,-0x88(%rbp)
    0.00 :	  401252:       jmp    401280 <crypto_stream_chacha20+0x1fd>
    0.00 :	  401254:       mov    -0x98(%rbp),%rdx
    0.00 :	  40125b:       mov    -0x88(%rbp),%rax
    0.00 :	  401262:       add    %rax,%rdx
    0.00 :	  401265:       lea    -0x50(%rbp),%rcx
    0.00 :	  401269:       mov    -0x88(%rbp),%rax
    0.00 :	  401270:       add    %rcx,%rax
    0.00 :	  401273:       movzbl (%rax),%eax
    0.00 :	  401276:       mov    %al,(%rdx)
    0.00 :	  401278:       addq   $0x1,-0x88(%rbp)
    0.00 :	  401280:       mov    -0x88(%rbp),%rax
    0.00 :	  401287:       cmp    -0xa0(%rbp),%rax
    0.00 :	  40128e:       jb     401254 <crypto_stream_chacha20+0x1d1>
         :	  }
         :	  return 0;
    0.00 :	  401290:       mov    $0x0,%eax
         :	}
    0.00 :	  401295:       mov    -0x8(%rbp),%rdi
    0.00 :	  401299:       xor    %fs:0x28,%rdi
    0.20 :	  4012a2:       je     4012a9 <crypto_stream_chacha20+0x226>
    0.00 :	  4012a4:       callq  446080 <__stack_chk_fail>
    0.00 :	  4012a9:       leaveq 
    0.00 :	  4012aa:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401ba1 <bitrev_vector>:
         :	bitrev_vector():
         :	  15,527,271,783,143,655,399,911,79,591,335,847,207,719,463,975,47,559,303,815,175,687,431,943,111,623,367,879,239,751,495,1007,
         :	  31,543,287,799,159,671,415,927,95,607,351,863,223,735,479,991,63,575,319,831,191,703,447,959,127,639,383,895,255,767,511,1023
         :	};
         :
         :	void bitrev_vector(uint16_t* poly)
         :	{
    0.00 :	  401ba1:       push   %rbp
    0.00 :	  401ba2:       mov    %rsp,%rbp
    0.00 :	  401ba5:       mov    %rdi,-0x18(%rbp)
         :	    unsigned int i,r;
         :	    uint16_t tmp;
         :
         :	    for(i = 0; i < PARAM_N; i++)
    0.00 :	  401ba9:       movl   $0x0,-0x8(%rbp)
    0.00 :	  401bb0:       jmp    401c1b <bitrev_vector+0x7a>
         :	    {
         :	        r = bitrev_table[i];
    3.49 :	  401bb2:       mov    -0x8(%rbp),%eax
    0.00 :	  401bb5:       movzwl 0x6cd0a0(%rax,%rax,1),%eax
   11.22 :	  401bbd:       movzwl %ax,%eax
    2.61 :	  401bc0:       mov    %eax,-0x4(%rbp)
         :	        if (i < r)
    5.66 :	  401bc3:       mov    -0x8(%rbp),%eax
    0.11 :	  401bc6:       cmp    -0x4(%rbp),%eax
    0.00 :	  401bc9:       jae    401c17 <bitrev_vector+0x76>
         :	        {
         :	          tmp = poly[i];
    5.88 :	  401bcb:       mov    -0x8(%rbp),%eax
    3.38 :	  401bce:       lea    (%rax,%rax,1),%rdx
    1.20 :	  401bd2:       mov    -0x18(%rbp),%rax
    0.22 :	  401bd6:       add    %rdx,%rax
    1.74 :	  401bd9:       movzwl (%rax),%eax
    0.65 :	  401bdc:       mov    %ax,-0xa(%rbp)
         :	          poly[i] = poly[r];
    1.42 :	  401be0:       mov    -0x8(%rbp),%eax
    0.00 :	  401be3:       lea    (%rax,%rax,1),%rdx
    2.72 :	  401be7:       mov    -0x18(%rbp),%rax
    0.11 :	  401beb:       add    %rax,%rdx
    1.42 :	  401bee:       mov    -0x4(%rbp),%eax
    0.11 :	  401bf1:       lea    (%rax,%rax,1),%rcx
    2.40 :	  401bf5:       mov    -0x18(%rbp),%rax
    0.00 :	  401bf9:       add    %rcx,%rax
    1.42 :	  401bfc:       movzwl (%rax),%eax
   19.93 :	  401bff:       mov    %ax,(%rdx)
         :	          poly[r] = tmp;
    6.86 :	  401c02:       mov    -0x4(%rbp),%eax
    0.33 :	  401c05:       lea    (%rax,%rax,1),%rdx
    0.00 :	  401c09:       mov    -0x18(%rbp),%rax
    0.11 :	  401c0d:       add    %rax,%rdx
    4.03 :	  401c10:       movzwl -0xa(%rbp),%eax
    0.00 :	  401c14:       mov    %ax,(%rdx)
         :	void bitrev_vector(uint16_t* poly)
         :	{
         :	    unsigned int i,r;
         :	    uint16_t tmp;
         :
         :	    for(i = 0; i < PARAM_N; i++)
   10.68 :	  401c17:       addl   $0x1,-0x8(%rbp)
   10.24 :	  401c1b:       cmpl   $0x3ff,-0x8(%rbp)
    1.74 :	  401c22:       jbe    401bb2 <bitrev_vector+0x11>
         :	          tmp = poly[i];
         :	          poly[i] = poly[r];
         :	          poly[r] = tmp;
         :	        }
         :	    }
         :	}
    0.33 :	  401c24:       nop
    0.00 :	  401c25:       pop    %rbp
    0.00 :	  401c26:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401a50 <poly_pointwise>:
         :	poly_pointwise():
         :	    r->coeffs[i] = a + PARAM_Q - b;
         :	  }
         :	}
         :
         :	void poly_pointwise(poly *r, const poly *a, const poly *b)
         :	{
    0.00 :	  401a50:       push   %rbp
    0.13 :	  401a51:       mov    %rsp,%rbp
    0.00 :	  401a54:       sub    $0x30,%rsp
    0.00 :	  401a58:       mov    %rdi,-0x18(%rbp)
    0.00 :	  401a5c:       mov    %rsi,-0x20(%rbp)
    0.00 :	  401a60:       mov    %rdx,-0x28(%rbp)
         :	  int i;
         :	  uint16_t t;
         :	  for(i=0;i<PARAM_N;i++)
    0.00 :	  401a64:       movl   $0x0,-0x4(%rbp)
    0.00 :	  401a6b:       jmp    401ac2 <poly_pointwise+0x72>
         :	  {
         :	    t       = montgomery_reduce(3186*b->coeffs[i]); /* t is now in Montgomery domain */
   14.96 :	  401a6d:       mov    -0x28(%rbp),%rax
    0.38 :	  401a71:       mov    -0x4(%rbp),%edx
    0.00 :	  401a74:       movslq %edx,%rdx
    1.15 :	  401a77:       movzwl (%rax,%rdx,2),%eax
   13.81 :	  401a7b:       movzwl %ax,%eax
    0.13 :	  401a7e:       imul   $0xc72,%eax,%eax
    0.26 :	  401a84:       mov    %eax,%edi
    0.90 :	  401a86:       callq  402ca5 <montgomery_reduce>
    0.77 :	  401a8b:       mov    %ax,-0x6(%rbp)
         :	    r->coeffs[i] = montgomery_reduce(a->coeffs[i] * t); /* r->coeffs[i] is back in normal domain */
    3.32 :	  401a8f:       mov    -0x20(%rbp),%rax
    1.02 :	  401a93:       mov    -0x4(%rbp),%edx
    5.37 :	  401a96:       movslq %edx,%rdx
    0.00 :	  401a99:       movzwl (%rax,%rdx,2),%eax
    1.79 :	  401a9d:       movzwl %ax,%edx
    2.05 :	  401aa0:       movzwl -0x6(%rbp),%eax
    8.06 :	  401aa4:       imul   %edx,%eax
    7.93 :	  401aa7:       mov    %eax,%edi
    0.00 :	  401aa9:       callq  402ca5 <montgomery_reduce>
    1.28 :	  401aae:       mov    %eax,%ecx
    0.13 :	  401ab0:       mov    -0x18(%rbp),%rax
   17.77 :	  401ab4:       mov    -0x4(%rbp),%edx
    0.38 :	  401ab7:       movslq %edx,%rdx
    0.77 :	  401aba:       mov    %cx,(%rax,%rdx,2)
         :
         :	void poly_pointwise(poly *r, const poly *a, const poly *b)
         :	{
         :	  int i;
         :	  uint16_t t;
         :	  for(i=0;i<PARAM_N;i++)
   16.24 :	  401abe:       addl   $0x1,-0x4(%rbp)
    0.00 :	  401ac2:       cmpl   $0x3ff,-0x4(%rbp)
    1.41 :	  401ac9:       jle    401a6d <poly_pointwise+0x1d>
         :	  {
         :	    t       = montgomery_reduce(3186*b->coeffs[i]); /* t is now in Montgomery domain */
         :	    r->coeffs[i] = montgomery_reduce(a->coeffs[i] * t); /* r->coeffs[i] is back in normal domain */
         :	  }
         :	}
    0.00 :	  401acb:       nop
    0.00 :	  401acc:       leaveq 
    0.00 :	  401acd:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401edf <abs>:
         :	abs():
         :	#include "error_correction.h"
         :
         :	//See paper for details on the error reconciliation
         :
         :	static int32_t abs(int32_t v)
         :	{
    0.33 :	  401edf:       push   %rbp
    9.82 :	  401ee0:       mov    %rsp,%rbp
    1.66 :	  401ee3:       mov    %edi,-0x14(%rbp)
         :	  int32_t mask = v >> 31;
    9.82 :	  401ee6:       mov    -0x14(%rbp),%eax
   19.97 :	  401ee9:       sar    $0x1f,%eax
    8.82 :	  401eec:       mov    %eax,-0x4(%rbp)
         :	  return (v ^ mask) - mask;
   16.81 :	  401eef:       mov    -0x14(%rbp),%eax
    1.66 :	  401ef2:       xor    -0x4(%rbp),%eax
   19.97 :	  401ef5:       sub    -0x4(%rbp),%eax
         :	}
   10.82 :	  401ef8:       pop    %rbp
    0.33 :	  401ef9:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402357 <rec>:
         :	rec():
         :	  }
         :	}
         :
         :
         :	void rec(unsigned char *key, const poly *v, const poly *c)
         :	{
    0.00 :	  402357:       push   %rbp
    0.00 :	  402358:       mov    %rsp,%rbp
    0.00 :	  40235b:       sub    $0x50,%rsp
    0.00 :	  40235f:       mov    %rdi,-0x38(%rbp)
    0.00 :	  402363:       mov    %rsi,-0x40(%rbp)
    0.00 :	  402367:       mov    %rdx,-0x48(%rbp)
    0.00 :	  40236b:       mov    %fs:0x28,%rax
    0.36 :	  402374:       mov    %rax,-0x8(%rbp)
    0.00 :	  402378:       xor    %eax,%eax
         :	  int i;
         :	  int32_t tmp[4];
         :
         :	  for(i=0;i<32;i++)
    0.00 :	  40237a:       movl   $0x0,-0x24(%rbp)
    0.00 :	  402381:       jmp    402397 <rec+0x40>
         :	    key[i] = 0;
    0.36 :	  402383:       mov    -0x24(%rbp),%eax
    0.18 :	  402386:       movslq %eax,%rdx
    0.00 :	  402389:       mov    -0x38(%rbp),%rax
    0.18 :	  40238d:       add    %rdx,%rax
    0.18 :	  402390:       movb   $0x0,(%rax)
         :	void rec(unsigned char *key, const poly *v, const poly *c)
         :	{
         :	  int i;
         :	  int32_t tmp[4];
         :
         :	  for(i=0;i<32;i++)
    0.36 :	  402393:       addl   $0x1,-0x24(%rbp)
    0.18 :	  402397:       cmpl   $0x1f,-0x24(%rbp)
    0.36 :	  40239b:       jle    402383 <rec+0x2c>
         :	    key[i] = 0;
         :
         :	  for(i=0; i<256; i++)
    0.18 :	  40239d:       movl   $0x0,-0x24(%rbp)
    0.00 :	  4023a4:       jmpq   402556 <rec+0x1ff>
         :	  {
         :	    tmp[0] = 16*PARAM_Q + 8*(int32_t)v->coeffs[  0+i] - PARAM_Q * (2*c->coeffs[  0+i]+c->coeffs[768+i]);
    0.00 :	  4023a9:       mov    -0x40(%rbp),%rax
    1.09 :	  4023ad:       mov    -0x24(%rbp),%edx
    0.00 :	  4023b0:       movslq %edx,%rdx
    0.00 :	  4023b3:       movzwl (%rax,%rdx,2),%eax
    0.00 :	  4023b7:       movzwl %ax,%eax
    1.46 :	  4023ba:       add    $0x6002,%eax
    0.00 :	  4023bf:       lea    0x0(,%rax,8),%ecx
    0.00 :	  4023c6:       mov    -0x48(%rbp),%rax
    0.00 :	  4023ca:       mov    -0x24(%rbp),%edx
    0.73 :	  4023cd:       movslq %edx,%rdx
    0.00 :	  4023d0:       movzwl (%rax,%rdx,2),%eax
    0.00 :	  4023d4:       movzwl %ax,%eax
    0.00 :	  4023d7:       lea    (%rax,%rax,1),%esi
    1.46 :	  4023da:       mov    -0x24(%rbp),%eax
    0.00 :	  4023dd:       lea    0x300(%rax),%edx
    0.00 :	  4023e3:       mov    -0x48(%rbp),%rax
    0.00 :	  4023e7:       movslq %edx,%rdx
    1.46 :	  4023ea:       movzwl (%rax,%rdx,2),%eax
    0.00 :	  4023ee:       movzwl %ax,%eax
    0.00 :	  4023f1:       add    %esi,%eax
    0.00 :	  4023f3:       imul   $0xffffcfff,%eax,%eax
    1.28 :	  4023f9:       add    %ecx,%eax
    0.18 :	  4023fb:       mov    %eax,-0x20(%rbp)
         :	    tmp[1] = 16*PARAM_Q + 8*(int32_t)v->coeffs[256+i] - PARAM_Q * (2*c->coeffs[256+i]+c->coeffs[768+i]);
    0.55 :	  4023fe:       mov    -0x24(%rbp),%eax
    0.36 :	  402401:       lea    0x100(%rax),%edx
    1.64 :	  402407:       mov    -0x40(%rbp),%rax
    0.00 :	  40240b:       movslq %edx,%rdx
    0.18 :	  40240e:       movzwl (%rax,%rdx,2),%eax
    0.55 :	  402412:       movzwl %ax,%eax
    1.28 :	  402415:       add    $0x6002,%eax
    0.00 :	  40241a:       lea    0x0(,%rax,8),%ecx
    0.00 :	  402421:       mov    -0x24(%rbp),%eax
    0.00 :	  402424:       lea    0x100(%rax),%edx
    1.64 :	  40242a:       mov    -0x48(%rbp),%rax
    0.18 :	  40242e:       movslq %edx,%rdx
    0.36 :	  402431:       movzwl (%rax,%rdx,2),%eax
    0.91 :	  402435:       movzwl %ax,%eax
    1.64 :	  402438:       lea    (%rax,%rax,1),%esi
    0.00 :	  40243b:       mov    -0x24(%rbp),%eax
    0.00 :	  40243e:       lea    0x300(%rax),%edx
    0.36 :	  402444:       mov    -0x48(%rbp),%rax
    2.19 :	  402448:       movslq %edx,%rdx
    0.00 :	  40244b:       movzwl (%rax,%rdx,2),%eax
    0.18 :	  40244f:       movzwl %ax,%eax
    0.73 :	  402452:       add    %esi,%eax
    4.74 :	  402454:       imul   $0xffffcfff,%eax,%eax
    0.18 :	  40245a:       add    %ecx,%eax
    0.00 :	  40245c:       mov    %eax,-0x1c(%rbp)
         :	    tmp[2] = 16*PARAM_Q + 8*(int32_t)v->coeffs[512+i] - PARAM_Q * (2*c->coeffs[512+i]+c->coeffs[768+i]);
    0.18 :	  40245f:       mov    -0x24(%rbp),%eax
    4.55 :	  402462:       lea    0x200(%rax),%edx
    0.55 :	  402468:       mov    -0x40(%rbp),%rax
    0.18 :	  40246c:       movslq %edx,%rdx
    0.55 :	  40246f:       movzwl (%rax,%rdx,2),%eax
    5.83 :	  402473:       movzwl %ax,%eax
    0.00 :	  402476:       add    $0x6002,%eax
    0.18 :	  40247b:       lea    0x0(,%rax,8),%ecx
    0.55 :	  402482:       mov    -0x24(%rbp),%eax
    5.46 :	  402485:       lea    0x200(%rax),%edx
    0.18 :	  40248b:       mov    -0x48(%rbp),%rax
    0.55 :	  40248f:       movslq %edx,%rdx
    0.36 :	  402492:       movzwl (%rax,%rdx,2),%eax
    4.37 :	  402496:       movzwl %ax,%eax
    0.36 :	  402499:       lea    (%rax,%rax,1),%esi
    0.00 :	  40249c:       mov    -0x24(%rbp),%eax
    0.00 :	  40249f:       lea    0x300(%rax),%edx
    4.19 :	  4024a5:       mov    -0x48(%rbp),%rax
    0.36 :	  4024a9:       movslq %edx,%rdx
    0.55 :	  4024ac:       movzwl (%rax,%rdx,2),%eax
    0.36 :	  4024b0:       movzwl %ax,%eax
    1.64 :	  4024b3:       add    %esi,%eax
    0.18 :	  4024b5:       imul   $0xffffcfff,%eax,%eax
    0.55 :	  4024bb:       add    %ecx,%eax
    0.55 :	  4024bd:       mov    %eax,-0x18(%rbp)
         :	    tmp[3] = 16*PARAM_Q + 8*(int32_t)v->coeffs[768+i] - PARAM_Q * (              c->coeffs[768+i]);
    1.64 :	  4024c0:       mov    -0x24(%rbp),%eax
    0.18 :	  4024c3:       lea    0x300(%rax),%edx
    0.00 :	  4024c9:       mov    -0x40(%rbp),%rax
    0.36 :	  4024cd:       movslq %edx,%rdx
    2.00 :	  4024d0:       movzwl (%rax,%rdx,2),%eax
    0.55 :	  4024d4:       movzwl %ax,%eax
    0.00 :	  4024d7:       add    $0x6002,%eax
    0.36 :	  4024dc:       lea    0x0(,%rax,8),%ecx
    3.64 :	  4024e3:       mov    -0x24(%rbp),%eax
    0.00 :	  4024e6:       lea    0x300(%rax),%edx
    0.36 :	  4024ec:       mov    -0x48(%rbp),%rax
    0.55 :	  4024f0:       movslq %edx,%rdx
    5.10 :	  4024f3:       movzwl (%rax,%rdx,2),%eax
    0.36 :	  4024f7:       movzwl %ax,%eax
    0.00 :	  4024fa:       imul   $0xffffcfff,%eax,%eax
    0.18 :	  402500:       add    %ecx,%eax
    3.10 :	  402502:       mov    %eax,-0x14(%rbp)
         :
         :	    key[i>>3] |= LDDecode(tmp[0], tmp[1], tmp[2], tmp[3]) << (i & 7);
    0.36 :	  402505:       mov    -0x14(%rbp),%ecx
    0.91 :	  402508:       mov    -0x18(%rbp),%edx
    0.18 :	  40250b:       mov    -0x1c(%rbp),%esi
    3.10 :	  40250e:       mov    -0x20(%rbp),%eax
    0.00 :	  402511:       mov    %eax,%edi
    0.55 :	  402513:       callq  40201d <LDDecode>
    2.91 :	  402518:       movswl %ax,%edx
    0.18 :	  40251b:       mov    -0x24(%rbp),%eax
    0.00 :	  40251e:       and    $0x7,%eax
    0.00 :	  402521:       mov    %edx,%esi
    2.00 :	  402523:       mov    %eax,%ecx
    0.36 :	  402525:       shl    %cl,%esi
    1.82 :	  402527:       mov    -0x24(%rbp),%eax
    0.00 :	  40252a:       sar    $0x3,%eax
    0.00 :	  40252d:       movslq %eax,%rdx
    0.00 :	  402530:       mov    -0x38(%rbp),%rax
    2.37 :	  402534:       add    %rdx,%rax
    0.55 :	  402537:       mov    -0x24(%rbp),%edx
    0.00 :	  40253a:       sar    $0x3,%edx
    0.00 :	  40253d:       movslq %edx,%rcx
    2.00 :	  402540:       mov    -0x38(%rbp),%rdx
    0.18 :	  402544:       add    %rcx,%rdx
    0.00 :	  402547:       movzbl (%rdx),%edx
    0.18 :	  40254a:       mov    %edx,%ecx
    2.19 :	  40254c:       mov    %esi,%edx
    0.00 :	  40254e:       or     %ecx,%edx
    0.18 :	  402550:       mov    %dl,(%rax)
         :	  int32_t tmp[4];
         :
         :	  for(i=0;i<32;i++)
         :	    key[i] = 0;
         :
         :	  for(i=0; i<256; i++)
    0.36 :	  402552:       addl   $0x1,-0x24(%rbp)
    1.09 :	  402556:       cmpl   $0xff,-0x24(%rbp)
    0.18 :	  40255d:       jle    4023a9 <rec+0x52>
         :	    tmp[2] = 16*PARAM_Q + 8*(int32_t)v->coeffs[512+i] - PARAM_Q * (2*c->coeffs[512+i]+c->coeffs[768+i]);
         :	    tmp[3] = 16*PARAM_Q + 8*(int32_t)v->coeffs[768+i] - PARAM_Q * (              c->coeffs[768+i]);
         :
         :	    key[i>>3] |= LDDecode(tmp[0], tmp[1], tmp[2], tmp[3]) << (i & 7);
         :	  }
         :	}
    0.00 :	  402563:       nop
    0.00 :	  402564:       mov    -0x8(%rbp),%rax
    0.00 :	  402568:       xor    %fs:0x28,%rax
    0.00 :	  402571:       je     402578 <rec+0x221>
    0.00 :	  402573:       callq  446080 <__stack_chk_fail>
    0.00 :	  402578:       leaveq 
    0.00 :	  402579:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402703 <decode_b>:
         :	decode_b():
         :	  for(i=0;i<PARAM_N/4;i++)
         :	    r[POLY_BYTES+i] = c->coeffs[4*i] | (c->coeffs[4*i+1] << 2) | (c->coeffs[4*i+2] << 4) | (c->coeffs[4*i+3] << 6);
         :	}
         :
         :	static void decode_b(poly *b, poly *c, const unsigned char *r)
         :	{
    0.00 :	  402703:       push   %rbp
    0.23 :	  402704:       mov    %rsp,%rbp
    0.00 :	  402707:       sub    $0x30,%rsp
    0.00 :	  40270b:       mov    %rdi,-0x18(%rbp)
    0.00 :	  40270f:       mov    %rsi,-0x20(%rbp)
    0.00 :	  402713:       mov    %rdx,-0x28(%rbp)
         :	  int i;
         :	  poly_frombytes(b, r);
    0.00 :	  402717:       mov    -0x28(%rbp),%rdx
    0.00 :	  40271b:       mov    -0x18(%rbp),%rax
    0.00 :	  40271f:       mov    %rdx,%rsi
    0.00 :	  402722:       mov    %rax,%rdi
    0.00 :	  402725:       callq  4012ab <poly_frombytes>
         :	  for(i=0;i<PARAM_N/4;i++)
    0.00 :	  40272a:       movl   $0x0,-0x4(%rbp)
    0.00 :	  402731:       jmpq   402803 <decode_b+0x100>
         :	  {
         :	    c->coeffs[4*i+0] =  r[POLY_BYTES+i]       & 0x03;
    1.17 :	  402736:       mov    -0x4(%rbp),%eax
    0.47 :	  402739:       lea    0x0(,%rax,4),%esi
    3.05 :	  402740:       mov    -0x4(%rbp),%eax
    0.94 :	  402743:       add    $0x700,%eax
    0.00 :	  402748:       movslq %eax,%rdx
    0.23 :	  40274b:       mov    -0x28(%rbp),%rax
    5.63 :	  40274f:       add    %rdx,%rax
    0.23 :	  402752:       movzbl (%rax),%eax
    4.93 :	  402755:       movzbl %al,%eax
    0.70 :	  402758:       and    $0x3,%eax
    5.40 :	  40275b:       mov    %eax,%ecx
    0.23 :	  40275d:       mov    -0x20(%rbp),%rax
    0.00 :	  402761:       movslq %esi,%rdx
    0.00 :	  402764:       mov    %cx,(%rax,%rdx,2)
         :	    c->coeffs[4*i+1] = (r[POLY_BYTES+i] >> 2) & 0x03;
    6.81 :	  402768:       mov    -0x4(%rbp),%eax
    0.00 :	  40276b:       shl    $0x2,%eax
    0.00 :	  40276e:       lea    0x1(%rax),%esi
    0.00 :	  402771:       mov    -0x4(%rbp),%eax
    4.93 :	  402774:       add    $0x700,%eax
    0.23 :	  402779:       movslq %eax,%rdx
    0.00 :	  40277c:       mov    -0x28(%rbp),%rax
    0.00 :	  402780:       add    %rdx,%rax
    6.81 :	  402783:       movzbl (%rax),%eax
    0.94 :	  402786:       shr    $0x2,%al
    0.47 :	  402789:       movzbl %al,%eax
    0.00 :	  40278c:       and    $0x3,%eax
    5.87 :	  40278f:       mov    %eax,%ecx
    0.00 :	  402791:       mov    -0x20(%rbp),%rax
    0.23 :	  402795:       movslq %esi,%rdx
    0.00 :	  402798:       mov    %cx,(%rax,%rdx,2)
         :	    c->coeffs[4*i+2] = (r[POLY_BYTES+i] >> 4) & 0x03;
    5.40 :	  40279c:       mov    -0x4(%rbp),%eax
    0.23 :	  40279f:       shl    $0x2,%eax
    0.23 :	  4027a2:       lea    0x2(%rax),%esi
    0.00 :	  4027a5:       mov    -0x4(%rbp),%eax
    5.87 :	  4027a8:       add    $0x700,%eax
    0.23 :	  4027ad:       movslq %eax,%rdx
    0.23 :	  4027b0:       mov    -0x28(%rbp),%rax
    0.00 :	  4027b4:       add    %rdx,%rax
    5.63 :	  4027b7:       movzbl (%rax),%eax
    0.94 :	  4027ba:       shr    $0x4,%al
    0.23 :	  4027bd:       movzbl %al,%eax
    0.00 :	  4027c0:       and    $0x3,%eax
    3.99 :	  4027c3:       mov    %eax,%ecx
    0.00 :	  4027c5:       mov    -0x20(%rbp),%rax
    0.23 :	  4027c9:       movslq %esi,%rdx
    0.00 :	  4027cc:       mov    %cx,(%rax,%rdx,2)
         :	    c->coeffs[4*i+3] = (r[POLY_BYTES+i] >> 6);
    5.40 :	  4027d0:       mov    -0x4(%rbp),%eax
    0.23 :	  4027d3:       shl    $0x2,%eax
    0.23 :	  4027d6:       lea    0x3(%rax),%esi
    0.00 :	  4027d9:       mov    -0x4(%rbp),%eax
    5.63 :	  4027dc:       add    $0x700,%eax
    0.00 :	  4027e1:       movslq %eax,%rdx
    0.00 :	  4027e4:       mov    -0x28(%rbp),%rax
    0.23 :	  4027e8:       add    %rdx,%rax
    3.29 :	  4027eb:       movzbl (%rax),%eax
    0.47 :	  4027ee:       shr    $0x6,%al
    0.00 :	  4027f1:       movzbl %al,%ecx
    0.00 :	  4027f4:       mov    -0x20(%rbp),%rax
    4.46 :	  4027f8:       movslq %esi,%rdx
    0.23 :	  4027fb:       mov    %cx,(%rax,%rdx,2)
         :
         :	static void decode_b(poly *b, poly *c, const unsigned char *r)
         :	{
         :	  int i;
         :	  poly_frombytes(b, r);
         :	  for(i=0;i<PARAM_N/4;i++)
    0.70 :	  4027ff:       addl   $0x1,-0x4(%rbp)
    4.23 :	  402803:       cmpl   $0xff,-0x4(%rbp)
    1.88 :	  40280a:       jle    402736 <decode_b+0x33>
         :	    c->coeffs[4*i+0] =  r[POLY_BYTES+i]       & 0x03;
         :	    c->coeffs[4*i+1] = (r[POLY_BYTES+i] >> 2) & 0x03;
         :	    c->coeffs[4*i+2] = (r[POLY_BYTES+i] >> 4) & 0x03;
         :	    c->coeffs[4*i+3] = (r[POLY_BYTES+i] >> 6);
         :	  }
         :	}
    0.00 :	  402810:       nop
    0.00 :	  402811:       leaveq 
    0.23 :	  402812:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401ace <poly_add>:
         :	poly_add():
         :	    r->coeffs[i] = montgomery_reduce(a->coeffs[i] * t); /* r->coeffs[i] is back in normal domain */
         :	  }
         :	}
         :
         :	void poly_add(poly *r, const poly *a, const poly *b)
         :	{
    0.00 :	  401ace:       push   %rbp
    0.00 :	  401acf:       mov    %rsp,%rbp
    0.00 :	  401ad2:       sub    $0x30,%rsp
    0.00 :	  401ad6:       mov    %rdi,-0x18(%rbp)
    0.00 :	  401ada:       mov    %rsi,-0x20(%rbp)
    0.00 :	  401ade:       mov    %rdx,-0x28(%rbp)
         :	  int i;
         :	  for(i=0;i<PARAM_N;i++)
    0.00 :	  401ae2:       movl   $0x0,-0x4(%rbp)
    0.00 :	  401ae9:       jmp    401b27 <poly_add+0x59>
         :	    r->coeffs[i] = barrett_reduce(a->coeffs[i] + b->coeffs[i]);
   18.63 :	  401aeb:       mov    -0x20(%rbp),%rax
    0.00 :	  401aef:       mov    -0x4(%rbp),%edx
    0.71 :	  401af2:       movslq %edx,%rdx
    0.00 :	  401af5:       movzwl (%rax,%rdx,2),%ecx
   15.57 :	  401af9:       mov    -0x28(%rbp),%rax
    0.00 :	  401afd:       mov    -0x4(%rbp),%edx
    0.47 :	  401b00:       movslq %edx,%rdx
    0.00 :	  401b03:       movzwl (%rax,%rdx,2),%eax
   19.81 :	  401b07:       add    %ecx,%eax
    0.24 :	  401b09:       movzwl %ax,%eax
    3.77 :	  401b0c:       mov    %eax,%edi
    0.00 :	  401b0e:       callq  402cea <barrett_reduce>
    0.47 :	  401b13:       mov    %eax,%ecx
    0.47 :	  401b15:       mov    -0x18(%rbp),%rax
   16.75 :	  401b19:       mov    -0x4(%rbp),%edx
    3.07 :	  401b1c:       movslq %edx,%rdx
    0.00 :	  401b1f:       mov    %cx,(%rax,%rdx,2)
         :	}
         :
         :	void poly_add(poly *r, const poly *a, const poly *b)
         :	{
         :	  int i;
         :	  for(i=0;i<PARAM_N;i++)
   16.75 :	  401b23:       addl   $0x1,-0x4(%rbp)
    2.36 :	  401b27:       cmpl   $0x3ff,-0x4(%rbp)
    0.47 :	  401b2e:       jle    401aeb <poly_add+0x1d>
         :	    r->coeffs[i] = barrett_reduce(a->coeffs[i] + b->coeffs[i]);
         :	}
    0.00 :	  401b30:       nop
    0.00 :	  401b31:       leaveq 
    0.47 :	  401b32:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004042d3 <keccak_squeezeblocks>:
         :	keccak_squeezeblocks():
         :
         :
         :	static void keccak_squeezeblocks(unsigned char *h, unsigned long long int nblocks,
         :	                                 uint64_t *s, 
         :	                                 unsigned int r)
         :	{
    0.00 :	  4042d3:       push   %rbp
    0.00 :	  4042d4:       mov    %rsp,%rbp
    0.00 :	  4042d7:       sub    $0x30,%rsp
    0.00 :	  4042db:       mov    %rdi,-0x18(%rbp)
    0.30 :	  4042df:       mov    %rsi,-0x20(%rbp)
    0.00 :	  4042e3:       mov    %rdx,-0x28(%rbp)
    0.00 :	  4042e7:       mov    %ecx,-0x2c(%rbp)
         :	  unsigned int i;
         :	  while(nblocks > 0) 
    0.00 :	  4042ea:       jmp    40434b <keccak_squeezeblocks+0x78>
         :	  {
         :	    KeccakF1600_StatePermute(s);
    1.18 :	  4042ec:       mov    -0x28(%rbp),%rax
    0.30 :	  4042f0:       mov    %rax,%rdi
    0.00 :	  4042f3:       callq  402da5 <KeccakF1600_StatePermute>
         :	    for(i=0;i<(r>>3);i++)
    0.00 :	  4042f8:       movl   $0x0,-0x4(%rbp)
    0.59 :	  4042ff:       jmp    404334 <keccak_squeezeblocks+0x61>
         :	    {
         :	      store64(h+8*i, s[i]);
   13.02 :	  404301:       mov    -0x4(%rbp),%eax
    0.89 :	  404304:       lea    0x0(,%rax,8),%rdx
    1.78 :	  40430c:       mov    -0x28(%rbp),%rax
    0.00 :	  404310:       add    %rdx,%rax
    6.51 :	  404313:       mov    (%rax),%rax
   45.56 :	  404316:       mov    -0x4(%rbp),%edx
    0.59 :	  404319:       shl    $0x3,%edx
    0.00 :	  40431c:       mov    %edx,%ecx
    0.00 :	  40431e:       mov    -0x18(%rbp),%rdx
    7.69 :	  404322:       add    %rcx,%rdx
    0.30 :	  404325:       mov    %rax,%rsi
    0.00 :	  404328:       mov    %rdx,%rdi
    0.59 :	  40432b:       callq  402d6e <store64>
         :	{
         :	  unsigned int i;
         :	  while(nblocks > 0) 
         :	  {
         :	    KeccakF1600_StatePermute(s);
         :	    for(i=0;i<(r>>3);i++)
    0.89 :	  404330:       addl   $0x1,-0x4(%rbp)
    8.28 :	  404334:       mov    -0x2c(%rbp),%eax
    0.00 :	  404337:       shr    $0x3,%eax
    0.00 :	  40433a:       cmp    -0x4(%rbp),%eax
    0.00 :	  40433d:       ja     404301 <keccak_squeezeblocks+0x2e>
         :	    {
         :	      store64(h+8*i, s[i]);
         :	    }
         :	    h += r;
    6.51 :	  40433f:       mov    -0x2c(%rbp),%eax
    2.37 :	  404342:       add    %rax,-0x18(%rbp)
         :	    nblocks--;
    0.59 :	  404346:       subq   $0x1,-0x20(%rbp)
         :	static void keccak_squeezeblocks(unsigned char *h, unsigned long long int nblocks,
         :	                                 uint64_t *s, 
         :	                                 unsigned int r)
         :	{
         :	  unsigned int i;
         :	  while(nblocks > 0) 
    0.00 :	  40434b:       cmpq   $0x0,-0x20(%rbp)
    2.07 :	  404350:       jne    4042ec <keccak_squeezeblocks+0x19>
         :	      store64(h+8*i, s[i]);
         :	    }
         :	    h += r;
         :	    nblocks--;
         :	  }
         :	}
    0.00 :	  404352:       nop
    0.00 :	  404353:       leaveq 
    0.00 :	  404354:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000404026 <keccak_absorb>:
         :	keccak_absorb():
         :
         :	static void keccak_absorb(uint64_t *s,
         :	                          unsigned int r,
         :	                          const unsigned char *m, unsigned long long int mlen,
         :	                          unsigned char p)
         :	{
    0.00 :	  404026:       push   %rbp
    0.00 :	  404027:       mov    %rsp,%rbp
    0.00 :	  40402a:       sub    $0x100,%rsp
    0.00 :	  404031:       mov    %rdi,-0xe8(%rbp)
    0.00 :	  404038:       mov    %esi,-0xec(%rbp)
    0.00 :	  40403e:       mov    %rdx,-0xf8(%rbp)
    0.00 :	  404045:       mov    %rcx,-0x100(%rbp)
    0.00 :	  40404c:       mov    %r8d,%eax
    0.00 :	  40404f:       mov    %al,-0xf0(%rbp)
    0.00 :	  404055:       mov    %fs:0x28,%rax
    0.00 :	  40405e:       mov    %rax,-0x8(%rbp)
    0.00 :	  404062:       xor    %eax,%eax
         :	  unsigned long long i;
         :	  unsigned char t[200];
         :
         :	  for (i = 0; i < 25; ++i)
    0.00 :	  404064:       movq   $0x0,-0xd8(%rbp)
    0.00 :	  40406f:       jmp    404099 <keccak_absorb+0x73>
         :	    s[i] = 0;
    0.64 :	  404071:       mov    -0xd8(%rbp),%rax
    0.32 :	  404078:       lea    0x0(,%rax,8),%rdx
    0.32 :	  404080:       mov    -0xe8(%rbp),%rax
    0.96 :	  404087:       add    %rdx,%rax
    1.28 :	  40408a:       movq   $0x0,(%rax)
         :	                          unsigned char p)
         :	{
         :	  unsigned long long i;
         :	  unsigned char t[200];
         :
         :	  for (i = 0; i < 25; ++i)
    6.41 :	  404091:       addq   $0x1,-0xd8(%rbp)
    0.32 :	  404099:       cmpq   $0x18,-0xd8(%rbp)
    0.96 :	  4040a1:       jbe    404071 <keccak_absorb+0x4b>
         :	    s[i] = 0;
         :	  
         :	  while (mlen >= r) 
    0.00 :	  4040a3:       jmpq   404159 <keccak_absorb+0x133>
         :	  {
         :	    for (i = 0; i < r / 8; ++i)
    0.00 :	  4040a8:       movq   $0x0,-0xd8(%rbp)
    0.00 :	  4040b3:       jmp    40411c <keccak_absorb+0xf6>
         :	      s[i] ^= load64(m + 8 * i);
    0.00 :	  4040b5:       mov    -0xd8(%rbp),%rax
    0.00 :	  4040bc:       lea    0x0(,%rax,8),%rdx
    0.00 :	  4040c4:       mov    -0xf8(%rbp),%rax
    0.00 :	  4040cb:       add    %rdx,%rax
    0.00 :	  4040ce:       mov    %rax,%rdi
    0.00 :	  4040d1:       callq  402d1e <load64>
    0.00 :	  4040d6:       mov    %rax,%rsi
    0.00 :	  4040d9:       mov    -0xd8(%rbp),%rax
    0.00 :	  4040e0:       lea    0x0(,%rax,8),%rdx
    0.00 :	  4040e8:       mov    -0xe8(%rbp),%rax
    0.00 :	  4040ef:       add    %rdx,%rax
    0.00 :	  4040f2:       mov    -0xd8(%rbp),%rdx
    0.00 :	  4040f9:       lea    0x0(,%rdx,8),%rcx
    0.00 :	  404101:       mov    -0xe8(%rbp),%rdx
    0.00 :	  404108:       add    %rcx,%rdx
    0.00 :	  40410b:       mov    (%rdx),%rdx
    0.00 :	  40410e:       xor    %rsi,%rdx
    0.00 :	  404111:       mov    %rdx,(%rax)
         :	  for (i = 0; i < 25; ++i)
         :	    s[i] = 0;
         :	  
         :	  while (mlen >= r) 
         :	  {
         :	    for (i = 0; i < r / 8; ++i)
    0.00 :	  404114:       addq   $0x1,-0xd8(%rbp)
    0.00 :	  40411c:       mov    -0xec(%rbp),%eax
    0.00 :	  404122:       shr    $0x3,%eax
    0.00 :	  404125:       mov    %eax,%eax
    0.00 :	  404127:       cmp    -0xd8(%rbp),%rax
    0.00 :	  40412e:       ja     4040b5 <keccak_absorb+0x8f>
         :	      s[i] ^= load64(m + 8 * i);
         :	    
         :	    KeccakF1600_StatePermute(s);
    0.00 :	  404130:       mov    -0xe8(%rbp),%rax
    0.00 :	  404137:       mov    %rax,%rdi
    0.00 :	  40413a:       callq  402da5 <KeccakF1600_StatePermute>
         :	    mlen -= r;
    0.00 :	  40413f:       mov    -0xec(%rbp),%eax
    0.00 :	  404145:       sub    %rax,-0x100(%rbp)
         :	    m += r;
    0.00 :	  40414c:       mov    -0xec(%rbp),%eax
    0.00 :	  404152:       add    %rax,-0xf8(%rbp)
         :	  unsigned char t[200];
         :
         :	  for (i = 0; i < 25; ++i)
         :	    s[i] = 0;
         :	  
         :	  while (mlen >= r) 
    0.96 :	  404159:       mov    -0xec(%rbp),%eax
    0.00 :	  40415f:       cmp    -0x100(%rbp),%rax
    0.00 :	  404166:       jbe    4040a8 <keccak_absorb+0x82>
         :	    KeccakF1600_StatePermute(s);
         :	    mlen -= r;
         :	    m += r;
         :	  }
         :
         :	  for (i = 0; i < r; ++i)
    0.32 :	  40416c:       movq   $0x0,-0xd8(%rbp)
    0.00 :	  404177:       jmp    404195 <keccak_absorb+0x16f>
         :	    t[i] = 0;
   16.99 :	  404179:       lea    -0xd0(%rbp),%rdx
    0.00 :	  404180:       mov    -0xd8(%rbp),%rax
    1.28 :	  404187:       add    %rdx,%rax
    0.64 :	  40418a:       movb   $0x0,(%rax)
         :	    KeccakF1600_StatePermute(s);
         :	    mlen -= r;
         :	    m += r;
         :	  }
         :
         :	  for (i = 0; i < r; ++i)
   28.21 :	  40418d:       addq   $0x1,-0xd8(%rbp)
    3.53 :	  404195:       mov    -0xec(%rbp),%eax
    0.32 :	  40419b:       cmp    -0xd8(%rbp),%rax
    0.00 :	  4041a2:       ja     404179 <keccak_absorb+0x153>
         :	    t[i] = 0;
         :	  for (i = 0; i < mlen; ++i)
    0.64 :	  4041a4:       movq   $0x0,-0xd8(%rbp)
    0.96 :	  4041af:       jmp    4041e0 <keccak_absorb+0x1ba>
         :	    t[i] = m[i];
    2.56 :	  4041b1:       mov    -0xf8(%rbp),%rdx
    0.32 :	  4041b8:       mov    -0xd8(%rbp),%rax
    0.96 :	  4041bf:       add    %rdx,%rax
    0.32 :	  4041c2:       movzbl (%rax),%eax
   10.90 :	  4041c5:       lea    -0xd0(%rbp),%rcx
    0.32 :	  4041cc:       mov    -0xd8(%rbp),%rdx
    0.00 :	  4041d3:       add    %rcx,%rdx
    0.00 :	  4041d6:       mov    %al,(%rdx)
         :	    m += r;
         :	  }
         :
         :	  for (i = 0; i < r; ++i)
         :	    t[i] = 0;
         :	  for (i = 0; i < mlen; ++i)
    4.49 :	  4041d8:       addq   $0x1,-0xd8(%rbp)
    0.00 :	  4041e0:       mov    -0xd8(%rbp),%rax
    1.28 :	  4041e7:       cmp    -0x100(%rbp),%rax
    0.00 :	  4041ee:       jb     4041b1 <keccak_absorb+0x18b>
         :	    t[i] = m[i];
         :	  t[i] = p;
    0.96 :	  4041f0:       lea    -0xd0(%rbp),%rdx
    0.32 :	  4041f7:       mov    -0xd8(%rbp),%rax
    0.32 :	  4041fe:       add    %rax,%rdx
    0.32 :	  404201:       movzbl -0xf0(%rbp),%eax
    0.32 :	  404208:       mov    %al,(%rdx)
         :	  t[r - 1] |= 128;
    0.00 :	  40420a:       mov    -0xec(%rbp),%eax
    0.00 :	  404210:       lea    -0x1(%rax),%ecx
    0.00 :	  404213:       mov    -0xec(%rbp),%eax
    0.00 :	  404219:       sub    $0x1,%eax
    0.32 :	  40421c:       mov    %eax,%eax
    0.00 :	  40421e:       movzbl -0xd0(%rbp,%rax,1),%eax
    0.00 :	  404226:       or     $0xffffff80,%eax
    0.00 :	  404229:       mov    %eax,%edx
    0.00 :	  40422b:       mov    %ecx,%eax
    0.00 :	  40422d:       mov    %dl,-0xd0(%rbp,%rax,1)
         :	  for (i = 0; i < r / 8; ++i)
    0.00 :	  404234:       movq   $0x0,-0xd8(%rbp)
    0.32 :	  40423f:       jmp    4042a8 <keccak_absorb+0x282>
         :	    s[i] ^= load64(t + 8 * i);
    0.96 :	  404241:       mov    -0xd8(%rbp),%rax
    0.00 :	  404248:       lea    0x0(,%rax,8),%rdx
    0.32 :	  404250:       lea    -0xd0(%rbp),%rax
    0.32 :	  404257:       add    %rdx,%rax
    0.32 :	  40425a:       mov    %rax,%rdi
    0.00 :	  40425d:       callq  402d1e <load64>
    0.64 :	  404262:       mov    %rax,%rsi
    0.64 :	  404265:       mov    -0xd8(%rbp),%rax
    0.32 :	  40426c:       lea    0x0(,%rax,8),%rdx
    0.64 :	  404274:       mov    -0xe8(%rbp),%rax
    0.00 :	  40427b:       add    %rdx,%rax
    0.00 :	  40427e:       mov    -0xd8(%rbp),%rdx
    0.32 :	  404285:       lea    0x0(,%rdx,8),%rcx
    0.00 :	  40428d:       mov    -0xe8(%rbp),%rdx
    0.32 :	  404294:       add    %rcx,%rdx
    0.64 :	  404297:       mov    (%rdx),%rdx
    0.64 :	  40429a:       xor    %rsi,%rdx
    0.32 :	  40429d:       mov    %rdx,(%rax)
         :	    t[i] = 0;
         :	  for (i = 0; i < mlen; ++i)
         :	    t[i] = m[i];
         :	  t[i] = p;
         :	  t[r - 1] |= 128;
         :	  for (i = 0; i < r / 8; ++i)
    1.28 :	  4042a0:       addq   $0x1,-0xd8(%rbp)
    0.96 :	  4042a8:       mov    -0xec(%rbp),%eax
    0.32 :	  4042ae:       shr    $0x3,%eax
    0.00 :	  4042b1:       mov    %eax,%eax
    0.64 :	  4042b3:       cmp    -0xd8(%rbp),%rax
    0.00 :	  4042ba:       ja     404241 <keccak_absorb+0x21b>
         :	    s[i] ^= load64(t + 8 * i);
         :	}
    0.00 :	  4042bc:       nop
    0.64 :	  4042bd:       mov    -0x8(%rbp),%rax
    0.32 :	  4042c1:       xor    %fs:0x28,%rax
    0.00 :	  4042ca:       je     4042d1 <keccak_absorb+0x2ab>
    0.00 :	  4042cc:       callq  446080 <__stack_chk_fail>
    0.00 :	  4042d1:       leaveq 
    0.32 :	  4042d2:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000040201d <LDDecode>:
         :	LDDecode():
         :	  return abs(t - x);
         :	}
         :
         :
         :	static int16_t LDDecode(int32_t xi0, int32_t xi1, int32_t xi2, int32_t xi3)
         :	{
    8.22 :	  40201d:       push   %rbp
    0.68 :	  40201e:       mov    %rsp,%rbp
    1.03 :	  402021:       sub    $0x20,%rsp
   10.96 :	  402025:       mov    %edi,-0x14(%rbp)
    1.03 :	  402028:       mov    %esi,-0x18(%rbp)
    0.34 :	  40202b:       mov    %edx,-0x1c(%rbp)
    0.68 :	  40202e:       mov    %ecx,-0x20(%rbp)
         :	  int32_t t;
         :
         :	  t  = g(xi0);
    8.56 :	  402031:       mov    -0x14(%rbp),%eax
    0.34 :	  402034:       mov    %eax,%edi
    1.37 :	  402036:       callq  401fa4 <g>
    0.00 :	  40203b:       mov    %eax,-0x4(%rbp)
         :	  t += g(xi1);
    3.08 :	  40203e:       mov    -0x18(%rbp),%eax
    0.00 :	  402041:       mov    %eax,%edi
    0.00 :	  402043:       callq  401fa4 <g>
    1.03 :	  402048:       add    %eax,-0x4(%rbp)
         :	  t += g(xi2);
    9.25 :	  40204b:       mov    -0x1c(%rbp),%eax
    0.68 :	  40204e:       mov    %eax,%edi
    0.00 :	  402050:       callq  401fa4 <g>
    1.37 :	  402055:       add    %eax,-0x4(%rbp)
         :	  t += g(xi3);
    7.88 :	  402058:       mov    -0x20(%rbp),%eax
    0.68 :	  40205b:       mov    %eax,%edi
    0.00 :	  40205d:       callq  401fa4 <g>
    0.00 :	  402062:       add    %eax,-0x4(%rbp)
         :
         :	  t -= 8*PARAM_Q;
    8.56 :	  402065:       subl   $0x18008,-0x4(%rbp)
         :	  t >>= 31;
   12.33 :	  40206c:       sarl   $0x1f,-0x4(%rbp)
         :	  return t&1;
   13.01 :	  402070:       mov    -0x4(%rbp),%eax
    5.82 :	  402073:       and    $0x1,%eax
         :	}
    3.08 :	  402076:       leaveq 
    0.00 :	  402077:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402d1e <load64>:
         :	load64():
         :
         :	#define NROUNDS 24
         :	#define ROL(a, offset) ((a << offset) ^ (a >> (64-offset)))
         :
         :	static uint64_t load64(const unsigned char *x)
         :	{
    1.23 :	  402d1e:       push   %rbp
    0.41 :	  402d1f:       mov    %rsp,%rbp
    0.82 :	  402d22:       mov    %rdi,-0x18(%rbp)
         :	  unsigned long long r = 0, i;
    0.00 :	  402d26:       movq   $0x0,-0x10(%rbp)
         :
         :	  for (i = 0; i < 8; ++i) {
    0.00 :	  402d2e:       movq   $0x0,-0x8(%rbp)
    0.41 :	  402d36:       jmp    402d61 <load64+0x43>
         :	    r |= (unsigned long long)x[i] << 8 * i;
    7.00 :	  402d38:       mov    -0x18(%rbp),%rdx
    2.06 :	  402d3c:       mov    -0x8(%rbp),%rax
    2.88 :	  402d40:       add    %rdx,%rax
    1.65 :	  402d43:       movzbl (%rax),%eax
   27.57 :	  402d46:       movzbl %al,%edx
    1.23 :	  402d49:       mov    -0x8(%rbp),%rax
    0.82 :	  402d4d:       shl    $0x3,%eax
    1.65 :	  402d50:       mov    %eax,%ecx
    9.05 :	  402d52:       shl    %cl,%rdx
   11.11 :	  402d55:       mov    %rdx,%rax
    5.35 :	  402d58:       or     %rax,-0x10(%rbp)
         :
         :	static uint64_t load64(const unsigned char *x)
         :	{
         :	  unsigned long long r = 0, i;
         :
         :	  for (i = 0; i < 8; ++i) {
   10.29 :	  402d5c:       addq   $0x1,-0x8(%rbp)
    7.41 :	  402d61:       cmpq   $0x7,-0x8(%rbp)
    5.76 :	  402d66:       jbe    402d38 <load64+0x1a>
         :	    r |= (unsigned long long)x[i] << 8 * i;
         :	  }
         :	  return r;
    1.65 :	  402d68:       mov    -0x10(%rbp),%rax
         :	}
    1.65 :	  402d6c:       pop    %rbp
    0.00 :	  402d6d:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004043b9 <sha3256>:
         :	sha3256():
         :	}
         :	*/
         :
         :
         :	void sha3256(unsigned char *output, const unsigned char *input, unsigned int inputByteLen)
         :	{
    0.00 :	  4043b9:       push   %rbp
    0.00 :	  4043ba:       mov    %rsp,%rbp
    0.00 :	  4043bd:       sub    $0x190,%rsp
    0.00 :	  4043c4:       mov    %rdi,-0x178(%rbp)
    0.00 :	  4043cb:       mov    %rsi,-0x180(%rbp)
    0.00 :	  4043d2:       mov    %edx,-0x184(%rbp)
    0.00 :	  4043d8:       mov    %fs:0x28,%rax
    2.44 :	  4043e1:       mov    %rax,-0x8(%rbp)
    0.00 :	  4043e5:       xor    %eax,%eax
         :	  uint64_t s[25];
         :	  unsigned char t[SHA3_256_RATE];
         :	  int i;
         :
         :	  keccak_absorb(s, SHA3_256_RATE, input, inputByteLen, 0x06);
    0.00 :	  4043e7:       mov    -0x184(%rbp),%ecx
    0.00 :	  4043ed:       mov    -0x180(%rbp),%rdx
    0.00 :	  4043f4:       lea    -0x160(%rbp),%rax
    0.00 :	  4043fb:       mov    $0x6,%r8d
    0.00 :	  404401:       mov    $0x88,%esi
    0.00 :	  404406:       mov    %rax,%rdi
    0.00 :	  404409:       callq  404026 <keccak_absorb>
         :	  keccak_squeezeblocks(t, 1, s, SHA3_256_RATE);
    0.00 :	  40440e:       lea    -0x160(%rbp),%rdx
    0.00 :	  404415:       lea    -0x90(%rbp),%rax
    0.00 :	  40441c:       mov    $0x88,%ecx
    0.00 :	  404421:       mov    $0x1,%esi
    0.00 :	  404426:       mov    %rax,%rdi
    0.00 :	  404429:       callq  4042d3 <keccak_squeezeblocks>
         :	  for(i=0;i<32;i++)
    0.00 :	  40442e:       movl   $0x0,-0x164(%rbp)
    0.00 :	  404438:       jmp    404466 <sha3256+0xad>
         :	    output[i] = t[i];
   17.07 :	  40443a:       mov    -0x164(%rbp),%eax
    2.44 :	  404440:       movslq %eax,%rdx
    4.88 :	  404443:       mov    -0x178(%rbp),%rax
    0.00 :	  40444a:       add    %rax,%rdx
    9.76 :	  40444d:       mov    -0x164(%rbp),%eax
    0.00 :	  404453:       cltq   
    0.00 :	  404455:       movzbl -0x90(%rbp,%rax,1),%eax
   21.95 :	  40445d:       mov    %al,(%rdx)
         :	  unsigned char t[SHA3_256_RATE];
         :	  int i;
         :
         :	  keccak_absorb(s, SHA3_256_RATE, input, inputByteLen, 0x06);
         :	  keccak_squeezeblocks(t, 1, s, SHA3_256_RATE);
         :	  for(i=0;i<32;i++)
   19.51 :	  40445f:       addl   $0x1,-0x164(%rbp)
    4.88 :	  404466:       cmpl   $0x1f,-0x164(%rbp)
   12.20 :	  40446d:       jle    40443a <sha3256+0x81>
         :	    output[i] = t[i];
         :	}
    0.00 :	  40446f:       nop
    0.00 :	  404470:       mov    -0x8(%rbp),%rax
    0.00 :	  404474:       xor    %fs:0x28,%rax
    2.44 :	  40447d:       je     404484 <sha3256+0xcb>
    0.00 :	  40447f:       callq  446080 <__stack_chk_fail>
    2.44 :	  404484:       leaveq 
    0.00 :	  404485:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000040257a <encode_a>:
         :	encode_a():
         :	#include "randombytes.h"
         :	#include "error_correction.h"
         :	#include "fips202.h"
         :
         :	static void encode_a(unsigned char *r, const poly *pk, const unsigned char *seed)
         :	{
    0.00 :	  40257a:       push   %rbp
    0.00 :	  40257b:       mov    %rsp,%rbp
    0.00 :	  40257e:       sub    $0x30,%rsp
    0.00 :	  402582:       mov    %rdi,-0x18(%rbp)
    4.35 :	  402586:       mov    %rsi,-0x20(%rbp)
    0.00 :	  40258a:       mov    %rdx,-0x28(%rbp)
         :	        //r :the message that will be send to the client
         :	  int i;
         :	  poly_tobytes(r, pk);
    0.00 :	  40258e:       mov    -0x20(%rbp),%rdx
    0.00 :	  402592:       mov    -0x18(%rbp),%rax
    0.00 :	  402596:       mov    %rdx,%rsi
    0.00 :	  402599:       mov    %rax,%rdi
    0.00 :	  40259c:       callq  40147f <poly_tobytes>
         :	  for(i=0;i<NEWHOPE_SEEDBYTES;i++)
    4.35 :	  4025a1:       movl   $0x0,-0x4(%rbp)
    0.00 :	  4025a8:       jmp    4025d2 <encode_a+0x58>
         :	    r[POLY_BYTES+i] = seed[i];
   17.39 :	  4025aa:       mov    -0x4(%rbp),%eax
    0.00 :	  4025ad:       add    $0x700,%eax
    0.00 :	  4025b2:       movslq %eax,%rdx
    0.00 :	  4025b5:       mov    -0x18(%rbp),%rax
    4.35 :	  4025b9:       add    %rax,%rdx
    0.00 :	  4025bc:       mov    -0x4(%rbp),%eax
    0.00 :	  4025bf:       movslq %eax,%rcx
    0.00 :	  4025c2:       mov    -0x28(%rbp),%rax
    0.00 :	  4025c6:       add    %rcx,%rax
    4.35 :	  4025c9:       movzbl (%rax),%eax
   26.09 :	  4025cc:       mov    %al,(%rdx)
         :	static void encode_a(unsigned char *r, const poly *pk, const unsigned char *seed)
         :	{
         :	        //r :the message that will be send to the client
         :	  int i;
         :	  poly_tobytes(r, pk);
         :	  for(i=0;i<NEWHOPE_SEEDBYTES;i++)
   26.09 :	  4025ce:       addl   $0x1,-0x4(%rbp)
    0.00 :	  4025d2:       cmpl   $0x1f,-0x4(%rbp)
    8.70 :	  4025d6:       jle    4025aa <encode_a+0x30>
         :	    r[POLY_BYTES+i] = seed[i];
         :	}
    0.00 :	  4025d8:       nop
    0.00 :	  4025d9:       leaveq 
    4.35 :	  4025da:       retq   
 Percent |	Source code & Disassembly of kcore for cycles:u
---------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section load0:
         :
         :	ffffffff81837150 <load0>:
  100.00 :	  ffffffff81837150:       clac   
    0.00 :	  ffffffff81837153:       nopw   0x0(%rax,%rax,1)
    0.00 :	  ffffffff81837159:       add    $0xffffffffffffff88,%rsp
    0.00 :	  ffffffff8183715d:       callq  0xffffffff818372e0
    0.00 :	  ffffffff81837162:       mov    %rsp,%rdi
    0.00 :	  ffffffff81837165:       mov    0x78(%rsp),%rsi
    0.00 :	  ffffffff8183716a:       movq   $0xffffffffffffffff,0x78(%rsp)
    0.00 :	  ffffffff81837173:       callq  0xffffffff8106b750
    0.00 :	  ffffffff81837178:       jmpq   0xffffffff81837390
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402839 <newhope_keygen>:
         :	newhope_keygen():
         :
         :
         :	// API FUNCTIONS 
         :
         :	void newhope_keygen(unsigned char *send, poly *sk)
         :	{
   22.22 :	  402839:       lea    0x8(%rsp),%r10
    0.00 :	  40283e:       and    $0xffffffffffffffe0,%rsp
    0.00 :	  402842:       pushq  -0x8(%r10)
    0.00 :	  402846:       push   %rbp
   11.11 :	  402847:       mov    %rsp,%rbp
    0.00 :	  40284a:       push   %r10
    0.00 :	  40284c:       sub    $0x2088,%rsp
    0.00 :	  402853:       mov    %rdi,-0x2078(%rbp)
    0.00 :	  40285a:       mov    %rsi,-0x2080(%rbp)
    0.00 :	  402861:       mov    %fs:0x28,%rax
    0.00 :	  40286a:       mov    %rax,-0x18(%rbp)
    0.00 :	  40286e:       xor    %eax,%eax
         :	  poly a, e, r, pk;
         :	  unsigned char seed[NEWHOPE_SEEDBYTES];
         :	  unsigned char noiseseed[32];
         :
         :	  randombytes(seed, NEWHOPE_SEEDBYTES);//generate a random seed
    0.00 :	  402870:       lea    -0x60(%rbp),%rax
    0.00 :	  402874:       mov    $0x20,%esi
    0.00 :	  402879:       mov    %rax,%rdi
    0.00 :	  40287c:       callq  404486 <randombytes>
         :	  sha3256(seed, seed, NEWHOPE_SEEDBYTES); /* Don't send output of system RNG */
    0.00 :	  402881:       lea    -0x60(%rbp),%rcx
    0.00 :	  402885:       lea    -0x60(%rbp),%rax
    0.00 :	  402889:       mov    $0x20,%edx
    0.00 :	  40288e:       mov    %rcx,%rsi
    0.00 :	  402891:       mov    %rax,%rdi
    0.00 :	  402894:       callq  4043b9 <sha3256>
         :	  randombytes(noiseseed, 32);
    0.00 :	  402899:       lea    -0x40(%rbp),%rax
    0.00 :	  40289d:       mov    $0x20,%esi
    0.00 :	  4028a2:       mov    %rax,%rdi
    0.00 :	  4028a5:       callq  404486 <randombytes>
         :
         :	  gen_a(&a, seed); //why some of the coefficients have more that 14 bit???
    0.00 :	  4028aa:       lea    -0x60(%rbp),%rdx
    0.00 :	  4028ae:       lea    -0x2070(%rbp),%rax
    0.00 :	  4028b5:       mov    %rdx,%rsi
    0.00 :	  4028b8:       mov    %rax,%rdi
    0.00 :	  4028bb:       callq  402813 <gen_a>
         :
         :	  poly_getnoise(sk,noiseseed,0); //bimodal Gaussian
    0.00 :	  4028c0:       lea    -0x40(%rbp),%rcx
    0.00 :	  4028c4:       mov    -0x2080(%rbp),%rax
    0.00 :	  4028cb:       mov    $0x0,%edx
    0.00 :	  4028d0:       mov    %rcx,%rsi
    0.00 :	  4028d3:       mov    %rax,%rdi
    0.00 :	  4028d6:       callq  4018d1 <poly_getnoise>
         :	  poly_ntt(sk);
    0.00 :	  4028db:       mov    -0x2080(%rbp),%rax
    0.00 :	  4028e2:       mov    %rax,%rdi
    0.00 :	  4028e5:       callq  401b33 <poly_ntt>
         :	  
         :	  poly_getnoise(&e,noiseseed,1); //bimodal Gaussian
    0.00 :	  4028ea:       lea    -0x40(%rbp),%rcx
   11.11 :	  4028ee:       lea    -0x1870(%rbp),%rax
    0.00 :	  4028f5:       mov    $0x1,%edx
    0.00 :	  4028fa:       mov    %rcx,%rsi
    0.00 :	  4028fd:       mov    %rax,%rdi
    0.00 :	  402900:       callq  4018d1 <poly_getnoise>
         :	  poly_ntt(&e);
    0.00 :	  402905:       lea    -0x1870(%rbp),%rax
    0.00 :	  40290c:       mov    %rax,%rdi
    0.00 :	  40290f:       callq  401b33 <poly_ntt>
         :
         :	  poly_pointwise(&r,sk,&a);
   11.11 :	  402914:       lea    -0x2070(%rbp),%rdx
    0.00 :	  40291b:       mov    -0x2080(%rbp),%rcx
    0.00 :	  402922:       lea    -0x1070(%rbp),%rax
    0.00 :	  402929:       mov    %rcx,%rsi
    0.00 :	  40292c:       mov    %rax,%rdi
    0.00 :	  40292f:       callq  401a50 <poly_pointwise>
         :	  poly_add(&pk,&e,&r);
   11.11 :	  402934:       lea    -0x1070(%rbp),%rdx
    0.00 :	  40293b:       lea    -0x1870(%rbp),%rcx
    0.00 :	  402942:       lea    -0x870(%rbp),%rax
    0.00 :	  402949:       mov    %rcx,%rsi
    0.00 :	  40294c:       mov    %rax,%rdi
    0.00 :	  40294f:       callq  401ace <poly_add>
         :
         :	  encode_a(send, &pk, seed);
    0.00 :	  402954:       lea    -0x60(%rbp),%rdx
    0.00 :	  402958:       lea    -0x870(%rbp),%rcx
    0.00 :	  40295f:       mov    -0x2078(%rbp),%rax
   11.11 :	  402966:       mov    %rcx,%rsi
    0.00 :	  402969:       mov    %rax,%rdi
    0.00 :	  40296c:       callq  40257a <encode_a>
         :	}
   11.11 :	  402971:       nop
    0.00 :	  402972:       mov    -0x18(%rbp),%rax
    0.00 :	  402976:       xor    %fs:0x28,%rax
   11.11 :	  40297f:       je     402986 <newhope_keygen+0x14d>
    0.00 :	  402981:       callq  446080 <__stack_chk_fail>
    0.00 :	  402986:       add    $0x2088,%rsp
    0.00 :	  40298d:       pop    %r10
    0.00 :	  40298f:       pop    %rbp
    0.00 :	  402990:       lea    -0x8(%r10),%rsp
    0.00 :	  402994:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402bb6 <newhope_shareda>:
         :	newhope_shareda():
         :	#endif
         :	}
         :
         :
         :	void newhope_shareda(unsigned char *sharedkey, const poly *sk, const unsigned char *received)
         :	{
    0.00 :	  402bb6:       lea    0x8(%rsp),%r10
   16.67 :	  402bbb:       and    $0xffffffffffffffe0,%rsp
    0.00 :	  402bbf:       pushq  -0x8(%r10)
    0.00 :	  402bc3:       push   %rbp
    0.00 :	  402bc4:       mov    %rsp,%rbp
    0.00 :	  402bc7:       push   %r10
    0.00 :	  402bc9:       sub    $0x1848,%rsp
    0.00 :	  402bd0:       mov    %rdi,-0x1838(%rbp)
    0.00 :	  402bd7:       mov    %rsi,-0x1840(%rbp)
    0.00 :	  402bde:       mov    %rdx,-0x1848(%rbp)
    0.00 :	  402be5:       mov    %fs:0x28,%rax
    0.00 :	  402bee:       mov    %rax,-0x18(%rbp)
    0.00 :	  402bf2:       xor    %eax,%eax
         :	  poly v,bp, c;
         :
         :	  decode_b(&bp, &c, received);
    0.00 :	  402bf4:       mov    -0x1848(%rbp),%rdx
    0.00 :	  402bfb:       lea    -0x830(%rbp),%rcx
    0.00 :	  402c02:       lea    -0x1030(%rbp),%rax
    0.00 :	  402c09:       mov    %rcx,%rsi
    0.00 :	  402c0c:       mov    %rax,%rdi
    0.00 :	  402c0f:       callq  402703 <decode_b>
         :
         :	  poly_pointwise(&v,sk,&bp);
   16.67 :	  402c14:       lea    -0x1030(%rbp),%rdx
    0.00 :	  402c1b:       mov    -0x1840(%rbp),%rcx
    0.00 :	  402c22:       lea    -0x1830(%rbp),%rax
    0.00 :	  402c29:       mov    %rcx,%rsi
    0.00 :	  402c2c:       mov    %rax,%rdi
    0.00 :	  402c2f:       callq  401a50 <poly_pointwise>
         :	  poly_invntt(&v);
    0.00 :	  402c34:       lea    -0x1830(%rbp),%rax
   16.67 :	  402c3b:       mov    %rax,%rdi
    0.00 :	  402c3e:       callq  401b64 <poly_invntt>
         :	 
         :	  rec(sharedkey, &v, &c);
    0.00 :	  402c43:       lea    -0x830(%rbp),%rdx
    0.00 :	  402c4a:       lea    -0x1830(%rbp),%rcx
    0.00 :	  402c51:       mov    -0x1838(%rbp),%rax
    0.00 :	  402c58:       mov    %rcx,%rsi
    0.00 :	  402c5b:       mov    %rax,%rdi
    0.00 :	  402c5e:       callq  402357 <rec>
         :
         :	#ifndef STATISTICAL_TEST 
         :	  sha3256(sharedkey, sharedkey, 32); 
    0.00 :	  402c63:       mov    -0x1838(%rbp),%rcx
    0.00 :	  402c6a:       mov    -0x1838(%rbp),%rax
    0.00 :	  402c71:       mov    $0x20,%edx
    0.00 :	  402c76:       mov    %rcx,%rsi
    0.00 :	  402c79:       mov    %rax,%rdi
   16.67 :	  402c7c:       callq  4043b9 <sha3256>
         :	#endif
         :	}
   16.67 :	  402c81:       nop
    0.00 :	  402c82:       mov    -0x18(%rbp),%rax
    0.00 :	  402c86:       xor    %fs:0x28,%rax
   16.67 :	  402c8f:       je     402c96 <newhope_shareda+0xe0>
    0.00 :	  402c91:       callq  446080 <__stack_chk_fail>
    0.00 :	  402c96:       add    $0x1848,%rsp
    0.00 :	  402c9d:       pop    %r10
    0.00 :	  402c9f:       pop    %rbp
    0.00 :	  402ca0:       lea    -0x8(%r10),%rsp
    0.00 :	  402ca4:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004464b0 <_dl_non_dynamic_init>:
         :	_dl_non_dynamic_init():
    0.00 :	  4464b0:       push   %r13
    0.00 :	  4464b2:       push   %r12
    0.00 :	  4464b4:       push   %rbp
    0.00 :	  4464b5:       push   %rbx
    0.00 :	  4464b6:       sub    $0x18,%rsp
    0.00 :	  4464ba:       callq  477a20 <_dl_get_origin>
    0.00 :	  4464bf:       mov    %rax,0x28a0d2(%rip)        # 6d0598 <_dl_main_map+0x338>
    0.00 :	  4464c6:       mov    0x28bd7b(%rip),%rax        # 6d2248 <_dl_phdr>
    0.00 :	  4464cd:       mov    %rax,0x28a02c(%rip)        # 6d0500 <_dl_main_map+0x2a0>
    0.00 :	  4464d4:       mov    0x28bda5(%rip),%rax        # 6d2280 <_dl_phnum>
    0.00 :	  4464db:       mov    %ax,0x28a02e(%rip)        # 6d0510 <_dl_main_map+0x2b0>
    0.00 :	  4464e2:       rdtsc  
    0.00 :	  4464e4:       shl    $0x20,%rdx
    0.00 :	  4464e8:       mov    %eax,%eax
    0.00 :	  4464ea:       mov    $0x4a859e,%edi
    0.00 :	  4464ef:       or     %rdx,%rax
    0.00 :	  4464f2:       mov    %rax,0x28bd17(%rip)        # 6d2210 <_dl_cpuclock_offset>
    0.00 :	  4464f9:       callq  4126b0 <getenv>
    0.00 :	  4464fe:       mov    $0x4b9dc5,%edx
    0.00 :	  446503:       test   %rax,%rax
    0.00 :	  446506:       cmove  %rdx,%rax
    0.00 :	  44650a:       cmpb   $0x0,(%rax)
    0.00 :	  44650d:       setne  %al
    0.00 :	  446510:       cmpq   $0x0,0x28bd50(%rip)        # 6d2268 <_dl_sysinfo_dso>
    0.00 :	  446518:       movzbl %al,%eax
    0.00 :	  44651b:       mov    %eax,0x28bd57(%rip)        # 6d2278 <_dl_verbose>
    0.00 :	  446521:       je     446985 <_dl_non_dynamic_init+0x4d5>
    0.00 :	  446527:       mov    $0x4b9dc5,%esi
    0.00 :	  44652c:       xor    %r9d,%r9d
    0.00 :	  44652f:       xor    %r8d,%r8d
    0.00 :	  446532:       xor    %ecx,%ecx
    0.00 :	  446534:       mov    $0x1,%edx
    0.00 :	  446539:       mov    %rsi,%rdi
    0.00 :	  44653c:       callq  474140 <_dl_new_object>
    0.00 :	  446541:       test   %rax,%rax
    0.00 :	  446544:       mov    %rax,%rbx
    0.00 :	  446547:       je     446985 <_dl_non_dynamic_init+0x4d5>
    0.00 :	  44654d:       mov    0x28bd14(%rip),%rdi        # 6d2268 <_dl_sysinfo_dso>
    0.00 :	  446554:       xor    %ecx,%ecx
    0.00 :	  446556:       movzwl 0x38(%rdi),%esi
    0.00 :	  44655a:       mov    %rdi,%rax
    0.00 :	  44655d:       add    0x20(%rdi),%rax
    0.00 :	  446561:       mov    %rax,0x2a0(%rbx)
    0.00 :	  446568:       add    $0x10,%rax
    0.00 :	  44656c:       test   %rsi,%rsi
    0.00 :	  44656f:       mov    %si,0x2b0(%rbx)
    0.00 :	  446576:       jne    44659f <_dl_non_dynamic_init+0xef>
    0.00 :	  446578:       jmp    4465ca <_dl_non_dynamic_init+0x11a>
    0.00 :	  44657a:       nopw   0x0(%rax,%rax,1)
   20.00 :	  446580:       cmp    $0x1,%edx
    0.00 :	  446583:       je     446c20 <_dl_non_dynamic_init+0x770>
    0.00 :	  446589:       cmp    $0x7,%edx
    0.00 :	  44658c:       je     447165 <_dl_non_dynamic_init+0xcb5>
    0.00 :	  446592:       add    $0x1,%rcx
    0.00 :	  446596:       add    $0x38,%rax
    0.00 :	  44659a:       cmp    %rsi,%rcx
    0.00 :	  44659d:       je     4465ca <_dl_non_dynamic_init+0x11a>
    0.00 :	  44659f:       mov    -0x10(%rax),%edx
    0.00 :	  4465a2:       cmp    $0x2,%edx
    0.00 :	  4465a5:       jne    446580 <_dl_non_dynamic_init+0xd0>
    0.00 :	  4465a7:       mov    (%rax),%rdx
    0.00 :	  4465aa:       add    $0x1,%rcx
    0.00 :	  4465ae:       add    $0x38,%rax
    0.00 :	  4465b2:       mov    %rdx,0x10(%rbx)
    0.00 :	  4465b6:       mov    -0x20(%rax),%rdx
    0.00 :	  4465ba:       shr    $0x4,%rdx
    0.00 :	  4465be:       cmp    %rsi,%rcx
    0.00 :	  4465c1:       mov    %dx,0x2b2(%rbx)
    0.00 :	  4465c8:       jne    44659f <_dl_non_dynamic_init+0xef>
    0.00 :	  4465ca:       mov    %rdi,0x340(%rbx)
    0.00 :	  4465d1:       sub    (%rbx),%rdi
    0.00 :	  4465d4:       add    %rdi,0x348(%rbx)
    0.00 :	  4465db:       add    %rdi,0x350(%rbx)
    0.00 :	  4465e2:       mov    %rdi,%rdx
    0.00 :	  4465e5:       mov    %rdi,%rcx
    0.00 :	  4465e8:       add    0x10(%rbx),%rdx
    0.00 :	  4465ec:       mov    %rdi,(%rbx)
    0.00 :	  4465ef:       test   %rdx,%rdx
    0.00 :	  4465f2:       mov    %rdx,0x10(%rbx)
    0.00 :	  4465f6:       je     4468df <_dl_non_dynamic_init+0x42f>
    0.00 :	  4465fc:       mov    (%rdx),%rax
   20.00 :	  4465ff:       lea    0x40(%rbx),%rdi
    0.00 :	  446603:       test   %rax,%rax
    0.00 :	  446606:       je     446690 <_dl_non_dynamic_init+0x1e0>
    0.00 :	  44660c:       mov    $0x6fffffff,%r8d
    0.00 :	  446612:       mov    $0x6ffffdff,%r11d
    0.00 :	  446618:       mov    $0x6ffffeff,%r12d
    0.00 :	  44661e:       movabs $0x37ffffa00,%r13
    0.00 :	  446628:       movabs $0x37ffff1a0,%rbp
    0.00 :	  446632:       mov    $0x31,%r10d
    0.00 :	  446638:       mov    $0x70000021,%r9d
    0.00 :	  44663e:       jmp    446659 <_dl_non_dynamic_init+0x1a9>
    0.00 :	  446640:       mov    %r9,%rsi
    0.00 :	  446643:       sub    %rax,%rsi
    0.00 :	  446646:       mov    %rsi,%rax
    0.00 :	  446649:       mov    %rdx,(%rdi,%rax,8)
   20.00 :	  44664d:       add    $0x10,%rdx
    0.00 :	  446651:       mov    (%rdx),%rax
    0.00 :	  446654:       test   %rax,%rax
    0.00 :	  446657:       je     446690 <_dl_non_dynamic_init+0x1e0>
    0.00 :	  446659:       cmp    $0x21,%rax
    0.00 :	  44665d:       jbe    446649 <_dl_non_dynamic_init+0x199>
    0.00 :	  44665f:       mov    %r8,%rsi
    0.00 :	  446662:       sub    %rax,%rsi
    0.00 :	  446665:       cmp    $0xf,%rsi
    0.00 :	  446669:       jbe    446640 <_dl_non_dynamic_init+0x190>
    0.00 :	  44666b:       lea    (%rax,%rax,1),%esi
    0.00 :	  44666e:       sar    %esi
    0.00 :	  446670:       cmp    $0xfffffffc,%esi
    0.00 :	  446673:       jbe    446cb0 <_dl_non_dynamic_init+0x800>
    0.00 :	  446679:       mov    %r10d,%eax
    0.00 :	  44667c:       sub    %esi,%eax
    0.00 :	  44667e:       mov    %rdx,(%rdi,%rax,8)
    0.00 :	  446682:       add    $0x10,%rdx
    0.00 :	  446686:       mov    (%rdx),%rax
    0.00 :	  446689:       test   %rax,%rax
    0.00 :	  44668c:       jne    446659 <_dl_non_dynamic_init+0x1a9>
    0.00 :	  44668e:       xchg   %ax,%ax
    0.00 :	  446690:       test   %rcx,%rcx
    0.00 :	  446693:       je     446839 <_dl_non_dynamic_init+0x389>
    0.00 :	  446699:       mov    0x60(%rbx),%rax
    0.00 :	  44669d:       test   %rax,%rax
    0.00 :	  4466a0:       je     446f95 <_dl_non_dynamic_init+0xae5>
    0.00 :	  4466a6:       mov    %rcx,%rdi
    0.00 :	  4466a9:       add    0x8(%rax),%rdi
    0.00 :	  4466ad:       mov    (%rax),%rdx
    0.00 :	  4466b0:       mov    $0x70,%r8d
    0.00 :	  4466b6:       movq   $0x6ccf00,0x60(%rbx)
    0.00 :	  4466be:       mov    $0x60,%eax
    0.00 :	  4466c3:       mov    $0x30,%r9d
    0.00 :	  4466c9:       mov    $0x20,%r10d
    0.00 :	  4466cf:       mov    $0x10,%r11d
    0.00 :	  4466d5:       mov    %rdx,0x286824(%rip)        # 6ccf00 <dyn_temp.9701>
    0.00 :	  4466dc:       mov    $0x50,%edx
    0.00 :	  4466e1:       mov    %rdi,0x286820(%rip)        # 6ccf08 <dyn_temp.9701+0x8>
    0.00 :	  4466e8:       mov    $0x40,%edi
    0.00 :	  4466ed:       mov    0x58(%rbx),%rsi
    0.00 :	  4466f1:       test   %rsi,%rsi
    0.00 :	  4466f4:       je     446f7e <_dl_non_dynamic_init+0xace>
    0.00 :	  4466fa:       mov    (%rsi),%r12
    0.00 :	  4466fd:       lea    0x6ccf00(%r11),%rbp
    0.00 :	  446704:       mov    %r12,0x6ccf00(%r11)
    0.00 :	  44670b:       mov    %rcx,%r11
    0.00 :	  44670e:       add    0x8(%rsi),%r11
    0.00 :	  446712:       mov    %r11,0x8(%rbp)
    0.00 :	  446716:       mov    %rbp,0x58(%rbx)
    0.00 :	  44671a:       mov    0x68(%rbx),%rsi
    0.00 :	  44671e:       test   %rsi,%rsi
    0.00 :	  446721:       je     446f6a <_dl_non_dynamic_init+0xaba>
    0.00 :	  446727:       mov    (%rsi),%rbp
    0.00 :	  44672a:       lea    0x6ccf00(%r10),%r11
    0.00 :	  446731:       mov    %rbp,0x6ccf00(%r10)
    0.00 :	  446738:       mov    %rcx,%r10
    0.00 :	  44673b:       add    0x8(%rsi),%r10
    0.00 :	  44673f:       mov    %r10,0x8(%r11)
    0.00 :	  446743:       mov    %r11,0x68(%rbx)
    0.00 :	  446747:       mov    0x70(%rbx),%rsi
    0.00 :	  44674b:       test   %rsi,%rsi
    0.00 :	  44674e:       je     446f59 <_dl_non_dynamic_init+0xaa9>
    0.00 :	  446754:       mov    (%rsi),%r11
    0.00 :	  446757:       lea    0x6ccf00(%r9),%r10
    0.00 :	  44675e:       mov    %r11,0x6ccf00(%r9)
    0.00 :	  446765:       mov    %rcx,%r11
    0.00 :	  446768:       add    0x8(%rsi),%r11
    0.00 :	  44676c:       mov    %r11,0x6ccf08(%r9)
    0.00 :	  446773:       mov    %r10,0x70(%rbx)
    0.00 :	  446777:       mov    0x78(%rbx),%rsi
    0.00 :	  44677b:       test   %rsi,%rsi
    0.00 :	  44677e:       je     446f4b <_dl_non_dynamic_init+0xa9b>
    0.00 :	  446784:       mov    (%rsi),%r10
    0.00 :	  446787:       lea    0x6ccf00(%rdi),%r9
    0.00 :	  44678e:       mov    %r10,0x6ccf00(%rdi)
    0.00 :	  446795:       mov    %rcx,%rdi
    0.00 :	  446798:       add    0x8(%rsi),%rdi
    0.00 :	  44679c:       mov    %rdi,0x8(%r9)
    0.00 :	  4467a0:       mov    %r9,0x78(%rbx)
    0.00 :	  4467a4:       mov    0xf8(%rbx),%rsi
    0.00 :	  4467ab:       test   %rsi,%rsi
    0.00 :	  4467ae:       je     446f40 <_dl_non_dynamic_init+0xa90>
    0.00 :	  4467b4:       mov    (%rsi),%r9
    0.00 :	  4467b7:       lea    0x6ccf00(%rdx),%rdi
    0.00 :	  4467be:       mov    %r9,0x6ccf00(%rdx)
    0.00 :	  4467c5:       mov    %rcx,%rdx
    0.00 :	  4467c8:       add    0x8(%rsi),%rdx
    0.00 :	  4467cc:       mov    %rdx,0x8(%rdi)
    0.00 :	  4467d0:       mov    %rdi,0xf8(%rbx)
    0.00 :	  4467d7:       mov    0x1c8(%rbx),%rdx
    0.00 :	  4467de:       test   %rdx,%rdx
    0.00 :	  4467e1:       je     446f38 <_dl_non_dynamic_init+0xa88>
    0.00 :	  4467e7:       mov    (%rdx),%rdi
    0.00 :	  4467ea:       lea    0x6ccf00(%rax),%rsi
    0.00 :	  4467f1:       mov    %rdi,0x6ccf00(%rax)
    0.00 :	  4467f8:       mov    %rcx,%rax
    0.00 :	  4467fb:       add    0x8(%rdx),%rax
    0.00 :	  4467ff:       mov    %rax,0x8(%rsi)
    0.00 :	  446803:       mov    %rsi,0x1c8(%rbx)
    0.00 :	  44680a:       mov    0x298(%rbx),%rax
    0.00 :	  446811:       test   %rax,%rax
    0.00 :	  446814:       je     446839 <_dl_non_dynamic_init+0x389>
    0.00 :	  446816:       mov    (%rax),%rsi
    0.00 :	  446819:       lea    0x6ccf00(%r8),%rdx
    0.00 :	  446820:       mov    %rsi,0x6ccf00(%r8)
    0.00 :	  446827:       add    0x8(%rax),%rcx
    0.00 :	  44682b:       mov    %rcx,0x6ccf08(%r8)
    0.00 :	  446832:       mov    %rdx,0x298(%rbx)
    0.00 :	  446839:       mov    0xe0(%rbx),%rax
    0.00 :	  446840:       test   %rax,%rax
    0.00 :	  446843:       je     446850 <_dl_non_dynamic_init+0x3a0>
    0.00 :	  446845:       cmpq   $0x7,0x8(%rax)
    0.00 :	  44684a:       jne    44717e <_dl_non_dynamic_init+0xcce>
    0.00 :	  446850:       cmpq   $0x0,0x78(%rbx)
    0.00 :	  446855:       je     446869 <_dl_non_dynamic_init+0x3b9>
    0.00 :	  446857:       mov    0x88(%rbx),%rax
    0.00 :	  44685e:       cmpq   $0x18,0x8(%rax)
    0.00 :	  446863:       jne    4471d3 <_dl_non_dynamic_init+0xd23>
    0.00 :	  446869:       mov    0x130(%rbx),%rdx
    0.00 :	  446870:       test   %rdx,%rdx
    0.00 :	  446873:       je     44689d <_dl_non_dynamic_init+0x3ed>
    0.00 :	  446875:       mov    0x8(%rdx),%rax
    0.00 :	  446879:       test   $0x2,%al
    0.00 :	  44687b:       mov    %eax,0x3d8(%rbx)
    0.00 :	  446881:       je     44688a <_dl_non_dynamic_init+0x3da>
    0.00 :	  446883:       mov    %rdx,0xc0(%rbx)
    0.00 :	  44688a:       test   $0x4,%al
    0.00 :	  44688c:       je     446895 <_dl_non_dynamic_init+0x3e5>
    0.00 :	  44688e:       mov    %rdx,0xf0(%rbx)
    0.00 :	  446895:       test   $0x8,%al
    0.00 :	  446897:       jne    446dd8 <_dl_non_dynamic_init+0x928>
    0.00 :	  44689d:       mov    0x170(%rbx),%rax
    0.00 :	  4468a4:       test   %rax,%rax
    0.00 :	  4468a7:       je     4468ca <_dl_non_dynamic_init+0x41a>
    0.00 :	  4468a9:       testb  $0x40,0x28b948(%rip)        # 6d21f8 <_dl_debug_mask>
    0.00 :	  4468b0:       mov    0x8(%rax),%rsi
    0.00 :	  4468b4:       mov    %esi,%eax
    0.00 :	  4468b6:       mov    %esi,0x3d4(%rbx)
    0.00 :	  4468bc:       jne    446f15 <_dl_non_dynamic_init+0xa65>
    0.00 :	  4468c2:       test   $0x1,%al
    0.00 :	  4468c4:       jne    446dc0 <_dl_non_dynamic_init+0x910>
    0.00 :	  4468ca:       cmpq   $0x0,0x128(%rbx)
    0.00 :	  4468d2:       je     4468df <_dl_non_dynamic_init+0x42f>
    0.00 :	  4468d4:       movq   $0x0,0xb8(%rbx)
    0.00 :	  4468df:       mov    %rbx,%rdi
    0.00 :	  4468e2:       callq  473fe0 <_dl_setup_hash>
    0.00 :	  4468e7:       mov    0x388(%rbx),%rax
    0.00 :	  4468ee:       lea    0x28(%rbx),%rdx
    0.00 :	  4468f2:       orb    $0x4,0x314(%rbx)
    0.00 :	  4468f9:       movl   $0x1,0x3cc(%rbx)
    0.00 :	  446903:       movl   $0x1,0x8(%rax)
    0.00 :	  44690a:       mov    %rdx,(%rax)
    0.00 :	  44690d:       mov    0xb0(%rbx),%rax
    0.00 :	  446914:       test   %rax,%rax
    0.00 :	  446917:       je     446969 <_dl_non_dynamic_init+0x4b9>
    0.00 :	  446919:       mov    0x68(%rbx),%rdx
    0.00 :	  44691d:       mov    0x8(%rax),%rbp
    0.00 :	  446921:       add    0x8(%rdx),%rbp
    0.00 :	  446925:       mov    %rbp,%rdi
    0.00 :	  446928:       callq  426ba0 <strlen>
    0.00 :	  44692d:       lea    0x1(%rax),%r12
    0.00 :	  446931:       mov    %r12,%rdi
    0.00 :	  446934:       callq  420f60 <__libc_malloc>
    0.00 :	  446939:       test   %rax,%rax
    0.00 :	  44693c:       je     4471b8 <_dl_non_dynamic_init+0xd08>
    0.00 :	  446942:       mov    0x38(%rbx),%r13
    0.00 :	  446946:       mov    %r12,%rdx
    0.00 :	  446949:       mov    %rbp,%rsi
    0.00 :	  44694c:       mov    %rax,%rdi
    0.00 :	  44694f:       callq  42f570 <memcpy>
    0.00 :	  446954:       mov    %rax,%rcx
    0.00 :	  446957:       mov    %rax,0x0(%r13)
    0.00 :	  44695b:       mov    0x28b897(%rip),%eax        # 6d21f8 <_dl_debug_mask>
    0.00 :	  446961:       test   %eax,%eax
    0.00 :	  446963:       je     446969 <_dl_non_dynamic_init+0x4b9>
    0.00 :	  446965:       mov    %rcx,0x8(%rbx)
    0.00 :	  446969:       xor    %esi,%esi
    0.00 :	  44696b:       mov    %rbx,%rdi
    0.00 :	  44696e:       callq  474090 <_dl_add_to_namespace_list>
    0.00 :	  446973:       movq   $0x1,0x289832(%rip)        # 6d01b0 <_dl_nns>
    0.00 :	  44697e:       mov    %rbx,0x28b8b3(%rip)        # 6d2238 <_dl_sysinfo_map>
    0.00 :	  446985:       mov    $0x4a85ea,%edi
    0.00 :	  44698a:       mov    $0x4b9dc5,%ebx
    0.00 :	  44698f:       callq  4126b0 <getenv>
    0.00 :	  446994:       mov    %rax,%rdi
    0.00 :	  446997:       callq  471490 <_dl_init_paths>
    0.00 :	  44699c:       mov    0x28b8f5(%rip),%rax        # 6d2298 <_dl_all_dirs>
    0.00 :	  4469a3:       mov    $0x4a85fa,%edi
    0.00 :	  4469a8:       mov    %rax,0x28b8c1(%rip)        # 6d2270 <_dl_init_all_dirs>
    0.00 :	  4469af:       callq  4126b0 <getenv>
    0.00 :	  4469b4:       test   %rax,%rax
    0.00 :	  4469b7:       mov    $0x4a8606,%edi
    0.00 :	  4469bc:       cmove  %rbx,%rax
    0.00 :	  4469c0:       cmpb   $0x0,(%rax)
    0.00 :	  4469c3:       sete   %al
    0.00 :	  4469c6:       movzbl %al,%eax
    0.00 :	  4469c9:       mov    %eax,0x28b861(%rip)        # 6d2230 <_dl_lazy>
    0.00 :	  4469cf:       callq  4126b0 <getenv>
    0.00 :	  4469d4:       test   %rax,%rax
    0.00 :	  4469d7:       mov    $0x4a8612,%edi
    0.00 :	  4469dc:       cmove  %rbx,%rax
    0.00 :	  4469e0:       cmpb   $0x0,(%rax)
    0.00 :	  4469e3:       setne  %al
    0.00 :	  4469e6:       movzbl %al,%eax
    0.00 :	  4469e9:       mov    %eax,0x28b829(%rip)        # 6d2218 <_dl_bind_not>
    0.00 :	  4469ef:       callq  4126b0 <getenv>
    0.00 :	  4469f4:       test   %rax,%rax
    0.00 :	  4469f7:       mov    $0x4a8622,%edi
    0.00 :	  4469fc:       cmove  %rbx,%rax
    0.00 :	  446a00:       cmpb   $0x0,(%rax)
    0.00 :	  446a03:       sete   %al
    0.00 :	  446a06:       movzbl %al,%eax
    0.00 :	  446a09:       mov    %eax,0x28b855(%rip)        # 6d2264 <_dl_dynamic_weak>
    0.00 :	  446a0f:       callq  4126b0 <getenv>
    0.00 :	  446a14:       test   %rax,%rax
    0.00 :	  446a17:       mov    %rax,0x28b7ca(%rip)        # 6d21e8 <_dl_profile_output>
    0.00 :	  446a1e:       mov    0x286574(%rip),%edx        # 6ccf98 <__libc_enable_secure>
    0.00 :	  446a24:       je     446a2b <_dl_non_dynamic_init+0x57b>
    0.00 :	  446a26:       cmpb   $0x0,(%rax)
    0.00 :	  446a29:       jne    446a42 <_dl_non_dynamic_init+0x592>
    0.00 :	  446a2b:       cmp    $0x1,%edx
    0.00 :	  446a2e:       sbb    %eax,%eax
    0.00 :	  446a30:       not    %eax
    0.00 :	  446a32:       and    $0x9,%eax
    0.00 :	  446a35:       add    $0x4a8238,%rax
    0.00 :	  446a3b:       mov    %rax,0x28b7a6(%rip)        # 6d21e8 <_dl_profile_output>
    0.00 :	  446a42:       test   %edx,%edx
    0.00 :	  446a44:       jne    446d60 <_dl_non_dynamic_init+0x8b0>
    0.00 :	  446a4a:       mov    0x28b7d7(%rip),%rax        # 6d2228 <_dl_platform>
    0.00 :	  446a51:       test   %rax,%rax
    0.00 :	  446a54:       je     446a66 <_dl_non_dynamic_init+0x5b6>
    0.00 :	  446a56:       cmpb   $0x0,(%rax)
    0.00 :	  446a59:       jne    446a66 <_dl_non_dynamic_init+0x5b6>
    0.00 :	  446a5b:       movq   $0x0,0x28b7c2(%rip)        # 6d2228 <_dl_platform>
    0.00 :	  446a66:       xor    %eax,%eax
    0.00 :	  446a68:       cpuid  
    0.00 :	  446a6a:       cmp    $0x756e6547,%ebx
    0.00 :	  446a70:       mov    %eax,0x28ac0e(%rip)        # 6d1684 <_dl_x86_cpu_features+0x4>
    0.00 :	  446a76:       sete   %sil
    0.00 :	  446a7a:       cmp    $0x6c65746e,%ecx
    0.00 :	  446a80:       sete   %al
    0.00 :	  446a83:       and    %esi,%eax
    0.00 :	  446a85:       cmp    $0x49656e69,%edx
    0.00 :	  446a8b:       sete   %sil
    0.00 :	  446a8f:       and    %al,%sil
    0.00 :	  446a92:       jne    446e4a <_dl_non_dynamic_init+0x99a>
    0.00 :	  446a98:       cmp    $0x68747541,%ebx
    0.00 :	  446a9e:       sete   %sil
    0.00 :	  446aa2:       cmp    $0x444d4163,%ecx
    0.00 :	  446aa8:       sete   %al
    0.00 :	  446aab:       and    %esi,%eax
    0.00 :	  446aad:       cmp    $0x69746e65,%edx
    0.00 :	  446ab3:       sete   %sil
    0.00 :	  446ab7:       and    %al,%sil
    0.00 :	  446aba:       jne    446eb1 <_dl_non_dynamic_init+0xa01>
    0.00 :	  446ac0:       mov    0x28abc9(%rip),%r8d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  446ac7:       xor    %r10d,%r10d
    0.00 :	  446aca:       xor    %edi,%edi
    0.00 :	  446acc:       xor    %r9d,%r9d
    0.00 :	  446acf:       mov    $0x3,%r11d
    0.00 :	  446ad5:       mov    0x28abb9(%rip),%edx        # 6d1694 <_dl_x86_cpu_features+0x14>
    0.00 :	  446adb:       test   $0x1,%dh
    0.00 :	  446ade:       je     446aea <_dl_non_dynamic_init+0x63a>
    0.00 :	  446ae0:       orl    $0x4000,0x28abd6(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  446aea:       and    $0x80,%dh
    0.00 :	  446aed:       je     446af9 <_dl_non_dynamic_init+0x649>
    0.00 :	  446aef:       orl    $0x8000,0x28abc7(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  446af9:       cmpl   $0x6,0x28ab84(%rip)        # 6d1684 <_dl_x86_cpu_features+0x4>
    0.00 :	  446b00:       jle    446b23 <_dl_non_dynamic_init+0x673>
    0.00 :	  446b02:       mov    $0x7,%eax
    0.00 :	  446b07:       xor    %ecx,%ecx
    0.00 :	  446b09:       cpuid  
    0.00 :	  446b0b:       mov    %eax,0x28ab87(%rip)        # 6d1698 <_dl_x86_cpu_features+0x18>
    0.00 :	  446b11:       mov    %ebx,0x28ab85(%rip)        # 6d169c <_dl_x86_cpu_features+0x1c>
    0.00 :	  446b17:       mov    %ecx,0x28ab83(%rip)        # 6d16a0 <_dl_x86_cpu_features+0x20>
    0.00 :	  446b1d:       mov    %edx,0x28ab81(%rip)        # 6d16a4 <_dl_x86_cpu_features+0x24>
    0.00 :	  446b23:       test   $0x8000000,%r8d
    0.00 :	  446b2a:       jne    446ce0 <_dl_non_dynamic_init+0x830>
    0.00 :	  446b30:       test   %sil,%sil
    0.00 :	  446b33:       jne    446e00 <_dl_non_dynamic_init+0x950>
    0.00 :	  446b39:       mov    %edi,0x28ab7d(%rip)        # 6d16bc <_dl_x86_cpu_features+0x3c>
    0.00 :	  446b3f:       mov    $0x4a8652,%edi
    0.00 :	  446b44:       mov    %r9d,0x28ab6d(%rip)        # 6d16b8 <_dl_x86_cpu_features+0x38>
    0.00 :	  446b4b:       mov    %r11d,0x28ab2e(%rip)        # 6d1680 <_dl_x86_cpu_features>
    0.00 :	  446b52:       callq  4126b0 <getenv>
    0.00 :	  446b57:       test   %rax,%rax
    0.00 :	  446b5a:       mov    %rax,%rbx
    0.00 :	  446b5d:       je     446ba5 <_dl_non_dynamic_init+0x6f5>
    0.00 :	  446b5f:       mov    $0x10,%r12d
    0.00 :	  446b65:       xor    %ebp,%ebp
    0.00 :	  446b67:       xor    %r13d,%r13d
    0.00 :	  446b6a:       lea    0x8(%rsp),%rsi
    0.00 :	  446b6f:       xor    %ecx,%ecx
    0.00 :	  446b71:       xor    %edx,%edx
    0.00 :	  446b73:       mov    %rbx,%rdi
    0.00 :	  446b76:       callq  412b10 <__strtoul_internal>
    0.00 :	  446b7b:       cmp    $0xfe,%rax
    0.00 :	  446b81:       ja     446ba5 <_dl_non_dynamic_init+0x6f5>
    0.00 :	  446b83:       mov    0x8(%rsp),%rdx
    0.00 :	  446b88:       cmp    %rbx,%rdx
    0.00 :	  446b8b:       je     446ba5 <_dl_non_dynamic_init+0x6f5>
    0.00 :	  446b8d:       cmp    $0x2,%r13
    0.00 :	  446b91:       jne    446c68 <_dl_non_dynamic_init+0x7b8>
    0.00 :	  446b97:       or     %rax,%rbp
    0.00 :	  446b9a:       test   %rbp,%rbp
    0.00 :	  446b9d:       je     446ba5 <_dl_non_dynamic_init+0x6f5>
    0.00 :	  446b9f:       mov    %ebp,0x28b6fb(%rip)        # 6d22a0 <_dl_osversion>
    0.00 :	  446ba5:       mov    0x28b67c(%rip),%rdi        # 6d2228 <_dl_platform>
    0.00 :	  446bac:       test   %rdi,%rdi
    0.00 :	  446baf:       je     446bbd <_dl_non_dynamic_init+0x70d>
    0.00 :	  446bb1:       callq  426ba0 <strlen>
    0.00 :	  446bb6:       mov    %rax,0x28b633(%rip)        # 6d21f0 <_dl_platformlen>
    0.00 :	  446bbd:       mov    0x28b684(%rip),%rcx        # 6d2248 <_dl_phdr>
    0.00 :	  446bc4:       test   %rcx,%rcx
    0.00 :	  446bc7:       je     446c0d <_dl_non_dynamic_init+0x75d>
    0.00 :	  446bc9:       mov    0x28b6b0(%rip),%rsi        # 6d2280 <_dl_phnum>
    0.00 :	  446bd0:       test   %rsi,%rsi
    0.00 :	  446bd3:       je     446c0d <_dl_non_dynamic_init+0x75d>
    0.00 :	  446bd5:       xor    %edx,%edx
    0.00 :	  446bd7:       cmpl   $0x6474e551,(%rcx)
    0.00 :	  446bdd:       lea    0x38(%rcx),%rax
    0.00 :	  446be1:       jne    446c04 <_dl_non_dynamic_init+0x754>
    0.00 :	  446be3:       jmpq   446de8 <_dl_non_dynamic_init+0x938>
    0.00 :	  446be8:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446bf0:       mov    %rax,%rcx
    0.00 :	  446bf3:       add    $0x38,%rax
    0.00 :	  446bf7:       cmpl   $0x6474e551,-0x38(%rax)
    0.00 :	  446bfe:       je     446de8 <_dl_non_dynamic_init+0x938>
    0.00 :	  446c04:       add    $0x1,%rdx
    0.00 :	  446c08:       cmp    %rsi,%rdx
    0.00 :	  446c0b:       jne    446bf0 <_dl_non_dynamic_init+0x740>
    0.00 :	  446c0d:       add    $0x18,%rsp
    0.00 :	  446c11:       pop    %rbx
    0.00 :	  446c12:       pop    %rbp
    0.00 :	  446c13:       pop    %r12
    0.00 :	  446c15:       pop    %r13
    0.00 :	  446c17:       retq   
    0.00 :	  446c18:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446c20:       cmpq   $0x0,(%rbx)
    0.00 :	  446c24:       mov    (%rax),%rdx
    0.00 :	  446c27:       jne    446c2c <_dl_non_dynamic_init+0x77c>
    0.00 :	  446c29:       mov    %rdx,(%rbx)
    0.00 :	  446c2c:       add    0x18(%rax),%rdx
    0.00 :	  446c30:       cmp    0x348(%rbx),%rdx
    0.00 :	  446c37:       jb     446c40 <_dl_non_dynamic_init+0x790>
    0.00 :	  446c39:       mov    %rdx,0x348(%rbx)
    0.00 :	  446c40:       testb  $0x1,-0xc(%rax)
    0.00 :	  446c44:       je     446592 <_dl_non_dynamic_init+0xe2>
    0.00 :	  446c4a:       cmp    0x350(%rbx),%rdx
    0.00 :	  446c51:       jb     446592 <_dl_non_dynamic_init+0xe2>
    0.00 :	  446c57:       mov    %rdx,0x350(%rbx)
    0.00 :	  446c5e:       jmpq   446592 <_dl_non_dynamic_init+0xe2>
    0.00 :	  446c63:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446c68:       movzbl (%rdx),%esi
    0.00 :	  446c6b:       cmp    $0x2e,%sil
    0.00 :	  446c6f:       je     446c7a <_dl_non_dynamic_init+0x7ca>
    0.00 :	  446c71:       test   %sil,%sil
    0.00 :	  446c74:       jne    446ba5 <_dl_non_dynamic_init+0x6f5>
    0.00 :	  446c7a:       mov    %r12d,%ecx
    0.00 :	  446c7d:       shl    %cl,%rax
    0.00 :	  446c80:       or     %rax,%rbp
    0.00 :	  446c83:       test   %sil,%sil
    0.00 :	  446c86:       je     446b9a <_dl_non_dynamic_init+0x6ea>
    0.00 :	  446c8c:       sub    $0x8,%r12d
    0.00 :	  446c90:       add    $0x1,%r13
    0.00 :	  446c94:       lea    0x1(%rdx),%rbx
    0.00 :	  446c98:       cmp    $0xfffffff8,%r12d
    0.00 :	  446c9c:       jne    446b6a <_dl_non_dynamic_init+0x6ba>
    0.00 :	  446ca2:       jmpq   446b9a <_dl_non_dynamic_init+0x6ea>
    0.00 :	  446ca7:       nopw   0x0(%rax,%rax,1)
    0.00 :	  446cb0:       mov    %r11,%rsi
    0.00 :	  446cb3:       sub    %rax,%rsi
    0.00 :	  446cb6:       cmp    $0xb,%rsi
    0.00 :	  446cba:       jbe    446db0 <_dl_non_dynamic_init+0x900>
    0.00 :	  446cc0:       mov    %r12,%rsi
    0.00 :	  446cc3:       sub    %rax,%rsi
    0.00 :	  446cc6:       cmp    $0xa,%rsi
    0.00 :	  446cca:       ja     44664d <_dl_non_dynamic_init+0x19d>
    0.00 :	  446cd0:       neg    %rax
    0.00 :	  446cd3:       lea    (%rdi,%rax,8),%rax
    0.00 :	  446cd7:       mov    %rdx,(%rax,%r13,1)
    0.00 :	  446cdb:       jmpq   44664d <_dl_non_dynamic_init+0x19d>
    0.00 :	  446ce0:       xor    %ecx,%ecx
    0.00 :	  446ce2:       xgetbv 
    0.00 :	  446ce5:       mov    %eax,%edx
    0.00 :	  446ce7:       and    $0x6,%edx
    0.00 :	  446cea:       cmp    $0x6,%edx
    0.00 :	  446ced:       jne    446b30 <_dl_non_dynamic_init+0x680>
    0.00 :	  446cf3:       test   $0x10000000,%r8d
    0.00 :	  446cfa:       je     446d03 <_dl_non_dynamic_init+0x853>
    0.00 :	  446cfc:       orl    $0x40,0x28a9bd(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  446d03:       mov    0x28a993(%rip),%edx        # 6d169c <_dl_x86_cpu_features+0x1c>
    0.00 :	  446d09:       test   $0x20,%dl
    0.00 :	  446d0c:       je     446d18 <_dl_non_dynamic_init+0x868>
    0.00 :	  446d0e:       orl    $0xc00,0x28a9a8(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  446d18:       and    $0xe0,%eax
    0.00 :	  446d1d:       cmp    $0xe0,%eax
    0.00 :	  446d22:       je     447061 <_dl_non_dynamic_init+0xbb1>
    0.00 :	  446d28:       and    $0x1000,%r8d
    0.00 :	  446d2f:       je     446d3b <_dl_non_dynamic_init+0x88b>
    0.00 :	  446d31:       orl    $0x80,0x28a985(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  446d3b:       testb  $0x1,0x28a970(%rip)        # 6d16b2 <_dl_x86_cpu_features+0x32>
    0.00 :	  446d42:       je     446b30 <_dl_non_dynamic_init+0x680>
    0.00 :	  446d48:       orl    $0x100,0x28a96e(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  446d52:       jmpq   446b30 <_dl_non_dynamic_init+0x680>
    0.00 :	  446d57:       nopw   0x0(%rax,%rax,1)
    0.00 :	  446d60:       mov    $0x4a8480,%ebx
    0.00 :	  446d65:       nopl   (%rax)
    0.00 :	  446d68:       mov    %rbx,%rdi
    0.00 :	  446d6b:       callq  454d80 <__unsetenv>
    0.00 :	  446d70:       xor    %esi,%esi
    0.00 :	  446d72:       mov    %rbx,%rdi
    0.00 :	  446d75:       callq  42ff20 <__rawmemchr>
    0.00 :	  446d7a:       lea    0x1(%rax),%rbx
    0.00 :	  446d7e:       cmp    $0x4a859e,%rbx
    0.00 :	  446d85:       jb     446d68 <_dl_non_dynamic_init+0x8b8>
    0.00 :	  446d87:       xor    %esi,%esi
    0.00 :	  446d89:       mov    $0x4a8634,%edi
    0.00 :	  446d8e:       callq  46dfc0 <__access>
    0.00 :	  446d93:       test   %eax,%eax
    0.00 :	  446d95:       je     446a4a <_dl_non_dynamic_init+0x59a>
    0.00 :	  446d9b:       mov    $0x4a8644,%edi
    0.00 :	  446da0:       callq  454d80 <__unsetenv>
    0.00 :	  446da5:       jmpq   446a4a <_dl_non_dynamic_init+0x59a>
    0.00 :	  446daa:       nopw   0x0(%rax,%rax,1)
    0.00 :	  446db0:       neg    %rax
    0.00 :	  446db3:       lea    (%rdi,%rax,8),%rax
    0.00 :	  446db7:       mov    %rdx,(%rax,%rbp,1)
    0.00 :	  446dbb:       jmpq   44664d <_dl_non_dynamic_init+0x19d>
    0.00 :	  446dc0:       mov    0x170(%rbx),%rax
    0.00 :	  446dc7:       mov    %rax,0x100(%rbx)
    0.00 :	  446dce:       jmpq   4468ca <_dl_non_dynamic_init+0x41a>
    0.00 :	  446dd3:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446dd8:       mov    %rdx,0x100(%rbx)
    0.00 :	  446ddf:       jmpq   44689d <_dl_non_dynamic_init+0x3ed>
    0.00 :	  446de4:       nopl   0x0(%rax)
    0.00 :	  446de8:       mov    0x4(%rcx),%eax
    0.00 :	  446deb:       mov    %eax,0x28937f(%rip)        # 6d0170 <_dl_stack_flags>
    0.00 :	  446df1:       add    $0x18,%rsp
    0.00 :	  446df5:       pop    %rbx
    0.00 :	  446df6:       pop    %rbp
    0.00 :	  446df7:       pop    %r12
    0.00 :	  446df9:       pop    %r13
    0.00 :	  446dfb:       retq   
    0.00 :	  446dfc:       nopl   0x0(%rax)
    0.00 :	  446e00:       cmp    $0x3f,%edi
    0.00 :	  446e03:       je     447052 <_dl_non_dynamic_init+0xba2>
    0.00 :	  446e09:       cmp    $0x3c,%edi
    0.00 :	  446e0c:       je     44708d <_dl_non_dynamic_init+0xbdd>
    0.00 :	  446e12:       cmp    $0x45,%edi
    0.00 :	  446e15:       je     446e3e <_dl_non_dynamic_init+0x98e>
    0.00 :	  446e17:       cmp    $0x46,%edi
    0.00 :	  446e1a:       je     446e3e <_dl_non_dynamic_init+0x98e>
    0.00 :	  446e1c:       cmp    $0x3d,%edi
    0.00 :	  446e1f:       jne    447197 <_dl_non_dynamic_init+0xce7>
    0.00 :	  446e25:       cmp    $0x4,%r10d
    0.00 :	  446e29:       ja     446b39 <_dl_non_dynamic_init+0x689>
    0.00 :	  446e2f:       andl   $0xfffff7ef,0x28a863(%rip)        # 6d169c <_dl_x86_cpu_features+0x1c>
    0.00 :	  446e39:       jmpq   446b39 <_dl_non_dynamic_init+0x689>
    0.00 :	  446e3e:       cmp    $0x1,%r10d
    0.00 :	  446e42:       ja     446b39 <_dl_non_dynamic_init+0x689>
    0.00 :	  446e48:       jmp    446e2f <_dl_non_dynamic_init+0x97f>
   20.00 :	  446e4a:       mov    $0x1,%eax
    0.00 :	  446e4f:       cpuid  
    0.00 :	  446e51:       mov    %eax,%r9d
    0.00 :	  446e54:       mov    %edx,0x28a83a(%rip)        # 6d1694 <_dl_x86_cpu_features+0x14>
    0.00 :	  446e5a:       mov    %eax,%edi
    0.00 :	  446e5c:       shr    $0x8,%r9d
    0.00 :	  446e60:       mov    %eax,%edx
    0.00 :	  446e62:       shr    $0x4,%edi
    0.00 :	  446e65:       shr    $0xc,%edx
    0.00 :	  446e68:       and    $0xf,%r9d
    0.00 :	  446e6c:       and    $0xf,%edi
    0.00 :	  446e6f:       and    $0xf0,%edx
    0.00 :	  446e75:       cmp    $0xf,%r9d
    0.00 :	  446e79:       mov    %ebx,0x28a80d(%rip)        # 6d168c <_dl_x86_cpu_features+0xc>
    0.00 :	  446e7f:       mov    %ecx,0x28a80b(%rip)        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  446e85:       mov    %eax,0x28a7fd(%rip)        # 6d1688 <_dl_x86_cpu_features+0x8>
    0.00 :	  446e8b:       je     446fbe <_dl_non_dynamic_init+0xb0e>
    0.00 :	  446e91:       and    $0xf,%eax
    0.00 :	  446e94:       cmp    $0x6,%r9d
    0.00 :	  446e98:       mov    %eax,%r10d
    0.00 :	  446e9b:       je     44709c <_dl_non_dynamic_init+0xbec>
    0.00 :	  446ea1:       xor    %esi,%esi
    0.00 :	  446ea3:       mov    $0x1,%r11d
    0.00 :	  446ea9:       mov    %ecx,%r8d
    0.00 :	  446eac:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  446eb1:       mov    $0x1,%eax
    0.00 :	  446eb6:       cpuid  
    0.00 :	  446eb8:       mov    %eax,%r9d
    0.00 :	  446ebb:       mov    %eax,%edi
    0.00 :	  446ebd:       mov    %ecx,%r8d
    0.00 :	  446ec0:       shr    $0x8,%r9d
    0.00 :	  446ec4:       shr    $0x4,%edi
    0.00 :	  446ec7:       mov    %ebx,0x28a7bf(%rip)        # 6d168c <_dl_x86_cpu_features+0xc>
    0.00 :	  446ecd:       and    $0xf,%r9d
    0.00 :	  446ed1:       and    $0xf,%edi
    0.00 :	  446ed4:       mov    %ecx,0x28a7b6(%rip)        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  446eda:       cmp    $0xf,%r9d
    0.00 :	  446ede:       mov    %edx,0x28a7b0(%rip)        # 6d1694 <_dl_x86_cpu_features+0x14>
    0.00 :	  446ee4:       mov    %eax,0x28a79e(%rip)        # 6d1688 <_dl_x86_cpu_features+0x8>
    0.00 :	  446eea:       je     446fe5 <_dl_non_dynamic_init+0xb35>
    0.00 :	  446ef0:       and    $0xf,%eax
    0.00 :	  446ef3:       mov    %eax,%r10d
    0.00 :	  446ef6:       mov    $0x80000000,%eax
    0.00 :	  446efb:       cpuid  
    0.00 :	  446efd:       cmp    $0x80000000,%eax
    0.00 :	  446f02:       ja     447015 <_dl_non_dynamic_init+0xb65>
    0.00 :	  446f08:       xor    %esi,%esi
    0.00 :	  446f0a:       mov    $0x2,%r11d
    0.00 :	  446f10:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  446f15:       and    $0xfffff716,%esi
    0.00 :	  446f1b:       je     4468c2 <_dl_non_dynamic_init+0x412>
    0.00 :	  446f21:       xor    %eax,%eax
    0.00 :	  446f23:       mov    $0x4a86c8,%edi
    0.00 :	  446f28:       callq  476f50 <_dl_debug_printf>
    0.00 :	  446f2d:       mov    0x3d4(%rbx),%eax
    0.00 :	  446f33:       jmpq   4468c2 <_dl_non_dynamic_init+0x412>
    0.00 :	  446f38:       mov    %rax,%r8
    0.00 :	  446f3b:       jmpq   44680a <_dl_non_dynamic_init+0x35a>
    0.00 :	  446f40:       mov    %rax,%r8
    0.00 :	  446f43:       mov    %rdx,%rax
    0.00 :	  446f46:       jmpq   4467d7 <_dl_non_dynamic_init+0x327>
    0.00 :	  446f4b:       mov    %rax,%r8
    0.00 :	  446f4e:       mov    %rdx,%rax
    0.00 :	  446f51:       mov    %rdi,%rdx
    0.00 :	  446f54:       jmpq   4467a4 <_dl_non_dynamic_init+0x2f4>
    0.00 :	  446f59:       mov    %rax,%r8
    0.00 :	  446f5c:       mov    %rdx,%rax
    0.00 :	  446f5f:       mov    %rdi,%rdx
    0.00 :	  446f62:       mov    %r9,%rdi
    0.00 :	  446f65:       jmpq   446777 <_dl_non_dynamic_init+0x2c7>
    0.00 :	  446f6a:       mov    %rax,%r8
    0.00 :	  446f6d:       mov    %rdx,%rax
    0.00 :	  446f70:       mov    %rdi,%rdx
    0.00 :	  446f73:       mov    %r9,%rdi
    0.00 :	  446f76:       mov    %r10,%r9
    0.00 :	  446f79:       jmpq   446747 <_dl_non_dynamic_init+0x297>
    0.00 :	  446f7e:       mov    %rax,%r8
    0.00 :	  446f81:       mov    %rdx,%rax
    0.00 :	  446f84:       mov    %rdi,%rdx
    0.00 :	  446f87:       mov    %r9,%rdi
    0.00 :	  446f8a:       mov    %r10,%r9
    0.00 :	  446f8d:       mov    %r11,%r10
    0.00 :	  446f90:       jmpq   44671a <_dl_non_dynamic_init+0x26a>
    0.00 :	  446f95:       mov    $0x60,%r8d
    0.00 :	  446f9b:       mov    $0x50,%eax
    0.00 :	  446fa0:       mov    $0x40,%edx
    0.00 :	  446fa5:       mov    $0x30,%edi
    0.00 :	  446faa:       mov    $0x20,%r9d
    0.00 :	  446fb0:       mov    $0x10,%r10d
    0.00 :	  446fb6:       xor    %r11d,%r11d
    0.00 :	  446fb9:       jmpq   4466ed <_dl_non_dynamic_init+0x23d>
    0.00 :	  446fbe:       mov    %eax,%r9d
    0.00 :	  446fc1:       and    $0xf,%eax
    0.00 :	  446fc4:       add    %edx,%edi
    0.00 :	  446fc6:       shr    $0x14,%r9d
    0.00 :	  446fca:       mov    %eax,%r10d
    0.00 :	  446fcd:       xor    %esi,%esi
    0.00 :	  446fcf:       movzbl %r9b,%r9d
    0.00 :	  446fd3:       mov    $0x1,%r11d
    0.00 :	  446fd9:       mov    %ecx,%r8d
    0.00 :	  446fdc:       add    $0xf,%r9d
    0.00 :	  446fe0:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  446fe5:       mov    %eax,%r9d
    0.00 :	  446fe8:       mov    %eax,%edx
    0.00 :	  446fea:       and    $0xf,%eax
    0.00 :	  446fed:       shr    $0x14,%r9d
    0.00 :	  446ff1:       shr    $0xc,%edx
    0.00 :	  446ff4:       mov    %eax,%r10d
    0.00 :	  446ff7:       and    $0xf0,%edx
    0.00 :	  446ffd:       movzbl %r9b,%r9d
    0.00 :	  447001:       mov    $0x80000000,%eax
    0.00 :	  447006:       add    %edx,%edi
    0.00 :	  447008:       add    $0xf,%r9d
    0.00 :	  44700c:       cpuid  
    0.00 :	  44700e:       cmp    $0x80000000,%eax
    0.00 :	  447013:       jbe    447034 <_dl_non_dynamic_init+0xb84>
    0.00 :	  447015:       mov    $0x80000001,%eax
    0.00 :	  44701a:       cpuid  
    0.00 :	  44701c:       mov    %eax,0x28a686(%rip)        # 6d16a8 <_dl_x86_cpu_features+0x28>
    0.00 :	  447022:       mov    %ebx,0x28a684(%rip)        # 6d16ac <_dl_x86_cpu_features+0x2c>
    0.00 :	  447028:       mov    %ecx,0x28a682(%rip)        # 6d16b0 <_dl_x86_cpu_features+0x30>
    0.00 :	  44702e:       mov    %edx,0x28a680(%rip)        # 6d16b4 <_dl_x86_cpu_features+0x34>
    0.00 :	  447034:       cmp    $0x15,%r9d
    0.00 :	  447038:       je     447130 <_dl_non_dynamic_init+0xc80>
    0.00 :	  44703e:       xor    %esi,%esi
    0.00 :	  447040:       mov    $0x2,%r11d
    0.00 :	  447046:       mov    0x28a643(%rip),%r8d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  44704d:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  447052:       cmp    $0x2,%r10d
    0.00 :	  447056:       jbe    446e2f <_dl_non_dynamic_init+0x97f>
    0.00 :	  44705c:       jmpq   446b39 <_dl_non_dynamic_init+0x689>
    0.00 :	  447061:       test   $0x10000,%edx
    0.00 :	  447067:       je     446d28 <_dl_non_dynamic_init+0x878>
    0.00 :	  44706d:       and    $0x20000,%edx
    0.00 :	  447073:       mov    0x28a647(%rip),%eax        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  447079:       jne    447157 <_dl_non_dynamic_init+0xca7>
    0.00 :	  44707f:       or     $0x10,%ah
    0.00 :	  447082:       mov    %eax,0x28a638(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  447088:       jmpq   446d28 <_dl_non_dynamic_init+0x878>
    0.00 :	  44708d:       cmp    $0x3,%r10d
    0.00 :	  447091:       jbe    446e2f <_dl_non_dynamic_init+0x97f>
    0.00 :	  447097:       jmpq   446b39 <_dl_non_dynamic_init+0x689>
    0.00 :	  44709c:       add    %edx,%edi
    0.00 :	  44709e:       lea    -0x1a(%rdi),%eax
    0.00 :	  4470a1:       cmp    $0x43,%eax
    0.00 :	  4470a4:       ja     44710e <_dl_non_dynamic_init+0xc5e>
    0.00 :	  4470a6:       jmpq   *0x4a8250(,%rax,8)
    0.00 :	  4470ad:       mov    0x28a60d(%rip),%eax        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  4470b3:       mov    %ecx,%r8d
    0.00 :	  4470b6:       or     $0x20000,%eax
    0.00 :	  4470bb:       or     $0x230,%eax
    0.00 :	  4470c0:       mov    $0x1,%r11d
    0.00 :	  4470c6:       mov    %eax,0x28a5f4(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  4470cc:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  4470d1:       mov    0x28a5e9(%rip),%eax        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  4470d7:       mov    %ecx,%r8d
    0.00 :	  4470da:       jmp    4470bb <_dl_non_dynamic_init+0xc0b>
    0.00 :	  4470dc:       orl    $0x4,0x28a5dd(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  4470e3:       mov    $0x1,%r11d
    0.00 :	  4470e9:       mov    0x28a5a0(%rip),%r8d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  4470f0:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  4470f5:       mov    0x28a594(%rip),%r8d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  4470fc:       orl    $0x33,0x28a5bd(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
   20.00 :	  447103:       mov    $0x1,%r11d
    0.00 :	  447109:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  44710e:       mov    0x28a57b(%rip),%r8d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  447115:       mov    $0x1,%r11d
    0.00 :	  44711b:       test   $0x10000000,%r8d
    0.00 :	  447122:       je     446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  447128:       jmp    4470fc <_dl_non_dynamic_init+0xc4c>
    0.00 :	  44712a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  447130:       lea    -0x60(%rdi),%eax
    0.00 :	  447133:       cmp    $0x1f,%eax
    0.00 :	  447136:       ja     44703e <_dl_non_dynamic_init+0xb8e>
    0.00 :	  44713c:       orl    $0x10,0x28a57d(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  447143:       xor    %esi,%esi
    0.00 :	  447145:       mov    $0x2,%r11d
    0.00 :	  44714b:       mov    0x28a53e(%rip),%r8d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  447152:       jmpq   446ad5 <_dl_non_dynamic_init+0x625>
    0.00 :	  447157:       or     $0x30,%ah
    0.00 :	  44715a:       mov    %eax,0x28a560(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  447160:       jmpq   446d28 <_dl_non_dynamic_init+0x878>
    0.00 :	  447165:       mov    $0x4a8708,%ecx
    0.00 :	  44716a:       mov    $0x3d,%edx
    0.00 :	  44716f:       mov    $0x4a85a6,%esi
    0.00 :	  447174:       mov    $0x4a85b3,%edi
    0.00 :	  447179:       callq  405610 <__assert_fail>
    0.00 :	  44717e:       mov    $0x4a8720,%ecx
    0.00 :	  447183:       mov    $0x79,%edx
    0.00 :	  447188:       mov    $0x4a85c8,%esi
    0.00 :	  44718d:       mov    $0x4a8668,%edi
    0.00 :	  447192:       callq  405610 <__assert_fail>
    0.00 :	  447197:       cmp    $0x47,%edi
    0.00 :	  44719a:       je     446e3e <_dl_non_dynamic_init+0x98e>
    0.00 :	  4471a0:       cmp    $0x2,%r10d
    0.00 :	  4471a4:       ja     446b39 <_dl_non_dynamic_init+0x689>
    0.00 :	  4471aa:       cmp    $0x56,%edi
    0.00 :	  4471ad:       je     446e2f <_dl_non_dynamic_init+0x97f>
    0.00 :	  4471b3:       jmpq   446b39 <_dl_non_dynamic_init+0x689>
    0.00 :	  4471b8:       mov    $0x2,%edi
    0.00 :	  4471bd:       mov    $0x4a85db,%esi
    0.00 :	  4471c2:       xor    %eax,%eax
    0.00 :	  4471c4:       callq  4770b0 <_dl_dprintf>
    0.00 :	  4471c9:       mov    $0x7f,%edi
    0.00 :	  4471ce:       callq  441dd0 <_exit>
    0.00 :	  4471d3:       mov    $0x4a8720,%ecx
    0.00 :	  4471d8:       mov    $0x81,%edx
    0.00 :	  4471dd:       mov    $0x4a85c8,%esi
    0.00 :	  4471e2:       mov    $0x4a8690,%edi
    0.00 :	  4471e7:       callq  405610 <__assert_fail>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041ed10 <_int_malloc>:
         :	_int_malloc():
    0.00 :	  41ed10:       cmp    $0xffffffffffffffbf,%rsi
    0.00 :	  41ed14:       ja     41f5b4 <_int_malloc+0x8a4>
    0.00 :	  41ed1a:       mov    %rsi,%rax
    0.00 :	  41ed1d:       push   %r15
    0.00 :	  41ed1f:       push   %r14
    0.00 :	  41ed21:       add    $0x17,%rax
    0.00 :	  41ed25:       push   %r13
    0.00 :	  41ed27:       push   %r12
    0.00 :	  41ed29:       push   %rbp
    0.00 :	  41ed2a:       push   %rbx
    0.00 :	  41ed2b:       mov    %rax,%r12
    0.00 :	  41ed2e:       and    $0xfffffffffffffff0,%r12
    0.00 :	  41ed32:       mov    %rdi,%rbp
    0.00 :	  41ed35:       sub    $0x98,%rsp
    0.00 :	  41ed3c:       cmp    $0x20,%rax
    0.00 :	  41ed40:       mov    $0x20,%eax
    0.00 :	  41ed45:       cmovb  %rax,%r12
    0.00 :	  41ed49:       test   %rdi,%rdi
    0.00 :	  41ed4c:       mov    %rsi,0x8(%rsp)
    0.00 :	  41ed51:       je     41f5c8 <_int_malloc+0x8b8>
    0.00 :	  41ed57:       cmp    0x2b28da(%rip),%r12        # 6d1638 <global_max_fast>
    0.00 :	  41ed5e:       ja     41edd0 <_int_malloc+0xc0>
    0.00 :	  41ed60:       mov    %r12d,%edi
    0.00 :	  41ed63:       shr    $0x4,%edi
    0.00 :	  41ed66:       lea    -0x2(%rdi),%eax
    0.00 :	  41ed69:       mov    0x8(%rbp,%rax,8),%rcx
    0.00 :	  41ed6e:       lea    0x0(%rbp,%rax,8),%rsi
    0.00 :	  41ed73:       mov    %rax,%rdi
    0.00 :	  41ed76:       lea    0x8(%rsi),%rdx
    0.00 :	  41ed7a:       test   %rcx,%rcx
    0.00 :	  41ed7d:       je     41edd0 <_int_malloc+0xc0>
    0.00 :	  41ed7f:       mov    0x10(%rcx),%r8
    0.00 :	  41ed83:       mov    %rcx,%rax
    0.00 :	  41ed86:       cmpl   $0x0,%fs:0x18
    0.00 :	  41ed8f:       je     41ed92 <_int_malloc+0x82>
    0.00 :	  41ed91:       lock cmpxchg %r8,0x8(%rsi)
    0.00 :	  41ed97:       cmp    %rax,%rcx
    0.00 :	  41ed9a:       mov    %rax,%r10
    0.00 :	  41ed9d:       jne    41edcb <_int_malloc+0xbb>
    0.00 :	  41ed9f:       jmpq   41f006 <_int_malloc+0x2f6>
    0.00 :	  41eda4:       nopl   0x0(%rax)
    0.00 :	  41eda8:       mov    0x10(%r10),%rcx
    0.00 :	  41edac:       mov    %r10,%rax
    0.00 :	  41edaf:       cmpl   $0x0,%fs:0x18
    0.00 :	  41edb8:       je     41edbb <_int_malloc+0xab>
    0.00 :	  41edba:       lock cmpxchg %rcx,(%rdx)
    0.00 :	  41edbf:       cmp    %r10,%rax
    0.00 :	  41edc2:       je     41f006 <_int_malloc+0x2f6>
    0.00 :	  41edc8:       mov    %rax,%r10
    0.00 :	  41edcb:       test   %r10,%r10
    0.00 :	  41edce:       jne    41eda8 <_int_malloc+0x98>
   20.00 :	  41edd0:       cmp    $0x3ff,%r12
    0.00 :	  41edd7:       ja     41ee34 <_int_malloc+0x124>
    0.00 :	  41edd9:       mov    %r12d,%eax
    0.00 :	  41eddc:       shr    $0x4,%eax
    0.00 :	  41eddf:       mov    %eax,(%rsp)
    0.00 :	  41ede2:       lea    -0x2(%rax,%rax,1),%eax
    0.00 :	  41ede6:       lea    0x60(%rbp,%rax,8),%rax
    0.00 :	  41edeb:       lea    0x8(%rax),%rcx
    0.00 :	  41edef:       mov    0x8(%rcx),%r10
    0.00 :	  41edf3:       sub    $0x8,%rax
    0.00 :	  41edf7:       cmp    %r10,%rax
    0.00 :	  41edfa:       je     41ee6b <_int_malloc+0x15b>
    0.00 :	  41edfc:       test   %r10,%r10
    0.00 :	  41edff:       je     41ee63 <_int_malloc+0x153>
    0.00 :	  41ee01:       mov    0x18(%r10),%rdx
    0.00 :	  41ee05:       cmp    0x10(%rdx),%r10
    0.00 :	  41ee09:       jne    41f728 <_int_malloc+0xa18>
    0.00 :	  41ee0f:       orq    $0x1,0x8(%r10,%r12,1)
    0.00 :	  41ee15:       cmp    $0x6cf800,%rbp
    0.00 :	  41ee1c:       mov    %rdx,0x8(%rcx)
    0.00 :	  41ee20:       mov    %rax,0x10(%rdx)
    0.00 :	  41ee24:       je     41f018 <_int_malloc+0x308>
    0.00 :	  41ee2a:       orq    $0x4,0x8(%r10)
    0.00 :	  41ee2f:       jmpq   41f018 <_int_malloc+0x308>
    0.00 :	  41ee34:       mov    %r12,%r14
    0.00 :	  41ee37:       shr    $0x6,%r14
    0.00 :	  41ee3b:       cmp    $0x30,%r14
    0.00 :	  41ee3f:       jbe    41f588 <_int_malloc+0x878>
    0.00 :	  41ee45:       mov    %r12,%r14
    0.00 :	  41ee48:       shr    $0x9,%r14
    0.00 :	  41ee4c:       cmp    $0x14,%r14
    0.00 :	  41ee50:       ja     41f607 <_int_malloc+0x8f7>
    0.00 :	  41ee56:       lea    0x5b(%r14),%eax
    0.00 :	  41ee5a:       mov    %eax,(%rsp)
    0.00 :	  41ee5d:       testb  $0x1,0x4(%rbp)
    0.00 :	  41ee61:       jne    41ee6b <_int_malloc+0x15b>
    0.00 :	  41ee63:       mov    %rbp,%rdi
    0.00 :	  41ee66:       callq  41bed0 <malloc_consolidate>
    0.00 :	  41ee6b:       mov    %r12,%rcx
    0.00 :	  41ee6e:       mov    %r12,%rax
    0.00 :	  41ee71:       mov    %r12,%rdi
    0.00 :	  41ee74:       shr    $0xc,%rcx
    0.00 :	  41ee78:       shr    $0x6,%rax
    0.00 :	  41ee7c:       shr    $0x9,%rdi
    0.00 :	  41ee80:       mov    %rcx,0x48(%rsp)
    0.00 :	  41ee85:       add    $0x6e,%ecx
    0.00 :	  41ee88:       mov    %rax,0x30(%rsp)
    0.00 :	  41ee8d:       mov    %ecx,0x54(%rsp)
    0.00 :	  41ee91:       mov    %r12,%rcx
    0.00 :	  41ee94:       add    $0x30,%eax
    0.00 :	  41ee97:       shr    $0xf,%rcx
    0.00 :	  41ee9b:       mov    %rdi,0x40(%rsp)
    0.00 :	  41eea0:       mov    %eax,0x3c(%rsp)
    0.00 :	  41eea4:       add    $0x5b,%edi
    0.00 :	  41eea7:       mov    %rcx,0x58(%rsp)
    0.00 :	  41eeac:       mov    %r12d,%eax
    0.00 :	  41eeaf:       add    $0x77,%ecx
    0.00 :	  41eeb2:       shr    $0x4,%eax
    0.00 :	  41eeb5:       mov    %edi,0x50(%rsp)
    0.00 :	  41eeb9:       mov    %ecx,0x68(%rsp)
    0.00 :	  41eebd:       lea    0x70(%rsp),%rdi
    0.00 :	  41eec2:       mov    %r12,%rcx
    0.00 :	  41eec5:       shr    $0x12,%rcx
    0.00 :	  41eec9:       mov    %eax,0x38(%rsp)
    0.00 :	  41eecd:       mov    $0x1,%eax
    0.00 :	  41eed2:       mov    %rcx,0x60(%rsp)
    0.00 :	  41eed7:       sub    %rdi,%rax
    0.00 :	  41eeda:       add    $0x7c,%ecx
    0.00 :	  41eedd:       lea    0x58(%rbp),%r13
    0.00 :	  41eee1:       mov    %ecx,0x6c(%rsp)
    0.00 :	  41eee5:       mov    %rax,0x28(%rsp)
    0.00 :	  41eeea:       mov    $0x2710,%r15d
    0.00 :	  41eef0:       jmp    41ef3f <_int_malloc+0x22f>
    0.00 :	  41eef2:       nopw   0x0(%rax,%rax,1)
    0.00 :	  41eef8:       mov    %esi,%ecx
    0.00 :	  41eefa:       shr    $0x4,%ecx
    0.00 :	  41eefd:       lea    -0x2(%rcx,%rcx,1),%eax
    0.00 :	  41ef01:       cltq   
    0.00 :	  41ef03:       lea    0x60(%rbp,%rax,8),%rax
    0.00 :	  41ef08:       mov    0x8(%rax),%rdi
    0.00 :	  41ef0c:       lea    -0x8(%rax),%r8
    0.00 :	  41ef10:       mov    %ecx,%eax
    0.00 :	  41ef12:       mov    $0x1,%edx
    0.00 :	  41ef17:       sar    $0x5,%eax
    0.00 :	  41ef1a:       shl    %cl,%edx
    0.00 :	  41ef1c:       cltq   
    0.00 :	  41ef1e:       or     %edx,0x858(%rbp,%rax,4)
    0.00 :	  41ef25:       sub    $0x1,%r15d
    0.00 :	  41ef29:       mov    %r8,0x18(%rbx)
    0.00 :	  41ef2d:       mov    %rdi,0x10(%rbx)
    0.00 :	  41ef31:       mov    %rbx,0x18(%rdi)
    0.00 :	  41ef35:       mov    %rbx,0x10(%r8)
    0.00 :	  41ef39:       je     41f2d3 <_int_malloc+0x5c3>
   20.00 :	  41ef3f:       mov    0x70(%rbp),%rbx
    0.00 :	  41ef43:       cmp    %r13,%rbx
    0.00 :	  41ef46:       je     41f2d3 <_int_malloc+0x5c3>
    0.00 :	  41ef4c:       mov    0x8(%rbx),%rsi
    0.00 :	  41ef50:       mov    0x18(%rbx),%r14
    0.00 :	  41ef54:       cmp    $0x10,%rsi
    0.00 :	  41ef58:       jbe    41f0b0 <_int_malloc+0x3a0>
    0.00 :	  41ef5e:       cmp    0x880(%rbp),%rsi
    0.00 :	  41ef65:       ja     41f0b0 <_int_malloc+0x3a0>
    0.00 :	  41ef6b:       and    $0xfffffffffffffff8,%rsi
    0.00 :	  41ef6f:       cmp    $0x3ff,%r12
    0.00 :	  41ef76:       ja     41ef81 <_int_malloc+0x271>
    0.00 :	  41ef78:       cmp    %r13,%r14
    0.00 :	  41ef7b:       je     41f110 <_int_malloc+0x400>
    0.00 :	  41ef81:       cmp    %rsi,%r12
    0.00 :	  41ef84:       mov    %r14,0x70(%rbp)
    0.00 :	  41ef88:       mov    %r13,0x10(%r14)
    0.00 :	  41ef8c:       je     41f438 <_int_malloc+0x728>
    0.00 :	  41ef92:       cmp    $0x3ff,%rsi
    0.00 :	  41ef99:       jbe    41eef8 <_int_malloc+0x1e8>
    0.00 :	  41ef9f:       mov    %rsi,%rax
    0.00 :	  41efa2:       shr    $0x6,%rax
    0.00 :	  41efa6:       cmp    $0x30,%rax
    0.00 :	  41efaa:       ja     41f040 <_int_malloc+0x330>
    0.00 :	  41efb0:       lea    0x30(%rax),%ecx
    0.00 :	  41efb3:       lea    0x5e(%rax,%rax,1),%eax
    0.00 :	  41efb7:       cltq   
    0.00 :	  41efb9:       lea    0x60(%rbp,%rax,8),%rax
    0.00 :	  41efbe:       lea    -0x8(%rax),%rdi
    0.00 :	  41efc2:       lea    0x8(%rax),%rdx
    0.00 :	  41efc6:       mov    0x8(%rax),%rax
    0.00 :	  41efca:       cmp    %rax,%rdi
    0.00 :	  41efcd:       je     41f1b8 <_int_malloc+0x4a8>
    0.00 :	  41efd3:       mov    0x8(%rdx),%r8
    0.00 :	  41efd7:       or     $0x1,%rsi
    0.00 :	  41efdb:       mov    0x8(%r8),%rdx
    0.00 :	  41efdf:       test   $0x4,%dl
    0.00 :	  41efe2:       jne    41fa3a <_int_malloc+0xd2a>
    0.00 :	  41efe8:       cmp    %rdx,%rsi
    0.00 :	  41efeb:       jae    41f060 <_int_malloc+0x350>
    0.00 :	  41efed:       mov    0x28(%rax),%rdx
    0.00 :	  41eff1:       mov    %rax,0x20(%rbx)
    0.00 :	  41eff5:       mov    %rdx,0x28(%rbx)
    0.00 :	  41eff9:       mov    %rbx,0x20(%rdx)
    0.00 :	  41effd:       mov    %rbx,0x28(%rax)
    0.00 :	  41f001:       jmpq   41ef10 <_int_malloc+0x200>
    0.00 :	  41f006:       mov    0x8(%r10),%eax
    0.00 :	  41f00a:       shr    $0x4,%eax
    0.00 :	  41f00d:       sub    $0x2,%eax
    0.00 :	  41f010:       cmp    %eax,%edi
    0.00 :	  41f012:       jne    41f673 <_int_malloc+0x963>
    0.00 :	  41f018:       mov    0x2b2616(%rip),%eax        # 6d1634 <perturb_byte>
    0.00 :	  41f01e:       lea    0x10(%r10),%rcx
    0.00 :	  41f022:       test   %eax,%eax
    0.00 :	  41f024:       jne    41f19b <_int_malloc+0x48b>
    0.00 :	  41f02a:       add    $0x98,%rsp
    0.00 :	  41f031:       mov    %rcx,%rax
    0.00 :	  41f034:       pop    %rbx
    0.00 :	  41f035:       pop    %rbp
    0.00 :	  41f036:       pop    %r12
    0.00 :	  41f038:       pop    %r13
    0.00 :	  41f03a:       pop    %r14
    0.00 :	  41f03c:       pop    %r15
    0.00 :	  41f03e:       retq   
    0.00 :	  41f03f:       nop
    0.00 :	  41f040:       mov    %rsi,%rax
    0.00 :	  41f043:       shr    $0x9,%rax
    0.00 :	  41f047:       cmp    $0x14,%rax
    0.00 :	  41f04b:       ja     41f0e8 <_int_malloc+0x3d8>
    0.00 :	  41f051:       lea    0x5b(%rax),%ecx
    0.00 :	  41f054:       lea    0xb4(%rax,%rax,1),%eax
    0.00 :	  41f05b:       jmpq   41efb7 <_int_malloc+0x2a7>
    0.00 :	  41f060:       mov    0x8(%rax),%rdx
    0.00 :	  41f064:       test   $0x4,%dl
    0.00 :	  41f067:       je     41f081 <_int_malloc+0x371>
    0.00 :	  41f069:       jmpq   41fa53 <_int_malloc+0xd43>
    0.00 :	  41f06e:       xchg   %ax,%ax
    0.00 :	  41f070:       mov    0x20(%rax),%rax
    0.00 :	  41f074:       mov    0x8(%rax),%rdx
    0.00 :	  41f078:       test   $0x4,%dl
    0.00 :	  41f07b:       jne    41f733 <_int_malloc+0xa23>
    0.00 :	  41f081:       cmp    %rdx,%rsi
    0.00 :	  41f084:       jb     41f070 <_int_malloc+0x360>
    0.00 :	  41f086:       je     41f1f0 <_int_malloc+0x4e0>
    0.00 :	  41f08c:       mov    0x28(%rax),%rdx
    0.00 :	  41f090:       mov    %rax,0x20(%rbx)
    0.00 :	  41f094:       mov    %rax,%rdi
    0.00 :	  41f097:       mov    %rdx,0x28(%rbx)
    0.00 :	  41f09b:       mov    %rbx,0x28(%rax)
    0.00 :	  41f09f:       mov    0x28(%rbx),%rdx
    0.00 :	  41f0a3:       mov    %rbx,0x20(%rdx)
    0.00 :	  41f0a7:       mov    0x18(%rdi),%r8
    0.00 :	  41f0ab:       jmpq   41ef10 <_int_malloc+0x200>
    0.00 :	  41f0b0:       mov    0x2b06b9(%rip),%r9d        # 6cf770 <check_action>
    0.00 :	  41f0b7:       orl    $0x4,0x4(%rbp)
    0.00 :	  41f0bb:       mov    %r9d,%eax
    0.00 :	  41f0be:       and    $0x5,%eax
    0.00 :	  41f0c1:       cmp    $0x5,%eax
    0.00 :	  41f0c4:       je     41f594 <_int_malloc+0x884>
    0.00 :	  41f0ca:       test   $0x1,%r9b
    0.00 :	  41f0ce:       jne    41f200 <_int_malloc+0x4f0>
    0.00 :	  41f0d4:       and    $0x2,%r9d
    0.00 :	  41f0d8:       je     41ef6b <_int_malloc+0x25b>
    0.00 :	  41f0de:       jmpq   41f69b <_int_malloc+0x98b>
    0.00 :	  41f0e3:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41f0e8:       mov    %rsi,%rax
    0.00 :	  41f0eb:       shr    $0xc,%rax
    0.00 :	  41f0ef:       cmp    $0xa,%rax
    0.00 :	  41f0f3:       ja     41f1d0 <_int_malloc+0x4c0>
    0.00 :	  41f0f9:       lea    0x6e(%rax),%ecx
    0.00 :	  41f0fc:       lea    0xda(%rax,%rax,1),%eax
    0.00 :	  41f103:       jmpq   41efb7 <_int_malloc+0x2a7>
    0.00 :	  41f108:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41f110:       cmp    0x60(%rbp),%rbx
    0.00 :	  41f114:       jne    41ef81 <_int_malloc+0x271>
    0.00 :	  41f11a:       lea    0x20(%r12),%rax
    0.00 :	  41f11f:       cmp    %rax,%rsi
    0.00 :	  41f122:       jbe    41ef81 <_int_malloc+0x271>
    0.00 :	  41f128:       mov    %rsi,%rdx
    0.00 :	  41f12b:       lea    (%rbx,%r12,1),%rax
    0.00 :	  41f12f:       sub    %r12,%rdx
    0.00 :	  41f132:       cmp    $0x3ff,%rdx
    0.00 :	  41f139:       mov    %rax,0x68(%rbp)
    0.00 :	  41f13d:       mov    %rax,0x70(%rbp)
    0.00 :	  41f141:       mov    %rax,0x60(%rbp)
    0.00 :	  41f145:       mov    %r13,0x10(%rax)
    0.00 :	  41f149:       mov    %r13,0x18(%rax)
    0.00 :	  41f14d:       jbe    41f15f <_int_malloc+0x44f>
    0.00 :	  41f14f:       movq   $0x0,0x20(%rax)
    0.00 :	  41f157:       movq   $0x0,0x28(%rax)
    0.00 :	  41f15f:       xor    %ecx,%ecx
    0.00 :	  41f161:       cmp    $0x6cf800,%rbp
    0.00 :	  41f168:       setne  %cl
    0.00 :	  41f16b:       or     $0x1,%r12
    0.00 :	  41f16f:       shl    $0x2,%rcx
    0.00 :	  41f173:       or     %r12,%rcx
    0.00 :	  41f176:       mov    %rcx,0x8(%rbx)
    0.00 :	  41f17a:       mov    %rdx,%rcx
    0.00 :	  41f17d:       or     $0x1,%rcx
    0.00 :	  41f181:       mov    %rcx,0x8(%rax)
    0.00 :	  41f185:       mov    %rdx,(%rax,%rdx,1)
    0.00 :	  41f189:       lea    0x10(%rbx),%rcx
    0.00 :	  41f18d:       mov    0x2b24a1(%rip),%eax        # 6d1634 <perturb_byte>
    0.00 :	  41f193:       test   %eax,%eax
    0.00 :	  41f195:       je     41f02a <_int_malloc+0x31a>
    0.00 :	  41f19b:       mov    0x8(%rsp),%rdx
    0.00 :	  41f1a0:       xor    $0xff,%al
    0.00 :	  41f1a2:       mov    %rcx,%rdi
    0.00 :	  41f1a5:       mov    %eax,%esi
    0.00 :	  41f1a7:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41f1ac:       mov    %rax,%rcx
    0.00 :	  41f1af:       jmpq   41f02a <_int_malloc+0x31a>
    0.00 :	  41f1b4:       nopl   0x0(%rax)
    0.00 :	  41f1b8:       mov    %rbx,0x28(%rbx)
    0.00 :	  41f1bc:       mov    %rbx,0x20(%rbx)
    0.00 :	  41f1c0:       mov    %rdi,%r8
    0.00 :	  41f1c3:       jmpq   41ef10 <_int_malloc+0x200>
    0.00 :	  41f1c8:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41f1d0:       mov    %rsi,%rax
    0.00 :	  41f1d3:       shr    $0xf,%rax
    0.00 :	  41f1d7:       cmp    $0x4,%rax
    0.00 :	  41f1db:       ja     41f2b3 <_int_malloc+0x5a3>
    0.00 :	  41f1e1:       lea    0x77(%rax),%ecx
    0.00 :	  41f1e4:       lea    0xec(%rax,%rax,1),%eax
    0.00 :	  41f1eb:       jmpq   41efb7 <_int_malloc+0x2a7>
    0.00 :	  41f1f0:       mov    0x10(%rax),%rdi
    0.00 :	  41f1f4:       jmpq   41f0a7 <_int_malloc+0x397>
    0.00 :	  41f1f9:       nopl   0x0(%rax)
    0.00 :	  41f200:       lea    0x80(%rsp),%rsi
    0.00 :	  41f208:       lea    0x10(%rbx),%rdi
    0.00 :	  41f20c:       xor    %ecx,%ecx
    0.00 :	  41f20e:       mov    $0x10,%edx
    0.00 :	  41f213:       mov    %r9d,0x10(%rsp)
    0.00 :	  41f218:       movb   $0x0,0x80(%rsp)
    0.00 :	  41f220:       callq  455480 <_itoa_word>
    0.00 :	  41f225:       mov    %rax,%r8
    0.00 :	  41f228:       lea    0x70(%rsp),%rax
    0.00 :	  41f22d:       mov    0x10(%rsp),%r9d
    0.00 :	  41f232:       cmp    %rax,%r8
    0.00 :	  41f235:       jbe    41f27d <_int_malloc+0x56d>
    0.00 :	  41f237:       mov    0x28(%rsp),%rax
    0.00 :	  41f23c:       lea    -0x1(%r8),%rcx
    0.00 :	  41f240:       mov    %r8,%rdi
    0.00 :	  41f243:       mov    $0x30,%esi
    0.00 :	  41f248:       mov    %r9d,0x24(%rsp)
    0.00 :	  41f24d:       mov    %r8,0x10(%rsp)
    0.00 :	  41f252:       mov    %rcx,0x18(%rsp)
    0.00 :	  41f257:       lea    (%rax,%rcx,1),%rdx
    0.00 :	  41f25b:       sub    %rdx,%rdi
    0.00 :	  41f25e:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41f263:       mov    0x18(%rsp),%rcx
    0.00 :	  41f268:       lea    0x6f(%rsp),%rax
    0.00 :	  41f26d:       mov    0x10(%rsp),%r8
    0.00 :	  41f272:       mov    0x24(%rsp),%r9d
    0.00 :	  41f277:       sub    %rcx,%rax
    0.00 :	  41f27a:       add    %rax,%r8
    0.00 :	  41f27d:       mov    0x2b303c(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41f284:       mov    %r9d,%edi
    0.00 :	  41f287:       mov    $0x4a56d8,%edx
    0.00 :	  41f28c:       mov    $0x4a5a30,%esi
    0.00 :	  41f291:       mov    $0x4a57c5,%ecx
    0.00 :	  41f296:       mov    (%rax),%rax
    0.00 :	  41f299:       test   %rax,%rax
    0.00 :	  41f29c:       cmovne %rax,%rdx
    0.00 :	  41f2a0:       and    $0x2,%edi
    0.00 :	  41f2a3:       xor    %eax,%eax
    0.00 :	  41f2a5:       callq  415660 <__libc_message>
    0.00 :	  41f2aa:       mov    0x8(%rbx),%rsi
    0.00 :	  41f2ae:       jmpq   41ef6b <_int_malloc+0x25b>
    0.00 :	  41f2b3:       mov    %rsi,%rax
    0.00 :	  41f2b6:       shr    $0x12,%rax
    0.00 :	  41f2ba:       cmp    $0x2,%rax
    0.00 :	  41f2be:       ja     41f463 <_int_malloc+0x753>
    0.00 :	  41f2c4:       lea    0x7c(%rax),%ecx
    0.00 :	  41f2c7:       lea    0xf6(%rax,%rax,1),%eax
    0.00 :	  41f2ce:       jmpq   41efb7 <_int_malloc+0x2a7>
   20.00 :	  41f2d3:       cmp    $0x3ff,%r12
    0.00 :	  41f2da:       ja     41f472 <_int_malloc+0x762>
    0.00 :	  41f2e0:       mov    (%rsp),%eax
    0.00 :	  41f2e3:       lea    0x1(%rax),%ecx
    0.00 :	  41f2e6:       add    %eax,%eax
    0.00 :	  41f2e8:       lea    0x58(%rbp,%rax,8),%rdx
    0.00 :	  41f2ed:       mov    %ecx,%edi
    0.00 :	  41f2ef:       shr    $0x5,%edi
    0.00 :	  41f2f2:       mov    %edi,%eax
    0.00 :	  41f2f4:       mov    0x858(%rbp,%rax,4),%esi
    0.00 :	  41f2fb:       mov    $0x1,%eax
    0.00 :	  41f300:       shl    %cl,%eax
    0.00 :	  41f302:       cmp    %esi,%eax
    0.00 :	  41f304:       ja     41f346 <_int_malloc+0x636>
    0.00 :	  41f306:       test   %eax,%eax
    0.00 :	  41f308:       jne    41f31c <_int_malloc+0x60c>
    0.00 :	  41f30a:       jmp    41f346 <_int_malloc+0x636>
    0.00 :	  41f30c:       nopl   0x0(%rax)
    0.00 :	  41f310:       add    $0x10,%rdx
    0.00 :	  41f314:       add    %eax,%eax
    0.00 :	  41f316:       je     41f908 <_int_malloc+0xbf8>
    0.00 :	  41f31c:       test   %esi,%eax
    0.00 :	  41f31e:       je     41f310 <_int_malloc+0x600>
    0.00 :	  41f320:       mov    0x18(%rdx),%r10
    0.00 :	  41f324:       cmp    %r10,%rdx
    0.00 :	  41f327:       jne    41f6ac <_int_malloc+0x99c>
    0.00 :	  41f32d:       mov    %eax,%ecx
    0.00 :	  41f32f:       add    %eax,%eax
    0.00 :	  41f331:       add    $0x10,%rdx
    0.00 :	  41f335:       not    %ecx
    0.00 :	  41f337:       and    %ecx,%esi
    0.00 :	  41f339:       mov    %edi,%ecx
    0.00 :	  41f33b:       cmp    %esi,%eax
    0.00 :	  41f33d:       mov    %esi,0x858(%rbp,%rcx,4)
    0.00 :	  41f344:       jbe    41f306 <_int_malloc+0x5f6>
    0.00 :	  41f346:       lea    0x1(%rdi),%eax
    0.00 :	  41f349:       cmp    $0x3,%eax
    0.00 :	  41f34c:       ja     41f38b <_int_malloc+0x67b>
    0.00 :	  41f34e:       mov    %eax,%edx
    0.00 :	  41f350:       mov    0x858(%rbp,%rdx,4),%esi
    0.00 :	  41f357:       test   %esi,%esi
    0.00 :	  41f359:       jne    41f631 <_int_malloc+0x921>
    0.00 :	  41f35f:       lea    0x2(%rdi),%eax
    0.00 :	  41f362:       cmp    $0x4,%eax
    0.00 :	  41f365:       je     41f38b <_int_malloc+0x67b>
    0.00 :	  41f367:       mov    %eax,%edx
    0.00 :	  41f369:       mov    0x858(%rbp,%rdx,4),%esi
    0.00 :	  41f370:       test   %esi,%esi
    0.00 :	  41f372:       jne    41f631 <_int_malloc+0x921>
    0.00 :	  41f378:       cmp    $0x1,%edi
    0.00 :	  41f37b:       je     41f38b <_int_malloc+0x67b>
    0.00 :	  41f37d:       mov    0x864(%rbp),%esi
    0.00 :	  41f383:       test   %esi,%esi
    0.00 :	  41f385:       jne    41f6a0 <_int_malloc+0x990>
    0.00 :	  41f38b:       mov    0x58(%rbp),%rdx
    0.00 :	  41f38f:       lea    0x20(%r12),%rcx
    0.00 :	  41f394:       mov    0x8(%rdx),%rax
    0.00 :	  41f398:       and    $0xfffffffffffffff8,%rax
    0.00 :	  41f39c:       cmp    %rcx,%rax
    0.00 :	  41f39f:       jae    41f8c0 <_int_malloc+0xbb0>
    0.00 :	  41f3a5:       testb  $0x1,0x4(%rbp)
    0.00 :	  41f3a9:       jne    41f8a0 <_int_malloc+0xb90>
    0.00 :	  41f3af:       mov    %rbp,%rdi
    0.00 :	  41f3b2:       callq  41bed0 <malloc_consolidate>
    0.00 :	  41f3b7:       mov    0x38(%rsp),%eax
    0.00 :	  41f3bb:       cmp    $0x3ff,%r12
    0.00 :	  41f3c2:       mov    %eax,(%rsp)
    0.00 :	  41f3c5:       jbe    41eeea <_int_malloc+0x1da>
    0.00 :	  41f3cb:       cmpq   $0x30,0x30(%rsp)
    0.00 :	  41f3d1:       mov    0x3c(%rsp),%eax
    0.00 :	  41f3d5:       mov    %eax,(%rsp)
    0.00 :	  41f3d8:       jbe    41eeea <_int_malloc+0x1da>
    0.00 :	  41f3de:       cmpq   $0x14,0x40(%rsp)
    0.00 :	  41f3e4:       mov    0x50(%rsp),%eax
    0.00 :	  41f3e8:       mov    %eax,(%rsp)
    0.00 :	  41f3eb:       jbe    41eeea <_int_malloc+0x1da>
    0.00 :	  41f3f1:       cmpq   $0xa,0x48(%rsp)
    0.00 :	  41f3f7:       mov    0x54(%rsp),%eax
    0.00 :	  41f3fb:       mov    %eax,(%rsp)
    0.00 :	  41f3fe:       jbe    41eeea <_int_malloc+0x1da>
    0.00 :	  41f404:       cmpq   $0x4,0x58(%rsp)
    0.00 :	  41f40a:       mov    0x68(%rsp),%eax
    0.00 :	  41f40e:       mov    %eax,(%rsp)
    0.00 :	  41f411:       jbe    41eeea <_int_malloc+0x1da>
    0.00 :	  41f417:       cmpq   $0x2,0x60(%rsp)
    0.00 :	  41f41d:       mov    $0x7e,%r14d
    0.00 :	  41f423:       cmovbe 0x6c(%rsp),%r14d
    0.00 :	  41f429:       mov    %r14d,(%rsp)
    0.00 :	  41f42d:       jmpq   41eeea <_int_malloc+0x1da>
    0.00 :	  41f432:       nopw   0x0(%rax,%rax,1)
    0.00 :	  41f438:       orq    $0x1,0x8(%rbx,%r12,1)
    0.00 :	  41f43e:       cmp    $0x6cf800,%rbp
    0.00 :	  41f445:       je     41f44c <_int_malloc+0x73c>
    0.00 :	  41f447:       orq    $0x4,0x8(%rbx)
    0.00 :	  41f44c:       mov    0x2b21e2(%rip),%eax        # 6d1634 <perturb_byte>
    0.00 :	  41f452:       lea    0x10(%rbx),%rcx
    0.00 :	  41f456:       test   %eax,%eax
    0.00 :	  41f458:       je     41f02a <_int_malloc+0x31a>
    0.00 :	  41f45e:       jmpq   41f19b <_int_malloc+0x48b>
    0.00 :	  41f463:       mov    $0xfa,%eax
    0.00 :	  41f468:       mov    $0x7e,%ecx
    0.00 :	  41f46d:       jmpq   41efb7 <_int_malloc+0x2a7>
   20.00 :	  41f472:       mov    (%rsp),%eax
    0.00 :	  41f475:       lea    -0x2(%rax,%rax,1),%eax
    0.00 :	  41f479:       lea    0x60(%rbp,%rax,8),%rax
    0.00 :	  41f47e:       mov    0x8(%rax),%rdx
    0.00 :	  41f482:       lea    0x8(%rax),%rcx
    0.00 :	  41f486:       sub    $0x8,%rax
    0.00 :	  41f48a:       cmp    %rax,%rdx
    0.00 :	  41f48d:       je     41f2e0 <_int_malloc+0x5d0>
    0.00 :	  41f493:       cmp    0x8(%rdx),%r12
    0.00 :	  41f497:       ja     41f2e0 <_int_malloc+0x5d0>
    0.00 :	  41f49d:       mov    0x28(%rdx),%r10
    0.00 :	  41f4a1:       jmp    41f4a7 <_int_malloc+0x797>
    0.00 :	  41f4a3:       mov    0x28(%r10),%r10
    0.00 :	  41f4a7:       mov    0x8(%r10),%rax
    0.00 :	  41f4ab:       mov    %rax,%r14
    0.00 :	  41f4ae:       and    $0xfffffffffffffff8,%r14
    0.00 :	  41f4b2:       cmp    %r14,%r12
    0.00 :	  41f4b5:       ja     41f4a3 <_int_malloc+0x793>
    0.00 :	  41f4b7:       cmp    0x8(%rcx),%r10
    0.00 :	  41f4bb:       mov    0x10(%r10),%rbx
    0.00 :	  41f4bf:       je     41f4d1 <_int_malloc+0x7c1>
    0.00 :	  41f4c1:       cmp    0x8(%rbx),%rax
    0.00 :	  41f4c5:       mov    %rbx,%rdx
    0.00 :	  41f4c8:       jne    41f4d1 <_int_malloc+0x7c1>
    0.00 :	  41f4ca:       mov    0x10(%rbx),%rbx
    0.00 :	  41f4ce:       mov    %rdx,%r10
    0.00 :	  41f4d1:       mov    %r14,%r15
    0.00 :	  41f4d4:       mov    0x18(%r10),%rax
    0.00 :	  41f4d8:       sub    %r12,%r15
    0.00 :	  41f4db:       cmp    0x18(%rbx),%r10
    0.00 :	  41f4df:       jne    41f9fe <_int_malloc+0xcee>
    0.00 :	  41f4e5:       cmp    0x10(%rax),%r10
    0.00 :	  41f4e9:       jne    41f9fe <_int_malloc+0xcee>
    0.00 :	  41f4ef:       cmpq   $0x3ff,0x8(%r10)
    0.00 :	  41f4f7:       mov    %rax,0x18(%rbx)
    0.00 :	  41f4fb:       mov    %rbx,0x10(%rax)
    0.00 :	  41f4ff:       jbe    41f50e <_int_malloc+0x7fe>
    0.00 :	  41f501:       mov    0x20(%r10),%rax
    0.00 :	  41f505:       test   %rax,%rax
    0.00 :	  41f508:       jne    41fa6c <_int_malloc+0xd5c>
    0.00 :	  41f50e:       cmp    $0x1f,%r15
    0.00 :	  41f512:       jbe    41f70d <_int_malloc+0x9fd>
    0.00 :	  41f518:       mov    0x68(%rbp),%rdx
    0.00 :	  41f51c:       lea    (%r10,%r12,1),%rax
    0.00 :	  41f520:       cmp    %r13,0x18(%rdx)
    0.00 :	  41f524:       jne    41fb39 <_int_malloc+0xe29>
    0.00 :	  41f52a:       cmp    $0x3ff,%r15
    0.00 :	  41f531:       mov    %r13,0x18(%rax)
    0.00 :	  41f535:       mov    %rdx,0x10(%rax)
    0.00 :	  41f539:       mov    %rax,0x68(%rbp)
    0.00 :	  41f53d:       mov    %rax,0x18(%rdx)
    0.00 :	  41f541:       jbe    41f553 <_int_malloc+0x843>
    0.00 :	  41f543:       movq   $0x0,0x20(%rax)
    0.00 :	  41f54b:       movq   $0x0,0x28(%rax)
    0.00 :	  41f553:       xor    %edx,%edx
    0.00 :	  41f555:       cmp    $0x6cf800,%rbp
    0.00 :	  41f55c:       setne  %dl
    0.00 :	  41f55f:       or     $0x1,%r12
    0.00 :	  41f563:       shl    $0x2,%rdx
    0.00 :	  41f567:       or     %r12,%rdx
    0.00 :	  41f56a:       mov    %rdx,0x8(%r10)
    0.00 :	  41f56e:       mov    %r15,%rdx
    0.00 :	  41f571:       or     $0x1,%rdx
    0.00 :	  41f575:       mov    %rdx,0x8(%rax)
    0.00 :	  41f579:       mov    %r15,(%rax,%r15,1)
    0.00 :	  41f57d:       jmpq   41f018 <_int_malloc+0x308>
    0.00 :	  41f582:       nopw   0x0(%rax,%rax,1)
   20.00 :	  41f588:       lea    0x30(%r14),%eax
    0.00 :	  41f58c:       mov    %eax,(%rsp)
    0.00 :	  41f58f:       jmpq   41ee5d <_int_malloc+0x14d>
    0.00 :	  41f594:       mov    %r9d,%edi
    0.00 :	  41f597:       mov    $0x4c00dc,%esi
    0.00 :	  41f59c:       mov    $0x4a57c5,%edx
    0.00 :	  41f5a1:       and    $0x2,%edi
    0.00 :	  41f5a4:       xor    %eax,%eax
    0.00 :	  41f5a6:       callq  415660 <__libc_message>
    0.00 :	  41f5ab:       mov    0x8(%rbx),%rsi
    0.00 :	  41f5af:       jmpq   41ef6b <_int_malloc+0x25b>
    0.00 :	  41f5b4:       mov    $0xffffffffffffffd0,%rax
    0.00 :	  41f5bb:       xor    %ecx,%ecx
    0.00 :	  41f5bd:       movl   $0xc,%fs:(%rax)
    0.00 :	  41f5c4:       mov    %rcx,%rax
    0.00 :	  41f5c7:       retq   
    0.00 :	  41f5c8:       xor    %esi,%esi
    0.00 :	  41f5ca:       mov    %r12,%rdi
    0.00 :	  41f5cd:       callq  41e400 <sysmalloc>
    0.00 :	  41f5d2:       test   %rax,%rax
    0.00 :	  41f5d5:       je     41f660 <_int_malloc+0x950>
    0.00 :	  41f5db:       mov    0x2b2053(%rip),%edx        # 6d1634 <perturb_byte>
    0.00 :	  41f5e1:       mov    %rax,%rcx
    0.00 :	  41f5e4:       test   %edx,%edx
    0.00 :	  41f5e6:       je     41f02a <_int_malloc+0x31a>
    0.00 :	  41f5ec:       mov    %edx,%esi
    0.00 :	  41f5ee:       mov    0x8(%rsp),%rdx
    0.00 :	  41f5f3:       mov    %rax,%rdi
    0.00 :	  41f5f6:       xor    $0xff,%sil
    0.00 :	  41f5fa:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41f5ff:       mov    %rax,%rcx
    0.00 :	  41f602:       jmpq   41f02a <_int_malloc+0x31a>
    0.00 :	  41f607:       mov    %r12,%r14
    0.00 :	  41f60a:       shr    $0xc,%r14
    0.00 :	  41f60e:       cmp    $0xa,%r14
    0.00 :	  41f612:       jbe    41f667 <_int_malloc+0x957>
    0.00 :	  41f614:       mov    %r12,%r14
    0.00 :	  41f617:       shr    $0xf,%r14
    0.00 :	  41f61b:       cmp    $0x4,%r14
    0.00 :	  41f61f:       ja     41f849 <_int_malloc+0xb39>
    0.00 :	  41f625:       lea    0x77(%r14),%eax
    0.00 :	  41f629:       mov    %eax,(%rsp)
    0.00 :	  41f62c:       jmpq   41ee5d <_int_malloc+0x14d>
    0.00 :	  41f631:       mov    %eax,%edx
    0.00 :	  41f633:       mov    %eax,%edi
    0.00 :	  41f635:       shl    $0x6,%edx
    0.00 :	  41f638:       sub    $0x2,%edx
    0.00 :	  41f63b:       mov    %edx,%eax
    0.00 :	  41f63d:       lea    0x58(%rbp,%rax,8),%rdx
    0.00 :	  41f642:       mov    $0x1,%eax
    0.00 :	  41f647:       jmpq   41f31c <_int_malloc+0x60c>
    0.00 :	  41f64c:       mov    %ebx,%edi
    0.00 :	  41f64e:       mov    %r12,%rdx
    0.00 :	  41f651:       mov    $0x4c00dc,%esi
    0.00 :	  41f656:       and    $0x2,%edi
    0.00 :	  41f659:       xor    %eax,%eax
    0.00 :	  41f65b:       callq  415660 <__libc_message>
    0.00 :	  41f660:       xor    %ecx,%ecx
    0.00 :	  41f662:       jmpq   41f02a <_int_malloc+0x31a>
    0.00 :	  41f667:       lea    0x6e(%r14),%eax
    0.00 :	  41f66b:       mov    %eax,(%rsp)
    0.00 :	  41f66e:       jmpq   41ee5d <_int_malloc+0x14d>
    0.00 :	  41f673:       mov    $0x4a5e38,%r12d
    0.00 :	  41f679:       mov    0x2b00f1(%rip),%ebx        # 6cf770 <check_action>
    0.00 :	  41f67f:       orl    $0x4,0x4(%rbp)
    0.00 :	  41f683:       mov    %ebx,%eax
    0.00 :	  41f685:       and    $0x5,%eax
    0.00 :	  41f688:       cmp    $0x5,%eax
    0.00 :	  41f68b:       je     41f64c <_int_malloc+0x93c>
    0.00 :	  41f68d:       test   $0x1,%bl
    0.00 :	  41f690:       jne    41f74c <_int_malloc+0xa3c>
    0.00 :	  41f696:       and    $0x2,%ebx
    0.00 :	  41f699:       je     41f660 <_int_malloc+0x950>
    0.00 :	  41f69b:       callq  411ad0 <abort>
    0.00 :	  41f6a0:       mov    $0xbe,%edx
    0.00 :	  41f6a5:       mov    $0x3,%edi
    0.00 :	  41f6aa:       jmp    41f63b <_int_malloc+0x92b>
    0.00 :	  41f6ac:       mov    0x8(%r10),%rcx
    0.00 :	  41f6b0:       mov    %rcx,%r14
    0.00 :	  41f6b3:       and    $0xfffffffffffffff8,%r14
    0.00 :	  41f6b7:       cmp    %r14,%r12
    0.00 :	  41f6ba:       ja     41fa21 <_int_malloc+0xd11>
    0.00 :	  41f6c0:       mov    0x10(%r10),%r15
    0.00 :	  41f6c4:       mov    %r14,%rbx
    0.00 :	  41f6c7:       mov    0x18(%r10),%rdx
    0.00 :	  41f6cb:       sub    %r12,%rbx
    0.00 :	  41f6ce:       mov    0x18(%r15),%rax
    0.00 :	  41f6d2:       cmp    %rax,%r10
    0.00 :	  41f6d5:       jne    41f869 <_int_malloc+0xb59>
    0.00 :	  41f6db:       cmp    0x10(%rdx),%r10
    0.00 :	  41f6df:       jne    41f869 <_int_malloc+0xb59>
    0.00 :	  41f6e5:       cmp    $0x3ff,%rcx
    0.00 :	  41f6ec:       mov    %rdx,0x18(%r15)
    0.00 :	  41f6f0:       mov    %r15,0x10(%rdx)
    0.00 :	  41f6f4:       jbe    41f703 <_int_malloc+0x9f3>
    0.00 :	  41f6f6:       mov    0x20(%r10),%rdx
    0.00 :	  41f6fa:       test   %rdx,%rdx
    0.00 :	  41f6fd:       jne    41fa9c <_int_malloc+0xd8c>
    0.00 :	  41f703:       cmp    $0x1f,%rbx
    0.00 :	  41f707:       ja     41f7d2 <_int_malloc+0xac2>
    0.00 :	  41f70d:       orq    $0x1,0x8(%r10,%r14,1)
    0.00 :	  41f713:       cmp    $0x6cf800,%rbp
    0.00 :	  41f71a:       jne    41ee2a <_int_malloc+0x11a>
    0.00 :	  41f720:       jmpq   41f018 <_int_malloc+0x308>
    0.00 :	  41f725:       nopl   (%rax)
    0.00 :	  41f728:       mov    $0x4a5e60,%r12d
    0.00 :	  41f72e:       jmpq   41f679 <_int_malloc+0x969>
    0.00 :	  41f733:       mov    $0x4a6540,%ecx
    0.00 :	  41f738:       mov    $0xded,%edx
    0.00 :	  41f73d:       mov    $0x4a5668,%esi
    0.00 :	  41f742:       mov    $0x4a5f08,%edi
    0.00 :	  41f747:       callq  41aec0 <__malloc_assert>
    0.00 :	  41f74c:       lea    0x70(%rsp),%r13
    0.00 :	  41f751:       lea    0x80(%rsp),%rsi
    0.00 :	  41f759:       lea    0x10(%r10),%rdi
    0.00 :	  41f75d:       xor    %ecx,%ecx
    0.00 :	  41f75f:       mov    $0x10,%edx
    0.00 :	  41f764:       movb   $0x0,0x80(%rsp)
    0.00 :	  41f76c:       callq  455480 <_itoa_word>
    0.00 :	  41f771:       cmp    %r13,%rax
    0.00 :	  41f774:       mov    %rax,%rbp
    0.00 :	  41f777:       jbe    41f79e <_int_malloc+0xa8e>
    0.00 :	  41f779:       mov    %rax,%rdx
    0.00 :	  41f77c:       mov    %rax,%rdi
    0.00 :	  41f77f:       mov    $0x30,%esi
    0.00 :	  41f784:       sub    %r13,%rdx
    0.00 :	  41f787:       lea    -0x1(%rax),%r14
    0.00 :	  41f78b:       sub    %rdx,%rdi
    0.00 :	  41f78e:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41f793:       lea    0x6f(%rsp),%rax
    0.00 :	  41f798:       sub    %r14,%rax
    0.00 :	  41f79b:       add    %rax,%rbp
    0.00 :	  41f79e:       mov    0x2b2b1b(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41f7a5:       mov    $0x4a56d8,%edx
    0.00 :	  41f7aa:       mov    %ebx,%edi
    0.00 :	  41f7ac:       mov    %r12,%rcx
    0.00 :	  41f7af:       mov    %rbp,%r8
    0.00 :	  41f7b2:       mov    $0x4a5a30,%esi
    0.00 :	  41f7b7:       mov    (%rax),%rax
    0.00 :	  41f7ba:       test   %rax,%rax
    0.00 :	  41f7bd:       cmovne %rax,%rdx
    0.00 :	  41f7c1:       and    $0x2,%edi
    0.00 :	  41f7c4:       xor    %eax,%eax
    0.00 :	  41f7c6:       callq  415660 <__libc_message>
    0.00 :	  41f7cb:       xor    %ecx,%ecx
    0.00 :	  41f7cd:       jmpq   41f02a <_int_malloc+0x31a>
    0.00 :	  41f7d2:       mov    0x68(%rbp),%rdx
    0.00 :	  41f7d6:       cmp    %r13,0x18(%rdx)
    0.00 :	  41f7da:       jne    41fb2e <_int_malloc+0xe1e>
    0.00 :	  41f7e0:       lea    (%r10,%r12,1),%rax
    0.00 :	  41f7e4:       cmp    $0x3ff,%r12
    0.00 :	  41f7eb:       mov    %r13,0x18(%rax)
    0.00 :	  41f7ef:       mov    %rdx,0x10(%rax)
    0.00 :	  41f7f3:       mov    %rax,0x68(%rbp)
    0.00 :	  41f7f7:       mov    %rax,0x18(%rdx)
    0.00 :	  41f7fb:       ja     41f801 <_int_malloc+0xaf1>
    0.00 :	  41f7fd:       mov    %rax,0x60(%rbp)
    0.00 :	  41f801:       cmp    $0x3ff,%rbx
    0.00 :	  41f808:       jbe    41f81a <_int_malloc+0xb0a>
    0.00 :	  41f80a:       movq   $0x0,0x20(%rax)
    0.00 :	  41f812:       movq   $0x0,0x28(%rax)
    0.00 :	  41f81a:       xor    %edx,%edx
    0.00 :	  41f81c:       cmp    $0x6cf800,%rbp
    0.00 :	  41f823:       setne  %dl
    0.00 :	  41f826:       or     $0x1,%r12
    0.00 :	  41f82a:       shl    $0x2,%rdx
    0.00 :	  41f82e:       or     %r12,%rdx
    0.00 :	  41f831:       mov    %rdx,0x8(%r10)
    0.00 :	  41f835:       mov    %rbx,%rdx
    0.00 :	  41f838:       or     $0x1,%rdx
    0.00 :	  41f83c:       mov    %rdx,0x8(%rax)
    0.00 :	  41f840:       mov    %rbx,(%rax,%rbx,1)
    0.00 :	  41f844:       jmpq   41f018 <_int_malloc+0x308>
    0.00 :	  41f849:       mov    %r12,%rax
    0.00 :	  41f84c:       shr    $0x12,%rax
    0.00 :	  41f850:       lea    0x7c(%rax),%r14d
    0.00 :	  41f854:       cmp    $0x2,%rax
    0.00 :	  41f858:       mov    $0x7e,%eax
    0.00 :	  41f85d:       cmovbe %r14d,%eax
    0.00 :	  41f861:       mov    %eax,(%rsp)
    0.00 :	  41f864:       jmpq   41ee5d <_int_malloc+0x14d>
    0.00 :	  41f869:       mov    0x2aff00(%rip),%r15d        # 6cf770 <check_action>
    0.00 :	  41f870:       orl    $0x4,0x4(%rbp)
    0.00 :	  41f874:       mov    %r15d,%eax
    0.00 :	  41f877:       and    $0x5,%eax
    0.00 :	  41f87a:       cmp    $0x5,%eax
    0.00 :	  41f87d:       je     41f9da <_int_malloc+0xcca>
    0.00 :	  41f883:       test   $0x1,%r15b
    0.00 :	  41f887:       jne    41f921 <_int_malloc+0xc11>
    0.00 :	  41f88d:       and    $0x2,%r15d
    0.00 :	  41f891:       je     41f703 <_int_malloc+0x9f3>
    0.00 :	  41f897:       jmpq   41f69b <_int_malloc+0x98b>
    0.00 :	  41f89c:       nopl   0x0(%rax)
    0.00 :	  41f8a0:       mov    %rbp,%rsi
    0.00 :	  41f8a3:       mov    %r12,%rdi
    0.00 :	  41f8a6:       callq  41e400 <sysmalloc>
    0.00 :	  41f8ab:       test   %rax,%rax
    0.00 :	  41f8ae:       jne    41f5db <_int_malloc+0x8cb>
    0.00 :	  41f8b4:       xor    %ecx,%ecx
    0.00 :	  41f8b6:       jmpq   41f02a <_int_malloc+0x31a>
    0.00 :	  41f8bb:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41f8c0:       sub    %r12,%rax
    0.00 :	  41f8c3:       xor    %ecx,%ecx
    0.00 :	  41f8c5:       cmp    $0x6cf800,%rbp
    0.00 :	  41f8cc:       setne  %cl
    0.00 :	  41f8cf:       lea    (%rdx,%r12,1),%rsi
    0.00 :	  41f8d3:       or     $0x1,%r12
    0.00 :	  41f8d7:       shl    $0x2,%rcx
    0.00 :	  41f8db:       or     $0x1,%rax
    0.00 :	  41f8df:       or     %r12,%rcx
    0.00 :	  41f8e2:       mov    %rsi,0x58(%rbp)
    0.00 :	  41f8e6:       mov    %rcx,0x8(%rdx)
    0.00 :	  41f8ea:       mov    %rax,0x8(%rsi)
    0.00 :	  41f8ee:       lea    0x10(%rdx),%rcx
    0.00 :	  41f8f2:       mov    0x2b1d3c(%rip),%eax        # 6d1634 <perturb_byte>
    0.00 :	  41f8f8:       test   %eax,%eax
    0.00 :	  41f8fa:       je     41f02a <_int_malloc+0x31a>
    0.00 :	  41f900:       jmpq   41f19b <_int_malloc+0x48b>
    0.00 :	  41f905:       nopl   (%rax)
    0.00 :	  41f908:       mov    $0x4a6540,%ecx
    0.00 :	  41f90d:       mov    $0xe75,%edx
    0.00 :	  41f912:       mov    $0x4a5668,%esi
    0.00 :	  41f917:       mov    $0x4a57e1,%edi
    0.00 :	  41f91c:       callq  41aec0 <__malloc_assert>
    0.00 :	  41f921:       lea    0x70(%rsp),%r8
    0.00 :	  41f926:       lea    0x80(%rsp),%rsi
    0.00 :	  41f92e:       xor    %ecx,%ecx
    0.00 :	  41f930:       mov    %r10,%rdi
    0.00 :	  41f933:       mov    $0x10,%edx
    0.00 :	  41f938:       mov    %r10,(%rsp)
    0.00 :	  41f93c:       mov    %r8,0x10(%rsp)
    0.00 :	  41f941:       movb   $0x0,0x80(%rsp)
    0.00 :	  41f949:       callq  455480 <_itoa_word>
    0.00 :	  41f94e:       mov    0x10(%rsp),%r8
    0.00 :	  41f953:       mov    %rax,%rcx
    0.00 :	  41f956:       mov    (%rsp),%r10
    0.00 :	  41f95a:       cmp    %r8,%rax
    0.00 :	  41f95d:       jbe    41f99d <_int_malloc+0xc8d>
    0.00 :	  41f95f:       mov    %rcx,%rdx
    0.00 :	  41f962:       mov    %rcx,%rdi
    0.00 :	  41f965:       lea    -0x1(%rax),%rax
    0.00 :	  41f969:       sub    %r8,%rdx
    0.00 :	  41f96c:       mov    $0x30,%esi
    0.00 :	  41f971:       mov    %r10,0x18(%rsp)
    0.00 :	  41f976:       sub    %rdx,%rdi
    0.00 :	  41f979:       mov    %rcx,0x10(%rsp)
    0.00 :	  41f97e:       mov    %rax,(%rsp)
    0.00 :	  41f982:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41f987:       lea    0x6f(%rsp),%rax
    0.00 :	  41f98c:       sub    (%rsp),%rax
    0.00 :	  41f990:       mov    0x10(%rsp),%rcx
    0.00 :	  41f995:       mov    0x18(%rsp),%r10
    0.00 :	  41f99a:       add    %rax,%rcx
    0.00 :	  41f99d:       mov    0x2b291c(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41f9a4:       mov    $0x4a56d8,%edx
    0.00 :	  41f9a9:       mov    %r15d,%edi
    0.00 :	  41f9ac:       mov    %rcx,%r8
    0.00 :	  41f9af:       mov    $0x4a5a30,%esi
    0.00 :	  41f9b4:       mov    $0x4a5718,%ecx
    0.00 :	  41f9b9:       mov    %r10,(%rsp)
    0.00 :	  41f9bd:       mov    (%rax),%rax
    0.00 :	  41f9c0:       test   %rax,%rax
    0.00 :	  41f9c3:       cmovne %rax,%rdx
    0.00 :	  41f9c7:       and    $0x2,%edi
    0.00 :	  41f9ca:       xor    %eax,%eax
    0.00 :	  41f9cc:       callq  415660 <__libc_message>
    0.00 :	  41f9d1:       mov    (%rsp),%r10
    0.00 :	  41f9d5:       jmpq   41f703 <_int_malloc+0x9f3>
    0.00 :	  41f9da:       mov    %r15d,%edi
    0.00 :	  41f9dd:       mov    $0x4a5718,%edx
    0.00 :	  41f9e2:       mov    $0x4c00dc,%esi
    0.00 :	  41f9e7:       and    $0x2,%edi
    0.00 :	  41f9ea:       xor    %eax,%eax
    0.00 :	  41f9ec:       mov    %r10,(%rsp)
    0.00 :	  41f9f0:       callq  415660 <__libc_message>
    0.00 :	  41f9f5:       mov    (%rsp),%r10
    0.00 :	  41f9f9:       jmpq   41f703 <_int_malloc+0x9f3>
    0.00 :	  41f9fe:       mov    0x2afd6c(%rip),%edi        # 6cf770 <check_action>
    0.00 :	  41fa04:       mov    %r10,%rdx
    0.00 :	  41fa07:       mov    %rbp,%rcx
    0.00 :	  41fa0a:       mov    $0x4a5718,%esi
    0.00 :	  41fa0f:       mov    %r10,(%rsp)
    0.00 :	  41fa13:       callq  41b350 <malloc_printerr>
    0.00 :	  41fa18:       mov    (%rsp),%r10
    0.00 :	  41fa1c:       jmpq   41f50e <_int_malloc+0x7fe>
    0.00 :	  41fa21:       mov    $0x4a6540,%ecx
    0.00 :	  41fa26:       mov    $0xe88,%edx
    0.00 :	  41fa2b:       mov    $0x4a5668,%esi
    0.00 :	  41fa30:       mov    $0x4a5f30,%edi
    0.00 :	  41fa35:       callq  41aec0 <__malloc_assert>
    0.00 :	  41fa3a:       mov    $0x4a6540,%ecx
    0.00 :	  41fa3f:       mov    $0xddd,%edx
    0.00 :	  41fa44:       mov    $0x4a5668,%esi
    0.00 :	  41fa49:       mov    $0x4a5ee0,%edi
    0.00 :	  41fa4e:       callq  41aec0 <__malloc_assert>
    0.00 :	  41fa53:       mov    $0x4a6540,%ecx
    0.00 :	  41fa58:       mov    $0xde9,%edx
    0.00 :	  41fa5d:       mov    $0x4a5668,%esi
    0.00 :	  41fa62:       mov    $0x4a5f08,%edi
    0.00 :	  41fa67:       callq  41aec0 <__malloc_assert>
    0.00 :	  41fa6c:       cmp    0x28(%rax),%r10
    0.00 :	  41fa70:       jne    41fafa <_int_malloc+0xdea>
    0.00 :	  41fa76:       mov    0x28(%r10),%rdx
    0.00 :	  41fa7a:       cmp    0x20(%rdx),%r10
    0.00 :	  41fa7e:       jne    41fafa <_int_malloc+0xdea>
    0.00 :	  41fa80:       cmpq   $0x0,0x20(%rbx)
    0.00 :	  41fa85:       je     41fad4 <_int_malloc+0xdc4>
    0.00 :	  41fa87:       mov    0x28(%r10),%rdx
    0.00 :	  41fa8b:       mov    %rdx,0x28(%rax)
    0.00 :	  41fa8f:       mov    0x28(%r10),%rdx
    0.00 :	  41fa93:       mov    %rax,0x20(%rdx)
    0.00 :	  41fa97:       jmpq   41f50e <_int_malloc+0x7fe>
    0.00 :	  41fa9c:       cmp    0x28(%rdx),%r10
    0.00 :	  41faa0:       jne    41fb6a <_int_malloc+0xe5a>
    0.00 :	  41faa6:       mov    0x28(%r10),%rcx
    0.00 :	  41faaa:       cmp    0x20(%rcx),%r10
    0.00 :	  41faae:       jne    41fb6a <_int_malloc+0xe5a>
    0.00 :	  41fab4:       cmpq   $0x0,0x20(%r15)
    0.00 :	  41fab9:       je     41fb44 <_int_malloc+0xe34>
    0.00 :	  41fabf:       mov    0x28(%rax),%rcx
    0.00 :	  41fac3:       mov    %rcx,0x28(%rdx)
    0.00 :	  41fac7:       mov    0x28(%rax),%rax
    0.00 :	  41facb:       mov    %rdx,0x20(%rax)
    0.00 :	  41facf:       jmpq   41f703 <_int_malloc+0x9f3>
    0.00 :	  41fad4:       cmp    %rax,%r10
    0.00 :	  41fad7:       je     41fb21 <_int_malloc+0xe11>
    0.00 :	  41fad9:       mov    %rax,0x20(%rbx)
    0.00 :	  41fadd:       mov    0x28(%r10),%rax
    0.00 :	  41fae1:       mov    %rax,0x28(%rbx)
    0.00 :	  41fae5:       mov    0x20(%r10),%rax
    0.00 :	  41fae9:       mov    %rbx,0x28(%rax)
    0.00 :	  41faed:       mov    0x28(%r10),%rax
    0.00 :	  41faf1:       mov    %rbx,0x20(%rax)
    0.00 :	  41faf5:       jmpq   41f50e <_int_malloc+0x7fe>
    0.00 :	  41fafa:       mov    0x2afc70(%rip),%edi        # 6cf770 <check_action>
    0.00 :	  41fb00:       mov    %r10,%rdx
    0.00 :	  41fb03:       mov    %rbp,%rcx
    0.00 :	  41fb06:       mov    $0x4a5a78,%esi
    0.00 :	  41fb0b:       mov    %r10,(%rsp)
    0.00 :	  41fb0f:       callq  41b350 <malloc_printerr>
    0.00 :	  41fb14:       mov    (%rsp),%r10
    0.00 :	  41fb18:       mov    0x20(%r10),%rax
    0.00 :	  41fb1c:       jmpq   41fa80 <_int_malloc+0xd70>
    0.00 :	  41fb21:       mov    %rbx,0x28(%rbx)
    0.00 :	  41fb25:       mov    %rbx,0x20(%rbx)
    0.00 :	  41fb29:       jmpq   41f50e <_int_malloc+0x7fe>
    0.00 :	  41fb2e:       mov    $0x4a5eb8,%r12d
    0.00 :	  41fb34:       jmpq   41f679 <_int_malloc+0x969>
    0.00 :	  41fb39:       mov    $0x4a5e90,%r12d
    0.00 :	  41fb3f:       jmpq   41f679 <_int_malloc+0x969>
    0.00 :	  41fb44:       cmp    %rdx,%rax
    0.00 :	  41fb47:       je     41fb9b <_int_malloc+0xe8b>
    0.00 :	  41fb49:       mov    %rdx,0x20(%r15)
    0.00 :	  41fb4d:       mov    0x28(%rax),%rdx
    0.00 :	  41fb51:       mov    %rdx,0x28(%r15)
    0.00 :	  41fb55:       mov    0x20(%rax),%rdx
    0.00 :	  41fb59:       mov    %r15,0x28(%rdx)
    0.00 :	  41fb5d:       mov    0x28(%rax),%rax
    0.00 :	  41fb61:       mov    %r15,0x20(%rax)
    0.00 :	  41fb65:       jmpq   41f703 <_int_malloc+0x9f3>
    0.00 :	  41fb6a:       mov    0x2afc00(%rip),%edi        # 6cf770 <check_action>
    0.00 :	  41fb70:       mov    %rax,%rdx
    0.00 :	  41fb73:       mov    %rbp,%rcx
    0.00 :	  41fb76:       mov    $0x4a5a78,%esi
    0.00 :	  41fb7b:       mov    %r10,0x10(%rsp)
    0.00 :	  41fb80:       mov    %rax,(%rsp)
    0.00 :	  41fb84:       callq  41b350 <malloc_printerr>
    0.00 :	  41fb89:       mov    (%rsp),%rax
    0.00 :	  41fb8d:       mov    0x10(%rsp),%r10
    0.00 :	  41fb92:       mov    0x20(%rax),%rdx
    0.00 :	  41fb96:       jmpq   41fab4 <_int_malloc+0xda4>
    0.00 :	  41fb9b:       mov    %r15,0x28(%r15)
    0.00 :	  41fb9f:       mov    %r15,0x20(%r15)
    0.00 :	  41fba3:       jmpq   41f703 <_int_malloc+0x9f3>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004005f0 <init_cacheinfo>:
         :	init_cacheinfo():
    0.00 :	  4005f0:       mov    0x2d108a(%rip),%eax        # 6d1680 <_dl_x86_cpu_features>
    0.00 :	  4005f6:       push   %r12
    0.00 :	  4005f8:       push   %rbp
    0.00 :	  4005f9:       push   %rbx
    0.00 :	  4005fa:       cmp    $0x1,%eax
    0.00 :	  4005fd:       je     40060d <init_cacheinfo+0x1d>
    0.00 :	  4005ff:       cmp    $0x2,%eax
    0.00 :	  400602:       je     40070f <init_cacheinfo+0x11f>
    0.00 :	  400608:       pop    %rbx
    0.00 :	  400609:       pop    %rbp
    0.00 :	  40060a:       pop    %r12
    0.00 :	  40060c:       retq   
    0.00 :	  40060d:       mov    0x2d1071(%rip),%esi        # 6d1684 <_dl_x86_cpu_features+0x4>
    0.00 :	  400613:       mov    $0xbc,%edi
    0.00 :	  400618:       callq  441570 <handle_intel>
    0.00 :	  40061d:       mov    0x2d1061(%rip),%esi        # 6d1684 <_dl_x86_cpu_features+0x4>
   20.00 :	  400623:       mov    $0xc2,%edi
    0.00 :	  400628:       mov    %rax,%r12
    0.00 :	  40062b:       callq  441570 <handle_intel>
    0.00 :	  400630:       test   %rax,%rax
    0.00 :	  400633:       mov    %rax,%rbp
    0.00 :	  400636:       mov    $0x3,%edi
    0.00 :	  40063b:       jle    40086d <init_cacheinfo+0x27d>
    0.00 :	  400641:       mov    0x2d103c(%rip),%r8d        # 6d1684 <_dl_x86_cpu_features+0x4>
    0.00 :	  400648:       cmp    $0x3,%r8d
    0.00 :	  40064c:       jle    400687 <init_cacheinfo+0x97>
    0.00 :	  40064e:       mov    0x2d1063(%rip),%r9d        # 6d16b8 <_dl_x86_cpu_features+0x38>
    0.00 :	  400655:       mov    0x2d1060(%rip),%r10d        # 6d16bc <_dl_x86_cpu_features+0x3c>
    0.00 :	  40065c:       xor    %ecx,%ecx
    0.00 :	  40065e:       mov    $0x4,%esi
    0.00 :	  400663:       jmp    40067b <init_cacheinfo+0x8b>
    0.00 :	  400665:       nopl   (%rax)
    0.00 :	  400668:       mov    %eax,%edx
    0.00 :	  40066a:       mov    %r11d,%ecx
    0.00 :	  40066d:       shr    $0x5,%edx
    0.00 :	  400670:       and    $0x7,%edx
    0.00 :	  400673:       cmp    %edx,%edi
    0.00 :	  400675:       je     4007bf <init_cacheinfo+0x1cf>
    0.00 :	  40067b:       lea    0x1(%rcx),%r11d
    0.00 :	  40067f:       mov    %esi,%eax
    0.00 :	  400681:       cpuid  
   40.00 :	  400683:       test   $0x1f,%al
    0.00 :	  400685:       jne    400668 <init_cacheinfo+0x78>
    0.00 :	  400687:       movzbl 0x2d1000(%rip),%edx        # 6d168e <_dl_x86_cpu_features+0xe>
    0.00 :	  40068e:       test   %rbp,%rbp
    0.00 :	  400691:       jle    4006a4 <init_cacheinfo+0xb4>
    0.00 :	  400693:       test   %edx,%edx
    0.00 :	  400695:       je     4006a4 <init_cacheinfo+0xb4>
    0.00 :	  400697:       mov    %rbp,%rax
    0.00 :	  40069a:       mov    %edx,%ecx
    0.00 :	  40069c:       cqto   
    0.00 :	  40069e:       idiv   %rcx
    0.00 :	  4006a1:       mov    %rax,%rbp
    0.00 :	  4006a4:       test   %r12,%r12
    0.00 :	  4006a7:       jle    4006d5 <init_cacheinfo+0xe5>
    0.00 :	  4006a9:       mov    %r12,%rax
    0.00 :	  4006ac:       mov    %r12,0x2cfa05(%rip)        # 6d00b8 <__x86_raw_data_cache_size>
   20.00 :	  4006b3:       and    $0x0,%r12b
    0.00 :	  4006b7:       sar    %rax
    0.00 :	  4006ba:       mov    %r12,0x2cfa07(%rip)        # 6d00c8 <__x86_data_cache_size>
    0.00 :	  4006c1:       mov    %rax,0x2cf9f8(%rip)        # 6d00c0 <__x86_raw_data_cache_size_half>
    0.00 :	  4006c8:       mov    %r12,%rax
    0.00 :	  4006cb:       sar    %rax
    0.00 :	  4006ce:       mov    %rax,0x2cf9fb(%rip)        # 6d00d0 <__x86_data_cache_size_half>
    0.00 :	  4006d5:       test   %rbp,%rbp
    0.00 :	  4006d8:       jle    400608 <init_cacheinfo+0x18>
    0.00 :	  4006de:       mov    %rbp,%rax
    0.00 :	  4006e1:       mov    %rbp,0x2cf9b0(%rip)        # 6d0098 <__x86_raw_shared_cache_size>
    0.00 :	  4006e8:       and    $0x0,%bpl
    0.00 :	  4006ec:       sar    %rax
    0.00 :	  4006ef:       mov    %rbp,0x2cf9b2(%rip)        # 6d00a8 <__x86_shared_cache_size>
    0.00 :	  4006f6:       mov    %rax,0x2cf9a3(%rip)        # 6d00a0 <__x86_raw_shared_cache_size_half>
    0.00 :	  4006fd:       mov    %rbp,%rax
    0.00 :	  400700:       sar    %rax
    0.00 :	  400703:       pop    %rbx
    0.00 :	  400704:       mov    %rax,0x2cf9a5(%rip)        # 6d00b0 <__x86_shared_cache_size_half>
    0.00 :	  40070b:       pop    %rbp
    0.00 :	  40070c:       pop    %r12
    0.00 :	  40070e:       retq   
    0.00 :	  40070f:       mov    $0xbc,%edi
    0.00 :	  400714:       callq  441690 <handle_amd>
    0.00 :	  400719:       mov    $0xbf,%edi
    0.00 :	  40071e:       mov    %rax,%r12
    0.00 :	  400721:       callq  441690 <handle_amd>
    0.00 :	  400726:       mov    $0xc2,%edi
    0.00 :	  40072b:       mov    %rax,%rbp
    0.00 :	  40072e:       callq  441690 <handle_amd>
    0.00 :	  400733:       mov    %rax,%rdi
    0.00 :	  400736:       mov    $0x80000000,%eax
    0.00 :	  40073b:       cpuid  
    0.00 :	  40073d:       test   %rdi,%rdi
    0.00 :	  400740:       mov    %eax,%esi
    0.00 :	  400742:       jle    400769 <init_cacheinfo+0x179>
    0.00 :	  400744:       cmp    $0x80000007,%eax
    0.00 :	  400749:       ja     400790 <init_cacheinfo+0x1a0>
    0.00 :	  40074b:       mov    $0x1,%eax
    0.00 :	  400750:       cpuid  
    0.00 :	  400752:       and    $0x10000000,%edx
    0.00 :	  400758:       mov    %eax,%esi
    0.00 :	  40075a:       je     400766 <init_cacheinfo+0x176>
    0.00 :	  40075c:       shr    $0x10,%ebx
    0.00 :	  40075f:       movzbl %bl,%ecx
    0.00 :	  400762:       test   %ecx,%ecx
    0.00 :	  400764:       jne    4007a8 <init_cacheinfo+0x1b8>
    0.00 :	  400766:       add    %rdi,%rbp
    0.00 :	  400769:       cmp    $0x80000000,%esi
    0.00 :	  40076f:       jbe    4006a4 <init_cacheinfo+0xb4>
    0.00 :	  400775:       mov    $0x80000001,%eax
    0.00 :	  40077a:       cpuid  
    0.00 :	  40077c:       and    $0x1,%ch
    0.00 :	  40077f:       je     4007b5 <init_cacheinfo+0x1c5>
    0.00 :	  400781:       movl   $0xffffffff,0x2d1a2d(%rip)        # 6d21b8 <__x86_prefetchw>
    0.00 :	  40078b:       jmpq   4006a4 <init_cacheinfo+0xb4>
    0.00 :	  400790:       mov    $0x80000008,%eax
    0.00 :	  400795:       cpuid  
    0.00 :	  400797:       shr    $0xc,%ecx
    0.00 :	  40079a:       mov    %eax,%esi
    0.00 :	  40079c:       mov    $0x1,%eax
    0.00 :	  4007a1:       and    $0xf,%ecx
    0.00 :	  4007a4:       shl    %cl,%eax
    0.00 :	  4007a6:       mov    %eax,%ecx
    0.00 :	  4007a8:       mov    %rdi,%rax
    0.00 :	  4007ab:       cqto   
    0.00 :	  4007ad:       idiv   %rcx
    0.00 :	  4007b0:       mov    %rax,%rdi
    0.00 :	  4007b3:       jmp    400766 <init_cacheinfo+0x176>
    0.00 :	  4007b5:       test   %edx,%edx
    0.00 :	  4007b7:       jns    4006a4 <init_cacheinfo+0xb4>
    0.00 :	  4007bd:       jmp    400781 <init_cacheinfo+0x191>
    0.00 :	  4007bf:       shr    $0xe,%eax
    0.00 :	  4007c2:       mov    $0x1,%edx
    0.00 :	  4007c7:       and    $0x3ff,%eax
    0.00 :	  4007cc:       mov    %eax,%esi
    0.00 :	  4007ce:       je     40068e <init_cacheinfo+0x9e>
    0.00 :	  4007d4:       cmp    $0xa,%r8d
    0.00 :	  4007d8:       jle    40081d <init_cacheinfo+0x22d>
    0.00 :	  4007da:       xor    %edx,%edx
    0.00 :	  4007dc:       mov    $0xb,%r11d
    0.00 :	  4007e2:       lea    0x1(%rdx),%r8d
    0.00 :	  4007e6:       mov    %r11d,%eax
    0.00 :	  4007e9:       mov    %edx,%ecx
    0.00 :	  4007eb:       cpuid  
   20.00 :	  4007ed:       movzbl %bl,%ebx
    0.00 :	  4007f0:       and    $0xff0,%ecx
    0.00 :	  4007f6:       test   %ebx,%ebx
    0.00 :	  4007f8:       je     40081d <init_cacheinfo+0x22d>
    0.00 :	  4007fa:       test   %ecx,%ecx
    0.00 :	  4007fc:       je     40081d <init_cacheinfo+0x22d>
    0.00 :	  4007fe:       cmp    $0x200,%ecx
    0.00 :	  400804:       mov    %r8d,%edx
    0.00 :	  400807:       jne    4007e2 <init_cacheinfo+0x1f2>
    0.00 :	  400809:       bsr    %esi,%eax
    0.00 :	  40080c:       lea    0x1(%rax),%ecx
    0.00 :	  40080f:       or     $0xffffffff,%eax
    0.00 :	  400812:       sub    $0x1,%ebx
    0.00 :	  400815:       shl    %cl,%eax
    0.00 :	  400817:       not    %eax
    0.00 :	  400819:       and    %ebx,%eax
    0.00 :	  40081b:       mov    %eax,%esi
    0.00 :	  40081d:       cmp    $0x6,%r9d
    0.00 :	  400821:       lea    0x1(%rsi),%edx
    0.00 :	  400824:       sete   %cl
    0.00 :	  400827:       cmp    $0x2,%edi
    0.00 :	  40082a:       sete   %al
    0.00 :	  40082d:       test   %al,%cl
    0.00 :	  40082f:       je     40068e <init_cacheinfo+0x9e>
    0.00 :	  400835:       cmp    $0x2,%edx
    0.00 :	  400838:       jbe    40068e <init_cacheinfo+0x9e>
    0.00 :	  40083e:       lea    -0x37(%r10),%ecx
    0.00 :	  400842:       cmp    $0x26,%ecx
    0.00 :	  400845:       ja     40068e <init_cacheinfo+0x9e>
    0.00 :	  40084b:       mov    $0x1,%eax
    0.00 :	  400850:       shl    %cl,%rax
    0.00 :	  400853:       movabs $0x4900480001,%rcx
    0.00 :	  40085d:       test   %rcx,%rax
    0.00 :	  400860:       mov    $0x2,%eax
    0.00 :	  400865:       cmovne %eax,%edx
    0.00 :	  400868:       jmpq   40068e <init_cacheinfo+0x9e>
    0.00 :	  40086d:       mov    0x2d0e11(%rip),%esi        # 6d1684 <_dl_x86_cpu_features+0x4>
    0.00 :	  400873:       mov    $0xbf,%edi
    0.00 :	  400878:       callq  441570 <handle_intel>
    0.00 :	  40087d:       mov    $0x2,%edi
    0.00 :	  400882:       mov    %rax,%rbp
    0.00 :	  400885:       jmpq   400641 <init_cacheinfo+0x51>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004412a0 <intel_check_word>:
         :	intel_check_word():
   40.00 :	  4412a0:       test   %esi,%esi
    0.00 :	  4412a2:       js     4414be <intel_check_word+0x21e>
    0.00 :	  4412a8:       lea    -0xb9(%rdi),%r8d
    0.00 :	  4412af:       push   %r13
    0.00 :	  4412b1:       push   %r12
    0.00 :	  4412b3:       push   %rbp
    0.00 :	  4412b4:       push   %rbx
    0.00 :	  4412b5:       mov    %rdx,%rbx
    0.00 :	  4412b8:       mov    %r8d,%eax
    0.00 :	  4412bb:       mov    $0x55555556,%edx
    0.00 :	  4412c0:       sar    $0x1f,%r8d
    0.00 :	  4412c4:       imul   %edx
    0.00 :	  4412c6:       sub    $0x8,%rsp
    0.00 :	  4412ca:       sub    %r8d,%edx
    0.00 :	  4412cd:       test   %esi,%esi
    0.00 :	  4412cf:       lea    (%rdx,%rdx,2),%r11d
    0.00 :	  4412d3:       je     441391 <intel_check_word+0xf1>
    0.00 :	  4412d9:       cmpl   $0xf,0x2903d8(%rip)        # 6d16b8 <_dl_x86_cpu_features+0x38>
    0.00 :	  4412e0:       sete   %bpl
    0.00 :	  4412e4:       cmpl   $0x6,0x2903d1(%rip)        # 6d16bc <_dl_x86_cpu_features+0x3c>
    0.00 :	  4412eb:       sete   %al
    0.00 :	  4412ee:       and    %eax,%ebp
    0.00 :	  4412f0:       movzbl %sil,%eax
    0.00 :	  4412f4:       cmp    $0x40,%eax
    0.00 :	  4412f7:       je     4413b0 <intel_check_word+0x110>
    0.00 :	  4412fd:       cmp    $0xff,%eax
    0.00 :	  441302:       je     4413c5 <intel_check_word+0x125>
    0.00 :	  441308:       cmp    $0x49,%eax
    0.00 :	  44130b:       jne    441321 <intel_check_word+0x81>
    0.00 :	  44130d:       cmp    $0x9,%r11d
    0.00 :	  441311:       jne    441321 <intel_check_word+0x81>
    0.00 :	  441313:       test   %bpl,%bpl
    0.00 :	  441316:       je     441321 <intel_check_word+0x81>
    0.00 :	  441318:       sub    $0x3,%edi
    0.00 :	  44131b:       mov    $0x6,%r11d
    0.00 :	  441321:       mov    %esi,%r9d
    0.00 :	  441324:       xor    %edx,%edx
    0.00 :	  441326:       mov    $0x44,%r10d
    0.00 :	  44132c:       nopl   0x0(%rax)
    0.00 :	  441330:       lea    (%r10,%rdx,1),%rax
    0.00 :	  441334:       shr    %rax
    0.00 :	  441337:       cmp    0x4a73e0(,%rax,8),%r9b
    0.00 :	  44133f:       lea    0x4a73e0(,%rax,8),%r8
    0.00 :	  441347:       je     441372 <intel_check_word+0xd2>
    0.00 :	  441349:       nopl   0x0(%rax)
    0.00 :	  441350:       jae    4413a0 <intel_check_word+0x100>
    0.00 :	  441352:       cmp    %rdx,%rax
    0.00 :	  441355:       mov    %rax,%r10
    0.00 :	  441358:       jbe    441386 <intel_check_word+0xe6>
    0.00 :	  44135a:       add    %rdx,%rax
    0.00 :	  44135d:       shr    %rax
    0.00 :	  441360:       cmp    0x4a73e0(,%rax,8),%r9b
   20.00 :	  441368:       lea    0x4a73e0(,%rax,8),%r8
    0.00 :	  441370:       jne    441350 <intel_check_word+0xb0>
    0.00 :	  441372:       movzbl 0x3(%r8),%edx
    0.00 :	  441377:       cmp    %edx,%r11d
    0.00 :	  44137a:       mov    %edx,%eax
    0.00 :	  44137c:       je     4414c1 <intel_check_word+0x221>
    0.00 :	  441382:       cmp    $0x6,%al
    0.00 :	  441384:       je     4413c0 <intel_check_word+0x120>
    0.00 :	  441386:       shr    $0x8,%esi
    0.00 :	  441389:       test   %esi,%esi
    0.00 :	  44138b:       jne    4412f0 <intel_check_word+0x50>
    0.00 :	  441391:       xor    %eax,%eax
    0.00 :	  441393:       add    $0x8,%rsp
    0.00 :	  441397:       pop    %rbx
    0.00 :	  441398:       pop    %rbp
    0.00 :	  441399:       pop    %r12
    0.00 :	  44139b:       pop    %r13
    0.00 :	  44139d:       retq   
    0.00 :	  44139e:       xchg   %ax,%ax
    0.00 :	  4413a0:       lea    0x1(%rax),%rdx
    0.00 :	  4413a4:       cmp    %r10,%rdx
    0.00 :	  4413a7:       jb     441330 <intel_check_word+0x90>
    0.00 :	  4413a9:       jmp    441386 <intel_check_word+0xe6>
    0.00 :	  4413ab:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4413b0:       cmp    $0x9,%r11d
    0.00 :	  4413b4:       movb   $0x1,(%rcx)
    0.00 :	  4413b7:       jne    441386 <intel_check_word+0xe6>
    0.00 :	  4413b9:       jmp    441391 <intel_check_word+0xf1>
    0.00 :	  4413bb:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4413c0:       movb   $0x1,(%rbx)
    0.00 :	  4413c3:       jmp    441386 <intel_check_word+0xe6>
    0.00 :	  4413c5:       xor    %ecx,%ecx
    0.00 :	  4413c7:       mov    $0x4,%eax
    0.00 :	  4413cc:       cpuid  
    0.00 :	  4413ce:       mov    %eax,%esi
    0.00 :	  4413d0:       and    $0x1f,%esi
    0.00 :	  4413d3:       je     441391 <intel_check_word+0xf1>
    0.00 :	  4413d5:       shr    $0x5,%eax
    0.00 :	  4413d8:       and    $0x7,%eax
    0.00 :	  4413db:       cmp    $0x1,%eax
    0.00 :	  4413de:       sete   %dl
    0.00 :	  4413e1:       cmp    $0x3,%r11d
    0.00 :	  4413e5:       sete   %r9b
    0.00 :	  4413e9:       cmp    $0x1,%esi
    0.00 :	  4413ec:       sete   %r8b
    0.00 :	  4413f0:       test   %r9b,%r8b
    0.00 :	  4413f3:       je     4413fd <intel_check_word+0x15d>
    0.00 :	  4413f5:       test   %dl,%dl
    0.00 :	  4413f7:       jne    44148b <intel_check_word+0x1eb>
    0.00 :	  4413fd:       test   %r11d,%r11d
    0.00 :	  441400:       sete   %r10b
    0.00 :	  441404:       cmp    $0x2,%esi
    0.00 :	  441407:       sete   %sil
    0.00 :	  44140b:       test   %r10b,%sil
    0.00 :	  44140e:       je     441414 <intel_check_word+0x174>
    0.00 :	  441410:       test   %dl,%dl
    0.00 :	  441412:       jne    44148b <intel_check_word+0x1eb>
    0.00 :	  441414:       cmp    $0x6,%r11d
    0.00 :	  441418:       mov    $0x4,%r8d
    0.00 :	  44141e:       sete   %bpl
    0.00 :	  441422:       xor    %esi,%esi
    0.00 :	  441424:       nopl   0x0(%rax)
    0.00 :	  441428:       cmp    $0x2,%eax
    0.00 :	  44142b:       jne    441432 <intel_check_word+0x192>
    0.00 :	  44142d:       test   %bpl,%bpl
    0.00 :	  441430:       jne    44148b <intel_check_word+0x1eb>
    0.00 :	  441432:       cmp    $0x3,%eax
    0.00 :	  441435:       jne    44143d <intel_check_word+0x19d>
    0.00 :	  441437:       cmp    $0x9,%r11d
    0.00 :	  44143b:       je     44148b <intel_check_word+0x1eb>
    0.00 :	  44143d:       cmp    $0x4,%eax
    0.00 :	  441440:       jne    441448 <intel_check_word+0x1a8>
    0.00 :	  441442:       cmp    $0xc,%r11d
    0.00 :	  441446:       je     44148b <intel_check_word+0x1eb>
    0.00 :	  441448:       add    $0x1,%esi
    0.00 :	  44144b:       mov    %r8d,%eax
    0.00 :	  44144e:       mov    %esi,%ecx
    0.00 :	  441450:       cpuid  
   20.00 :	  441452:       mov    %eax,%edx
    0.00 :	  441454:       and    $0x1f,%edx
    0.00 :	  441457:       je     441391 <intel_check_word+0xf1>
   20.00 :	  44145d:       shr    $0x5,%eax
    0.00 :	  441460:       and    $0x7,%eax
    0.00 :	  441463:       cmp    $0x1,%eax
    0.00 :	  441466:       sete   %r12b
    0.00 :	  44146a:       cmp    $0x1,%edx
    0.00 :	  44146d:       sete   %r13b
    0.00 :	  441471:       test   %r9b,%r13b
    0.00 :	  441474:       je     44147b <intel_check_word+0x1db>
    0.00 :	  441476:       test   %r12b,%r12b
    0.00 :	  441479:       jne    44148b <intel_check_word+0x1eb>
    0.00 :	  44147b:       cmp    $0x2,%edx
    0.00 :	  44147e:       sete   %dl
    0.00 :	  441481:       test   %r10b,%dl
    0.00 :	  441484:       je     441428 <intel_check_word+0x188>
    0.00 :	  441486:       test   %r12b,%r12b
    0.00 :	  441489:       je     441428 <intel_check_word+0x188>
    0.00 :	  44148b:       lea    -0xb9(%rdi),%eax
    0.00 :	  441491:       sub    %r11d,%eax
    0.00 :	  441494:       je     4414ef <intel_check_word+0x24f>
    0.00 :	  441496:       cmp    $0x1,%eax
    0.00 :	  441499:       je     441521 <intel_check_word+0x281>
    0.00 :	  44149f:       cmp    $0x2,%eax
    0.00 :	  4414a2:       jne    441551 <intel_check_word+0x2b1>
    0.00 :	  4414a8:       mov    %ebx,%eax
    0.00 :	  4414aa:       add    $0x8,%rsp
    0.00 :	  4414ae:       and    $0xfff,%eax
    0.00 :	  4414b3:       pop    %rbx
    0.00 :	  4414b4:       add    $0x1,%rax
    0.00 :	  4414b8:       pop    %rbp
    0.00 :	  4414b9:       pop    %r12
    0.00 :	  4414bb:       pop    %r13
    0.00 :	  4414bd:       retq   
    0.00 :	  4414be:       xor    %eax,%eax
    0.00 :	  4414c0:       retq   
    0.00 :	  4414c1:       lea    -0xb9(%rdi),%eax
    0.00 :	  4414c7:       sub    %r11d,%eax
    0.00 :	  4414ca:       je     4414e0 <intel_check_word+0x240>
    0.00 :	  4414cc:       cmp    $0x1,%eax
    0.00 :	  4414cf:       je     44152e <intel_check_word+0x28e>
    0.00 :	  4414d1:       cmp    $0x2,%eax
    0.00 :	  4414d4:       jne    441538 <intel_check_word+0x298>
    0.00 :	  4414d6:       movzbl 0x2(%r8),%eax
    0.00 :	  4414db:       jmpq   441393 <intel_check_word+0xf3>
    0.00 :	  4414e0:       mov    0x4(%r8),%eax
    0.00 :	  4414e4:       add    $0x8,%rsp
    0.00 :	  4414e8:       pop    %rbx
    0.00 :	  4414e9:       pop    %rbp
    0.00 :	  4414ea:       pop    %r12
    0.00 :	  4414ec:       pop    %r13
    0.00 :	  4414ee:       retq   
    0.00 :	  4414ef:       mov    %ebx,%eax
    0.00 :	  4414f1:       add    $0x1,%ecx
    0.00 :	  4414f4:       shr    $0x16,%eax
    0.00 :	  4414f7:       lea    0x1(%rax),%edx
    0.00 :	  4414fa:       mov    %ebx,%eax
    0.00 :	  4414fc:       and    $0xfff,%eax
    0.00 :	  441501:       add    $0x1,%eax
    0.00 :	  441504:       imul   %edx,%eax
    0.00 :	  441507:       imul   %ecx,%eax
    0.00 :	  44150a:       mov    %eax,%edx
    0.00 :	  44150c:       mov    %ebx,%eax
    0.00 :	  44150e:       shr    $0xc,%eax
    0.00 :	  441511:       and    $0x3ff,%eax
    0.00 :	  441516:       add    $0x1,%eax
    0.00 :	  441519:       imul   %edx,%eax
    0.00 :	  44151c:       jmpq   441393 <intel_check_word+0xf3>
    0.00 :	  441521:       mov    %ebx,%eax
    0.00 :	  441523:       shr    $0x16,%eax
    0.00 :	  441526:       add    $0x1,%eax
    0.00 :	  441529:       jmpq   441393 <intel_check_word+0xf3>
    0.00 :	  44152e:       movzbl 0x1(%r8),%eax
    0.00 :	  441533:       jmpq   441393 <intel_check_word+0xf3>
    0.00 :	  441538:       mov    $0x4a7610,%ecx
    0.00 :	  44153d:       mov    $0xf1,%edx
    0.00 :	  441542:       mov    $0x4a7230,%esi
    0.00 :	  441547:       mov    $0x4a724e,%edi
    0.00 :	  44154c:       callq  405610 <__assert_fail>
    0.00 :	  441551:       mov    $0x4a7610,%ecx
    0.00 :	  441556:       mov    $0xc1,%edx
    0.00 :	  44155b:       mov    $0x4a7230,%esi
    0.00 :	  441560:       mov    $0x4a724e,%edi
    0.00 :	  441565:       callq  405610 <__assert_fail>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401b64 <poly_invntt>:
         :	poly_invntt():
         :	  mul_coefficients(r->coeffs, psis_bitrev_montgomery); 
         :	  ntt((uint16_t *)r->coeffs, omegas_montgomery);
         :	}
         :
         :	void poly_invntt(poly *r)
         :	{
    0.00 :	  401b64:       push   %rbp
    0.00 :	  401b65:       mov    %rsp,%rbp
    0.00 :	  401b68:       sub    $0x10,%rsp
    0.00 :	  401b6c:       mov    %rdi,-0x8(%rbp)
         :	  bitrev_vector(r->coeffs);
    0.00 :	  401b70:       mov    -0x8(%rbp),%rax
    0.00 :	  401b74:       mov    %rax,%rdi
    0.00 :	  401b77:       callq  401ba1 <bitrev_vector>
         :	  ntt((uint16_t *)r->coeffs, omegas_inv_montgomery);
   20.00 :	  401b7c:       mov    -0x8(%rbp),%rax
    0.00 :	  401b80:       mov    $0x6cdca0,%esi
    0.00 :	  401b85:       mov    %rax,%rdi
    0.00 :	  401b88:       callq  401c9a <ntt>
         :	  mul_coefficients(r->coeffs, psis_inv_montgomery);
   20.00 :	  401b8d:       mov    -0x8(%rbp),%rax
   20.00 :	  401b91:       mov    $0x6ce8a0,%esi
    0.00 :	  401b96:       mov    %rax,%rdi
    0.00 :	  401b99:       callq  401c27 <mul_coefficients>
         :	}
   40.00 :	  401b9e:       nop
    0.00 :	  401b9f:       leaveq 
    0.00 :	  401ba0:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401b33 <poly_ntt>:
         :	poly_ntt():
         :	  for(i=0;i<PARAM_N;i++)
         :	    r->coeffs[i] = barrett_reduce(a->coeffs[i] + b->coeffs[i]);
         :	}
         :
         :	void poly_ntt(poly *r)
         :	{
    0.00 :	  401b33:       push   %rbp
    0.00 :	  401b34:       mov    %rsp,%rbp
    0.00 :	  401b37:       sub    $0x10,%rsp
    0.00 :	  401b3b:       mov    %rdi,-0x8(%rbp)
         :	  mul_coefficients(r->coeffs, psis_bitrev_montgomery); 
    0.00 :	  401b3f:       mov    -0x8(%rbp),%rax
    0.00 :	  401b43:       mov    $0x6ce0a0,%esi
    0.00 :	  401b48:       mov    %rax,%rdi
    0.00 :	  401b4b:       callq  401c27 <mul_coefficients>
         :	  ntt((uint16_t *)r->coeffs, omegas_montgomery);
   40.00 :	  401b50:       mov    -0x8(%rbp),%rax
    0.00 :	  401b54:       mov    $0x6cd8a0,%esi
    0.00 :	  401b59:       mov    %rax,%rdi
    0.00 :	  401b5c:       callq  401c9a <ntt>
         :	}
   40.00 :	  401b61:       nop
    0.00 :	  401b62:       leaveq 
   20.00 :	  401b63:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000404bb0 <__libc_start_main>:
         :	__libc_start_main():
    0.00 :	  404bb0:       push   %r13
    0.00 :	  404bb2:       push   %r12
    0.00 :	  404bb4:       xor    %eax,%eax
    0.00 :	  404bb6:       push   %rbp
    0.00 :	  404bb7:       push   %rbx
    0.00 :	  404bb8:       mov    %rdx,%rbp
    0.00 :	  404bbb:       mov    %rcx,%r12
    0.00 :	  404bbe:       mov    %esi,%r11d
    0.00 :	  404bc1:       mov    %rdi,%r10
    0.00 :	  404bc4:       sub    $0x28,%rsp
    0.00 :	  404bc8:       cpuid  
   33.33 :	  404bca:       cmp    $0x756e6547,%ebx
   33.33 :	  404bd0:       mov    %eax,0x2ccaae(%rip)        # 6d1684 <_dl_x86_cpu_features+0x4>
    0.00 :	  404bd6:       movl   $0x0,0x10(%rsp)
    0.00 :	  404bde:       sete   %sil
    0.00 :	  404be2:       cmp    $0x6c65746e,%ecx
    0.00 :	  404be8:       movl   $0x0,0x14(%rsp)
    0.00 :	  404bf0:       sete   %al
    0.00 :	  404bf3:       movl   $0x0,0x18(%rsp)
    0.00 :	  404bfb:       test   %al,%sil
    0.00 :	  404bfe:       je     404c0c <__libc_start_main+0x5c>
    0.00 :	  404c00:       cmp    $0x49656e69,%edx
    0.00 :	  404c06:       je     404d79 <__libc_start_main+0x1c9>
    0.00 :	  404c0c:       cmp    $0x68747541,%ebx
    0.00 :	  404c12:       sete   %sil
    0.00 :	  404c16:       cmp    $0x444d4163,%ecx
    0.00 :	  404c1c:       sete   %al
    0.00 :	  404c1f:       test   %al,%sil
    0.00 :	  404c22:       je     404c30 <__libc_start_main+0x80>
    0.00 :	  404c24:       cmp    $0x69746e65,%edx
    0.00 :	  404c2a:       je     404dc4 <__libc_start_main+0x214>
    0.00 :	  404c30:       mov    0x2cca59(%rip),%r13d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  404c37:       mov    0x14(%rsp),%edi
    0.00 :	  404c3b:       mov    $0x3,%esi
    0.00 :	  404c40:       mov    0x2cca4e(%rip),%eax        # 6d1694 <_dl_x86_cpu_features+0x14>
    0.00 :	  404c46:       test   $0x1,%ah
    0.00 :	  404c49:       je     404c55 <__libc_start_main+0xa5>
    0.00 :	  404c4b:       orl    $0x4000,0x2cca6b(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404c55:       test   $0x80,%ah
    0.00 :	  404c58:       je     404c64 <__libc_start_main+0xb4>
    0.00 :	  404c5a:       orl    $0x8000,0x2cca5c(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404c64:       cmpl   $0x6,0x2cca19(%rip)        # 6d1684 <_dl_x86_cpu_features+0x4>
    0.00 :	  404c6b:       jle    404c8e <__libc_start_main+0xde>
    0.00 :	  404c6d:       mov    $0x7,%eax
    0.00 :	  404c72:       xor    %ecx,%ecx
    0.00 :	  404c74:       cpuid  
    0.00 :	  404c76:       mov    %eax,0x2cca1c(%rip)        # 6d1698 <_dl_x86_cpu_features+0x18>
    0.00 :	  404c7c:       mov    %ebx,0x2cca1a(%rip)        # 6d169c <_dl_x86_cpu_features+0x1c>
    0.00 :	  404c82:       mov    %ecx,0x2cca18(%rip)        # 6d16a0 <_dl_x86_cpu_features+0x20>
    0.00 :	  404c88:       mov    %edx,0x2cca16(%rip)        # 6d16a4 <_dl_x86_cpu_features+0x24>
    0.00 :	  404c8e:       test   $0x8000000,%r13d
    0.00 :	  404c95:       je     404ca6 <__libc_start_main+0xf6>
    0.00 :	  404c97:       xor    %ecx,%ecx
    0.00 :	  404c99:       xgetbv 
    0.00 :	  404c9c:       mov    %eax,%edx
    0.00 :	  404c9e:       and    $0x6,%edx
    0.00 :	  404ca1:       cmp    $0x6,%edx
    0.00 :	  404ca4:       je     404d15 <__libc_start_main+0x165>
    0.00 :	  404ca6:       cmp    $0x1,%esi
    0.00 :	  404ca9:       je     404cda <__libc_start_main+0x12a>
    0.00 :	  404cab:       mov    0x10(%rsp),%eax
    0.00 :	  404caf:       sub    $0x8,%rsp
    0.00 :	  404cb3:       mov    %edi,0x2cca03(%rip)        # 6d16bc <_dl_x86_cpu_features+0x3c>
    0.00 :	  404cb9:       pushq  0x58(%rsp)
    0.00 :	  404cbd:       mov    %esi,0x2cc9bd(%rip)        # 6d1680 <_dl_x86_cpu_features>
    0.00 :	  404cc3:       mov    %r12,%rcx
    0.00 :	  404cc6:       mov    %rbp,%rdx
    0.00 :	  404cc9:       mov    %r11d,%esi
    0.00 :	  404ccc:       mov    %r10,%rdi
    0.00 :	  404ccf:       mov    %eax,0x2cc9e3(%rip)        # 6d16b8 <_dl_x86_cpu_features+0x38>
    0.00 :	  404cd5:       callq  4048a0 <generic_start_main>
    0.00 :	  404cda:       cmpl   $0x6,0x10(%rsp)
    0.00 :	  404cdf:       jne    404cab <__libc_start_main+0xfb>
    0.00 :	  404ce1:       cmp    $0x3f,%edi
    0.00 :	  404ce4:       je     404e64 <__libc_start_main+0x2b4>
    0.00 :	  404cea:       cmp    $0x3c,%edi
    0.00 :	  404ced:       je     404efe <__libc_start_main+0x34e>
    0.00 :	  404cf3:       lea    -0x45(%rdi),%eax
    0.00 :	  404cf6:       cmp    $0x1,%eax
    0.00 :	  404cf9:       jbe    404e3c <__libc_start_main+0x28c>
    0.00 :	  404cff:       cmp    $0x3d,%edi
    0.00 :	  404d02:       jne    404e56 <__libc_start_main+0x2a6>
    0.00 :	  404d08:       cmpl   $0x4,0x18(%rsp)
    0.00 :	  404d0d:       jbe    404e47 <__libc_start_main+0x297>
    0.00 :	  404d13:       jmp    404cab <__libc_start_main+0xfb>
    0.00 :	  404d15:       test   $0x10000000,%r13d
    0.00 :	  404d1c:       je     404d25 <__libc_start_main+0x175>
    0.00 :	  404d1e:       orl    $0x40,0x2cc99b(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404d25:       mov    0x2cc971(%rip),%edx        # 6d169c <_dl_x86_cpu_features+0x1c>
    0.00 :	  404d2b:       test   $0x20,%dl
    0.00 :	  404d2e:       je     404d3a <__libc_start_main+0x18a>
    0.00 :	  404d30:       orl    $0xc00,0x2cc986(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404d3a:       and    $0xe0,%eax
    0.00 :	  404d3f:       cmp    $0xe0,%eax
    0.00 :	  404d44:       je     404ed6 <__libc_start_main+0x326>
    0.00 :	  404d4a:       and    $0x1000,%r13d
    0.00 :	  404d51:       je     404d5d <__libc_start_main+0x1ad>
    0.00 :	  404d53:       orl    $0x80,0x2cc963(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404d5d:       testb  $0x1,0x2cc94e(%rip)        # 6d16b2 <_dl_x86_cpu_features+0x32>
    0.00 :	  404d64:       je     404ca6 <__libc_start_main+0xf6>
    0.00 :	  404d6a:       orl    $0x100,0x2cc94c(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404d74:       jmpq   404ca6 <__libc_start_main+0xf6>
    0.00 :	  404d79:       lea    0x18(%rsp),%rcx
    0.00 :	  404d7e:       lea    0x1c(%rsp),%rdx
    0.00 :	  404d83:       lea    0x14(%rsp),%rsi
    0.00 :	  404d88:       lea    0x10(%rsp),%rdi
    0.00 :	  404d8d:       mov    %r9,0x8(%rsp)
    0.00 :	  404d92:       mov    %r8,(%rsp)
    0.00 :	  404d96:       callq  404b40 <get_common_indeces.constprop.1>
    0.00 :	  404d9b:       cmpl   $0x6,0x10(%rsp)
    0.00 :	  404da0:       mov    0x2cc8e9(%rip),%r13d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  404da7:       mov    (%rsp),%r8
    0.00 :	  404dab:       mov    0x8(%rsp),%r9
    0.00 :	  404db0:       je     404e70 <__libc_start_main+0x2c0>
    0.00 :	  404db6:       mov    $0x1,%esi
    0.00 :	  404dbb:       mov    0x14(%rsp),%edi
    0.00 :	  404dbf:       jmpq   404c40 <__libc_start_main+0x90>
    0.00 :	  404dc4:       lea    0x18(%rsp),%rcx
    0.00 :	  404dc9:       lea    0x1c(%rsp),%rdx
    0.00 :	  404dce:       lea    0x14(%rsp),%rsi
    0.00 :	  404dd3:       lea    0x10(%rsp),%rdi
    0.00 :	  404dd8:       mov    %r9,0x8(%rsp)
    0.00 :	  404ddd:       mov    %r8,(%rsp)
    0.00 :	  404de1:       callq  404b40 <get_common_indeces.constprop.1>
    0.00 :	  404de6:       mov    $0x80000000,%eax
    0.00 :	  404deb:       mov    (%rsp),%r8
    0.00 :	  404def:       mov    0x8(%rsp),%r9
    0.00 :	  404df4:       cpuid  
    0.00 :	  404df6:       cmp    $0x80000000,%eax
    0.00 :	  404dfb:       jbe    404e1c <__libc_start_main+0x26c>
    0.00 :	  404dfd:       mov    $0x80000001,%eax
    0.00 :	  404e02:       cpuid  
    0.00 :	  404e04:       mov    %eax,0x2cc89e(%rip)        # 6d16a8 <_dl_x86_cpu_features+0x28>
    0.00 :	  404e0a:       mov    %ebx,0x2cc89c(%rip)        # 6d16ac <_dl_x86_cpu_features+0x2c>
    0.00 :	  404e10:       mov    %ecx,0x2cc89a(%rip)        # 6d16b0 <_dl_x86_cpu_features+0x30>
    0.00 :	  404e16:       mov    %edx,0x2cc898(%rip)        # 6d16b4 <_dl_x86_cpu_features+0x34>
    0.00 :	  404e1c:       cmpl   $0x15,0x10(%rsp)
    0.00 :	  404e21:       mov    0x14(%rsp),%edi
    0.00 :	  404e25:       je     404ebe <__libc_start_main+0x30e>
    0.00 :	  404e2b:       mov    $0x2,%esi
    0.00 :	  404e30:       mov    0x2cc859(%rip),%r13d        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  404e37:       jmpq   404c40 <__libc_start_main+0x90>
    0.00 :	  404e3c:       cmpl   $0x1,0x18(%rsp)
    0.00 :	  404e41:       ja     404cab <__libc_start_main+0xfb>
    0.00 :	  404e47:       andl   $0xfffff7ef,0x2cc84b(%rip)        # 6d169c <_dl_x86_cpu_features+0x1c>
    0.00 :	  404e51:       jmpq   404cab <__libc_start_main+0xfb>
    0.00 :	  404e56:       cmp    $0x47,%edi
    0.00 :	  404e59:       je     404e3c <__libc_start_main+0x28c>
    0.00 :	  404e5b:       cmp    $0x56,%edi
    0.00 :	  404e5e:       jne    404cab <__libc_start_main+0xfb>
    0.00 :	  404e64:       cmpl   $0x2,0x18(%rsp)
    0.00 :	  404e69:       jbe    404e47 <__libc_start_main+0x297>
    0.00 :	  404e6b:       jmpq   404cab <__libc_start_main+0xfb>
   33.33 :	  404e70:       mov    0x1c(%rsp),%eax
    0.00 :	  404e74:       add    0x14(%rsp),%eax
    0.00 :	  404e78:       cmp    $0x2f,%eax
    0.00 :	  404e7b:       mov    %eax,0x14(%rsp)
    0.00 :	  404e7f:       ja     404f1c <__libc_start_main+0x36c>
    0.00 :	  404e85:       cmp    $0x2e,%eax
    0.00 :	  404e88:       jae    404f6d <__libc_start_main+0x3bd>
    0.00 :	  404e8e:       cmp    $0x1f,%eax
    0.00 :	  404e91:       ja     404f4d <__libc_start_main+0x39d>
    0.00 :	  404e97:       cmp    $0x1e,%eax
    0.00 :	  404e9a:       jae    404f6d <__libc_start_main+0x3bd>
    0.00 :	  404ea0:       cmp    $0x1a,%eax
    0.00 :	  404ea3:       je     404f6d <__libc_start_main+0x3bd>
    0.00 :	  404ea9:       cmp    $0x1c,%eax
    0.00 :	  404eac:       jne    404f60 <__libc_start_main+0x3b0>
    0.00 :	  404eb2:       orl    $0x4,0x2cc807(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404eb9:       jmpq   404db6 <__libc_start_main+0x206>
    0.00 :	  404ebe:       lea    -0x60(%rdi),%eax
    0.00 :	  404ec1:       cmp    $0x1f,%eax
    0.00 :	  404ec4:       ja     404e2b <__libc_start_main+0x27b>
    0.00 :	  404eca:       orl    $0x10,0x2cc7ef(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404ed1:       jmpq   404e2b <__libc_start_main+0x27b>
    0.00 :	  404ed6:       test   $0x10000,%edx
    0.00 :	  404edc:       je     404d4a <__libc_start_main+0x19a>
    0.00 :	  404ee2:       and    $0x20000,%edx
    0.00 :	  404ee8:       mov    0x2cc7d2(%rip),%eax        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404eee:       jne    404f0e <__libc_start_main+0x35e>
    0.00 :	  404ef0:       or     $0x10,%ah
    0.00 :	  404ef3:       mov    %eax,0x2cc7c7(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404ef9:       jmpq   404d4a <__libc_start_main+0x19a>
    0.00 :	  404efe:       cmpl   $0x3,0x18(%rsp)
    0.00 :	  404f03:       jbe    404e47 <__libc_start_main+0x297>
    0.00 :	  404f09:       jmpq   404cab <__libc_start_main+0xfb>
    0.00 :	  404f0e:       or     $0x30,%ah
    0.00 :	  404f11:       mov    %eax,0x2cc7a9(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404f17:       jmpq   404d4a <__libc_start_main+0x19a>
    0.00 :	  404f1c:       cmp    $0x4d,%eax
    0.00 :	  404f1f:       je     404f83 <__libc_start_main+0x3d3>
    0.00 :	  404f21:       jbe    404f79 <__libc_start_main+0x3c9>
    0.00 :	  404f23:       cmp    $0x5a,%eax
    0.00 :	  404f26:       je     404f83 <__libc_start_main+0x3d3>
    0.00 :	  404f28:       cmp    $0x5d,%eax
    0.00 :	  404f2b:       je     404f83 <__libc_start_main+0x3d3>
    0.00 :	  404f2d:       cmp    $0x57,%eax
    0.00 :	  404f30:       jne    404f60 <__libc_start_main+0x3b0>
    0.00 :	  404f32:       mov    0x2cc788(%rip),%eax        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404f38:       or     $0x20000,%eax
    0.00 :	  404f3d:       or     $0x230,%eax
    0.00 :	  404f42:       mov    %eax,0x2cc778(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404f48:       jmpq   404db6 <__libc_start_main+0x206>
    0.00 :	  404f4d:       cmp    $0x26,%eax
    0.00 :	  404f50:       je     404eb2 <__libc_start_main+0x302>
    0.00 :	  404f56:       cmp    $0x2c,%eax
    0.00 :	  404f59:       je     404f6d <__libc_start_main+0x3bd>
    0.00 :	  404f5b:       cmp    $0x25,%eax
    0.00 :	  404f5e:       je     404f6d <__libc_start_main+0x3bd>
    0.00 :	  404f60:       test   $0x10000000,%r13d
    0.00 :	  404f67:       je     404db6 <__libc_start_main+0x206>
    0.00 :	  404f6d:       orl    $0x33,0x2cc74c(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404f74:       jmpq   404db6 <__libc_start_main+0x206>
    0.00 :	  404f79:       cmp    $0x37,%eax
    0.00 :	  404f7c:       je     404f83 <__libc_start_main+0x3d3>
    0.00 :	  404f7e:       cmp    $0x4a,%eax
    0.00 :	  404f81:       jne    404f60 <__libc_start_main+0x3b0>
    0.00 :	  404f83:       mov    0x2cc737(%rip),%eax        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  404f89:       jmp    404f3d <__libc_start_main+0x38d>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004048a0 <generic_start_main>:
         :	generic_start_main():
   33.33 :	  4048a0:       push   %r14
    0.00 :	  4048a2:       push   %r13
    0.00 :	  4048a4:       mov    $0x0,%eax
    0.00 :	  4048a9:       push   %r12
    0.00 :	  4048ab:       push   %rbp
    0.00 :	  4048ac:       mov    %rcx,%r12
    0.00 :	  4048af:       push   %rbx
    0.00 :	  4048b0:       mov    %r8,%r13
    0.00 :	  4048b3:       mov    %r9,%r14
    0.00 :	  4048b6:       sub    $0x90,%rsp
    0.00 :	  4048bd:       test   %rax,%rax
    0.00 :	  4048c0:       mov    %rdi,0x18(%rsp)
    0.00 :	  4048c5:       mov    %esi,0xc(%rsp)
    0.00 :	  4048c9:       mov    %rdx,0x10(%rsp)
    0.00 :	  4048ce:       je     404a01 <generic_start_main+0x161>
    0.00 :	  4048d4:       mov    -0x4048da(%rip),%ecx        # 0 <_nl_current_LC_CTYPE>
    0.00 :	  4048da:       xor    %eax,%eax
    0.00 :	  4048dc:       test   %ecx,%ecx
    0.00 :	  4048de:       mov    %rdx,%rcx
    0.00 :	  4048e1:       sete   %al
    0.00 :	  4048e4:       mov    %eax,0x2cbe16(%rip)        # 6d0700 <__libc_multiple_libcs>
    0.00 :	  4048ea:       movslq 0xc(%rsp),%rax
    0.00 :	  4048ef:       lea    0x8(%rcx,%rax,8),%rdi
    0.00 :	  4048f4:       mov    0xc0(%rsp),%rax
    0.00 :	  4048fc:       mov    %rdi,0x2ccd3d(%rip)        # 6d1640 <__environ>
    0.00 :	  404903:       mov    %rax,0x2c8686(%rip)        # 6ccf90 <__libc_stack_end>
    0.00 :	  40490a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  404910:       add    $0x8,%rdi
    0.00 :	  404914:       cmpq   $0x0,-0x8(%rdi)
    0.00 :	  404919:       jne    404910 <generic_start_main+0x70>
    0.00 :	  40491b:       callq  446170 <_dl_aux_init>
    0.00 :	  404920:       cmpq   $0x0,0x2cd920(%rip)        # 6d2248 <_dl_phdr>
    0.00 :	  404928:       jne    404979 <generic_start_main+0xd9>
    0.00 :	  40492a:       mov    $0x400000,%eax
    0.00 :	  40492f:       test   %rax,%rax
    0.00 :	  404932:       je     404979 <generic_start_main+0xd9>
    0.00 :	  404934:       cmpw   $0x38,-0x4906(%rip)        # 400036 <__ehdr_start+0x36>
    0.00 :	  40493c:       je     404957 <generic_start_main+0xb7>
    0.00 :	  40493e:       mov    $0x4a4610,%ecx
    0.00 :	  404943:       mov    $0xaf,%edx
    0.00 :	  404948:       mov    $0x4a455f,%esi
    0.00 :	  40494d:       mov    $0x4a4590,%edi
    0.00 :	  404952:       callq  405610 <__assert_fail>
    0.00 :	  404957:       mov    -0x493e(%rip),%rax        # 400020 <__ehdr_start+0x20>
    0.00 :	  40495e:       add    $0x400000,%rax
    0.00 :	  404964:       mov    %rax,0x2cd8dd(%rip)        # 6d2248 <_dl_phdr>
    0.00 :	  40496b:       movzwl -0x493a(%rip),%eax        # 400038 <__ehdr_start+0x38>
    0.00 :	  404972:       mov    %rax,0x2cd907(%rip)        # 6d2280 <_dl_phnum>
    0.00 :	  404979:       mov    0x2cbd81(%rip),%eax        # 6d0700 <__libc_multiple_libcs>
    0.00 :	  40497f:       test   %eax,%eax
    0.00 :	  404981:       je     4049cf <generic_start_main+0x12f>
    0.00 :	  404983:       mov    $0x4001d8,%eax
    0.00 :	  404988:       cmp    $0x4002c8,%rax
    0.00 :	  40498e:       jae    404a0b <generic_start_main+0x16b>
    0.00 :	  404990:       cmpl   $0x25,-0x47b7(%rip)        # 4001e0 <__rela_iplt_start+0x8>
   33.33 :	  404997:       mov    -0x47c6(%rip),%rbp        # 4001d8 <__rela_iplt_start>
    0.00 :	  40499e:       mov    $0x4001d8,%ebx
    0.00 :	  4049a3:       jne    4049c5 <generic_start_main+0x125>
    0.00 :	  4049a5:       nopl   (%rax)
    0.00 :	  4049a8:       callq  *0x10(%rbx)
    0.00 :	  4049ab:       add    $0x18,%rbx
    0.00 :	  4049af:       mov    %rax,0x0(%rbp)
    0.00 :	  4049b3:       cmp    $0x4002c8,%rbx
    0.00 :	  4049ba:       jae    404a0b <generic_start_main+0x16b>
    0.00 :	  4049bc:       cmpl   $0x25,0x8(%rbx)
    0.00 :	  4049c0:       mov    (%rbx),%rbp
    0.00 :	  4049c3:       je     4049a8 <generic_start_main+0x108>
    0.00 :	  4049c5:       mov    $0x4a45e8,%edi
    0.00 :	  4049ca:       callq  415930 <__libc_fatal>
    0.00 :	  4049cf:       callq  447570 <_dl_discover_osversion>
    0.00 :	  4049d4:       test   %eax,%eax
    0.00 :	  4049d6:       js     404b28 <generic_start_main+0x288>
    0.00 :	  4049dc:       mov    0x2cd8be(%rip),%edx        # 6d22a0 <_dl_osversion>
    0.00 :	  4049e2:       test   %edx,%edx
    0.00 :	  4049e4:       jne    404aed <generic_start_main+0x24d>
    0.00 :	  4049ea:       mov    %eax,0x2cd8b0(%rip)        # 6d22a0 <_dl_osversion>
    0.00 :	  4049f0:       cmp    $0x2061f,%eax
    0.00 :	  4049f5:       jg     404983 <generic_start_main+0xe3>
    0.00 :	  4049f7:       mov    $0x4a4573,%edi
    0.00 :	  4049fc:       callq  415930 <__libc_fatal>
    0.00 :	  404a01:       xor    %eax,%eax
    0.00 :	  404a03:       mov    %rdx,%rcx
    0.00 :	  404a06:       jmpq   4048e4 <generic_start_main+0x44>
    0.00 :	  404a0b:       callq  4053f0 <__pthread_initialize_minimal>
    0.00 :	  404a10:       mov    0x2c8569(%rip),%rdx        # 6ccf80 <_dl_random>
    0.00 :	  404a17:       mov    (%rdx),%rax
   33.33 :	  404a1a:       xor    %al,%al
    0.00 :	  404a1c:       mov    %rax,%fs:0x28
    0.00 :	  404a25:       mov    0x8(%rdx),%rax
    0.00 :	  404a29:       mov    %rax,%fs:0x30
    0.00 :	  404a32:       test   %r14,%r14
    0.00 :	  404a35:       je     404a43 <generic_start_main+0x1a3>
    0.00 :	  404a37:       xor    %edx,%edx
    0.00 :	  404a39:       xor    %esi,%esi
    0.00 :	  404a3b:       mov    %r14,%rdi
    0.00 :	  404a3e:       callq  412ac0 <__cxa_atexit>
    0.00 :	  404a43:       mov    0x2ccbf6(%rip),%rdx        # 6d1640 <__environ>
    0.00 :	  404a4a:       mov    0x10(%rsp),%rsi
    0.00 :	  404a4f:       mov    0xc(%rsp),%edi
    0.00 :	  404a53:       callq  447680 <__libc_init_first>
    0.00 :	  404a58:       test   %r13,%r13
    0.00 :	  404a5b:       je     404a69 <generic_start_main+0x1c9>
    0.00 :	  404a5d:       xor    %edx,%edx
    0.00 :	  404a5f:       xor    %esi,%esi
    0.00 :	  404a61:       mov    %r13,%rdi
    0.00 :	  404a64:       callq  412ac0 <__cxa_atexit>
    0.00 :	  404a69:       cmpl   $0x0,0x2c8528(%rip)        # 6ccf98 <__libc_enable_secure>
    0.00 :	  404a70:       jne    404b32 <generic_start_main+0x292>
    0.00 :	  404a76:       test   %r12,%r12
    0.00 :	  404a79:       je     404a8e <generic_start_main+0x1ee>
    0.00 :	  404a7b:       mov    0x2ccbbe(%rip),%rdx        # 6d1640 <__environ>
    0.00 :	  404a82:       mov    0x10(%rsp),%rsi
    0.00 :	  404a87:       mov    0xc(%rsp),%edi
    0.00 :	  404a8b:       callq  *%r12
    0.00 :	  404a8e:       xor    %edi,%edi
    0.00 :	  404a90:       xor    %esi,%esi
    0.00 :	  404a92:       callq  446100 <_dl_debug_initialize>
    0.00 :	  404a97:       lea    0x20(%rsp),%rdi
    0.00 :	  404a9c:       callq  411a40 <_setjmp>
    0.00 :	  404aa1:       test   %eax,%eax
    0.00 :	  404aa3:       jne    404afa <generic_start_main+0x25a>
    0.00 :	  404aa5:       mov    %fs:0x300,%rax
    0.00 :	  404aae:       mov    %rax,0x68(%rsp)
    0.00 :	  404ab3:       mov    %fs:0x2f8,%rax
    0.00 :	  404abc:       mov    %rax,0x70(%rsp)
    0.00 :	  404ac1:       lea    0x20(%rsp),%rax
    0.00 :	  404ac6:       mov    %rax,%fs:0x300
    0.00 :	  404acf:       mov    0x2ccb6a(%rip),%rdx        # 6d1640 <__environ>
    0.00 :	  404ad6:       mov    0x10(%rsp),%rsi
    0.00 :	  404adb:       mov    0xc(%rsp),%edi
    0.00 :	  404adf:       mov    0x18(%rsp),%rax
    0.00 :	  404ae4:       callq  *%rax
    0.00 :	  404ae6:       mov    %eax,%edi
    0.00 :	  404ae8:       callq  4128c0 <exit>
    0.00 :	  404aed:       cmp    %eax,%edx
    0.00 :	  404aef:       jbe    4049f0 <generic_start_main+0x150>
    0.00 :	  404af5:       jmpq   4049ea <generic_start_main+0x14a>
    0.00 :	  404afa:       callq  0 <_nl_current_LC_CTYPE>
    0.00 :	  404aff:       lock decl -0x404b06(%rip)        # 0 <_nl_current_LC_CTYPE>
    0.00 :	  404b06:       sete   %al
    0.00 :	  404b09:       test   %al,%al
    0.00 :	  404b0b:       je     404b11 <generic_start_main+0x271>
    0.00 :	  404b0d:       xor    %eax,%eax
    0.00 :	  404b0f:       jmp    404ae6 <generic_start_main+0x246>
    0.00 :	  404b11:       mov    $0x3c,%edx
    0.00 :	  404b16:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  404b20:       xor    %edi,%edi
    0.00 :	  404b22:       mov    %edx,%eax
    0.00 :	  404b24:       syscall 
    0.00 :	  404b26:       jmp    404b20 <generic_start_main+0x280>
    0.00 :	  404b28:       mov    $0x4a45c0,%edi
    0.00 :	  404b2d:       callq  415930 <__libc_fatal>
    0.00 :	  404b32:       callq  404f90 <__libc_check_standard_fds>
    0.00 :	  404b37:       jmpq   404a76 <generic_start_main+0x1d6>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041bed0 <malloc_consolidate>:
         :	malloc_consolidate():
   33.33 :	  41bed0:       cmpq   $0x0,0x2b5760(%rip)        # 6d1638 <global_max_fast>
    0.00 :	  41bed8:       je     41c367 <malloc_consolidate+0x497>
    0.00 :	  41bede:       push   %r15
    0.00 :	  41bee0:       push   %r14
    0.00 :	  41bee2:       mov    %rdi,%r14
    0.00 :	  41bee5:       push   %r13
    0.00 :	  41bee7:       push   %r12
    0.00 :	  41bee9:       push   %rbp
    0.00 :	  41beea:       push   %rbx
    0.00 :	  41beeb:       sub    $0x68,%rsp
    0.00 :	  41beef:       cmpl   $0x0,%fs:0x18
    0.00 :	  41bef8:       je     41befb <malloc_consolidate+0x2b>
    0.00 :	  41befa:       lock orl $0x1,0x4(%rdi)
    0.00 :	  41beff:       lea    0x50(%rdi),%rax
    0.00 :	  41bf03:       lea    0x40(%rsp),%rsi
    0.00 :	  41bf08:       lea    0x58(%rdi),%r10
    0.00 :	  41bf0c:       lea    0x8(%rdi),%r11
    0.00 :	  41bf10:       mov    %rax,0x8(%rsp)
    0.00 :	  41bf15:       mov    $0x1,%eax
    0.00 :	  41bf1a:       sub    %rsi,%rax
    0.00 :	  41bf1d:       mov    %rax,0x10(%rsp)
    0.00 :	  41bf22:       nopw   0x0(%rax,%rax,1)
    0.00 :	  41bf28:       xor    %ebx,%ebx
    0.00 :	  41bf2a:       xchg   %rbx,(%r11)
    0.00 :	  41bf2d:       test   %rbx,%rbx
    0.00 :	  41bf30:       je     41c087 <malloc_consolidate+0x1b7>
    0.00 :	  41bf36:       mov    %r11,(%rsp)
    0.00 :	  41bf3a:       mov    %r10,%r15
    0.00 :	  41bf3d:       jmpq   41bfd8 <malloc_consolidate+0x108>
    0.00 :	  41bf42:       nopw   0x0(%rax,%rax,1)
    0.00 :	  41bf48:       add    %r13,%rbp
    0.00 :	  41bf4b:       mov    0x10(%r12),%r13
    0.00 :	  41bf50:       mov    0x18(%r12),%rax
    0.00 :	  41bf55:       cmp    0x18(%r13),%r12
    0.00 :	  41bf59:       jne    41c0e8 <malloc_consolidate+0x218>
    0.00 :	  41bf5f:       cmp    0x10(%rax),%r12
    0.00 :	  41bf63:       jne    41c0e8 <malloc_consolidate+0x218>
    0.00 :	  41bf69:       cmpq   $0x3ff,0x8(%r12)
    0.00 :	  41bf72:       mov    %rax,0x18(%r13)
    0.00 :	  41bf76:       mov    %r13,0x10(%rax)
    0.00 :	  41bf7a:       jbe    41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41bf7c:       mov    0x20(%r12),%rax
    0.00 :	  41bf81:       test   %rax,%rax
    0.00 :	  41bf84:       jne    41c2e0 <malloc_consolidate+0x410>
    0.00 :	  41bf8a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  41bf90:       mov    0x68(%r14),%rax
    0.00 :	  41bf94:       cmp    $0x3ff,%rbp
    0.00 :	  41bf9b:       mov    %rbx,0x68(%r14)
    0.00 :	  41bf9f:       mov    %rbx,0x18(%rax)
    0.00 :	  41bfa3:       jbe    41bfb5 <malloc_consolidate+0xe5>
    0.00 :	  41bfa5:       movq   $0x0,0x20(%rbx)
    0.00 :	  41bfad:       movq   $0x0,0x28(%rbx)
    0.00 :	  41bfb5:       mov    %rbp,%rdx
    0.00 :	  41bfb8:       mov    %r15,0x18(%rbx)
    0.00 :	  41bfbc:       mov    %rax,0x10(%rbx)
    0.00 :	  41bfc0:       or     $0x1,%rdx
    0.00 :	  41bfc4:       test   %r9,%r9
    0.00 :	  41bfc7:       mov    %rdx,0x8(%rbx)
    0.00 :	  41bfcb:       mov    %rbp,(%rbx,%rbp,1)
    0.00 :	  41bfcf:       mov    %r9,%rbx
    0.00 :	  41bfd2:       je     41c080 <malloc_consolidate+0x1b0>
    0.00 :	  41bfd8:       mov    0x8(%rbx),%rax
    0.00 :	  41bfdc:       mov    0x10(%rbx),%r9
    0.00 :	  41bfe0:       mov    %rax,%rbp
    0.00 :	  41bfe3:       and    $0xfffffffffffffffa,%rbp
    0.00 :	  41bfe7:       lea    (%rbx,%rbp,1),%r12
    0.00 :	  41bfeb:       mov    0x8(%r12),%r13
    0.00 :	  41bff0:       and    $0xfffffffffffffff8,%r13
    0.00 :	  41bff4:       test   $0x1,%al
    0.00 :	  41bff6:       jne    41c040 <malloc_consolidate+0x170>
    0.00 :	  41bff8:       mov    (%rbx),%rax
    0.00 :	  41bffb:       sub    %rax,%rbx
    0.00 :	  41bffe:       add    %rax,%rbp
    0.00 :	  41c001:       mov    0x10(%rbx),%r11
    0.00 :	  41c005:       mov    0x18(%rbx),%rax
    0.00 :	  41c009:       cmp    0x18(%r11),%rbx
    0.00 :	  41c00d:       jne    41c0b0 <malloc_consolidate+0x1e0>
    0.00 :	  41c013:       cmp    0x10(%rax),%rbx
    0.00 :	  41c017:       jne    41c0b0 <malloc_consolidate+0x1e0>
    0.00 :	  41c01d:       cmpq   $0x3ff,0x8(%rbx)
    0.00 :	  41c025:       mov    %rax,0x18(%r11)
    0.00 :	  41c029:       mov    %r11,0x10(%rax)
    0.00 :	  41c02d:       jbe    41c040 <malloc_consolidate+0x170>
    0.00 :	  41c02f:       mov    0x20(%rbx),%rax
    0.00 :	  41c033:       test   %rax,%rax
    0.00 :	  41c036:       jne    41c2a0 <malloc_consolidate+0x3d0>
    0.00 :	  41c03c:       nopl   0x0(%rax)
    0.00 :	  41c040:       cmp    0x58(%r14),%r12
    0.00 :	  41c044:       je     41c060 <malloc_consolidate+0x190>
    0.00 :	  41c046:       testb  $0x1,0x8(%r12,%r13,1)
    0.00 :	  41c04c:       je     41bf48 <malloc_consolidate+0x78>
    0.00 :	  41c052:       andq   $0xfffffffffffffffe,0x8(%r12)
    0.00 :	  41c058:       jmpq   41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41c05d:       nopl   (%rax)
    0.00 :	  41c060:       add    %r13,%rbp
    0.00 :	  41c063:       or     $0x1,%rbp
    0.00 :	  41c067:       test   %r9,%r9
    0.00 :	  41c06a:       mov    %rbp,0x8(%rbx)
    0.00 :	  41c06e:       mov    %rbx,0x58(%r14)
    0.00 :	  41c072:       mov    %r9,%rbx
    0.00 :	  41c075:       jne    41bfd8 <malloc_consolidate+0x108>
    0.00 :	  41c07b:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41c080:       mov    (%rsp),%r11
    0.00 :	  41c084:       mov    %r15,%r10
    0.00 :	  41c087:       add    $0x8,%r11
    0.00 :	  41c08b:       lea    -0x8(%r11),%rax
    0.00 :	  41c08f:       cmp    %rax,0x8(%rsp)
    0.00 :	  41c094:       jne    41bf28 <malloc_consolidate+0x58>
    0.00 :	  41c09a:       add    $0x68,%rsp
    0.00 :	  41c09e:       pop    %rbx
    0.00 :	  41c09f:       pop    %rbp
    0.00 :	  41c0a0:       pop    %r12
    0.00 :	  41c0a2:       pop    %r13
    0.00 :	  41c0a4:       pop    %r14
    0.00 :	  41c0a6:       pop    %r15
    0.00 :	  41c0a8:       retq   
    0.00 :	  41c0a9:       nopl   0x0(%rax)
    0.00 :	  41c0b0:       test   %r14,%r14
    0.00 :	  41c0b3:       mov    0x2b36b6(%rip),%r11d        # 6cf770 <check_action>
    0.00 :	  41c0ba:       je     41c0c1 <malloc_consolidate+0x1f1>
    0.00 :	  41c0bc:       orl    $0x4,0x4(%r14)
    0.00 :	  41c0c1:       mov    %r11d,%eax
    0.00 :	  41c0c4:       and    $0x5,%eax
    0.00 :	  41c0c7:       cmp    $0x5,%eax
    0.00 :	  41c0ca:       je     41c31b <malloc_consolidate+0x44b>
    0.00 :	  41c0d0:       test   $0x1,%r11b
    0.00 :	  41c0d4:       jne    41c120 <malloc_consolidate+0x250>
    0.00 :	  41c0d6:       and    $0x2,%r11d
    0.00 :	  41c0da:       je     41c040 <malloc_consolidate+0x170>
    0.00 :	  41c0e0:       callq  411ad0 <abort>
    0.00 :	  41c0e5:       nopl   (%rax)
    0.00 :	  41c0e8:       mov    0x2b3681(%rip),%r13d        # 6cf770 <check_action>
    0.00 :	  41c0ef:       orl    $0x4,0x4(%r14)
    0.00 :	  41c0f4:       mov    %r13d,%eax
    0.00 :	  41c0f7:       and    $0x5,%eax
    0.00 :	  41c0fa:       cmp    $0x5,%eax
    0.00 :	  41c0fd:       je     41c341 <malloc_consolidate+0x471>
    0.00 :	  41c103:       test   $0x1,%r13b
    0.00 :	  41c107:       jne    41c1f0 <malloc_consolidate+0x320>
    0.00 :	  41c10d:       and    $0x2,%r13d
    0.00 :	  41c111:       je     41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41c117:       jmp    41c0e0 <malloc_consolidate+0x210>
    0.00 :	  41c119:       nopl   0x0(%rax)
    0.00 :	  41c120:       lea    0x50(%rsp),%rsi
    0.00 :	  41c125:       xor    %ecx,%ecx
    0.00 :	  41c127:       mov    $0x10,%edx
    0.00 :	  41c12c:       mov    %rbx,%rdi
    0.00 :	  41c12f:       mov    %r11d,0x20(%rsp)
    0.00 :	  41c134:       mov    %r9,0x18(%rsp)
    0.00 :	  41c139:       movb   $0x0,0x50(%rsp)
    0.00 :	  41c13e:       callq  455480 <_itoa_word>
    0.00 :	  41c143:       mov    %rax,%r8
    0.00 :	  41c146:       lea    0x40(%rsp),%rax
    0.00 :	  41c14b:       mov    0x18(%rsp),%r9
    0.00 :	  41c150:       mov    0x20(%rsp),%r11d
    0.00 :	  41c155:       cmp    %rax,%r8
    0.00 :	  41c158:       jbe    41c1aa <malloc_consolidate+0x2da>
    0.00 :	  41c15a:       mov    0x10(%rsp),%rax
    0.00 :	  41c15f:       lea    -0x1(%r8),%rcx
    0.00 :	  41c163:       mov    %r8,%rdi
    0.00 :	  41c166:       mov    $0x30,%esi
    0.00 :	  41c16b:       mov    %r11d,0x30(%rsp)
    0.00 :	  41c170:       mov    %r9,0x28(%rsp)
    0.00 :	  41c175:       mov    %rcx,0x20(%rsp)
    0.00 :	  41c17a:       mov    %r8,0x18(%rsp)
    0.00 :	  41c17f:       lea    (%rax,%rcx,1),%rdx
    0.00 :	  41c183:       sub    %rdx,%rdi
    0.00 :	  41c186:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41c18b:       mov    0x20(%rsp),%rcx
    0.00 :	  41c190:       lea    0x3f(%rsp),%rax
    0.00 :	  41c195:       mov    0x18(%rsp),%r8
    0.00 :	  41c19a:       mov    0x30(%rsp),%r11d
    0.00 :	  41c19f:       mov    0x28(%rsp),%r9
    0.00 :	  41c1a4:       sub    %rcx,%rax
    0.00 :	  41c1a7:       add    %rax,%r8
    0.00 :	  41c1aa:       mov    0x2b610f(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41c1b1:       mov    %r11d,%edi
    0.00 :	  41c1b4:       mov    $0x4a56d8,%edx
    0.00 :	  41c1b9:       mov    $0x4a5718,%ecx
    0.00 :	  41c1be:       mov    $0x4a5a30,%esi
    0.00 :	  41c1c3:       mov    %r9,0x18(%rsp)
    0.00 :	  41c1c8:       mov    (%rax),%rax
    0.00 :	  41c1cb:       test   %rax,%rax
    0.00 :	  41c1ce:       cmovne %rax,%rdx
    0.00 :	  41c1d2:       and    $0x2,%edi
    0.00 :	  41c1d5:       xor    %eax,%eax
    0.00 :	  41c1d7:       callq  415660 <__libc_message>
    0.00 :	  41c1dc:       mov    0x18(%rsp),%r9
    0.00 :	  41c1e1:       jmpq   41c040 <malloc_consolidate+0x170>
    0.00 :	  41c1e6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  41c1f0:       lea    0x50(%rsp),%rsi
    0.00 :	  41c1f5:       xor    %ecx,%ecx
    0.00 :	  41c1f7:       mov    %r12,%rdi
    0.00 :	  41c1fa:       mov    $0x10,%edx
    0.00 :	  41c1ff:       mov    %r9,0x18(%rsp)
    0.00 :	  41c204:       movb   $0x0,0x50(%rsp)
    0.00 :	  41c209:       callq  455480 <_itoa_word>
    0.00 :	  41c20e:       mov    %rax,%r12
    0.00 :	  41c211:       lea    0x40(%rsp),%rax
    0.00 :	  41c216:       mov    0x18(%rsp),%r9
    0.00 :	  41c21b:       cmp    %rax,%r12
    0.00 :	  41c21e:       jbe    41c25d <malloc_consolidate+0x38d>
    0.00 :	  41c220:       mov    0x10(%rsp),%rax
    0.00 :	  41c225:       lea    -0x1(%r12),%rcx
    0.00 :	  41c22a:       mov    %r12,%rdi
    0.00 :	  41c22d:       mov    $0x30,%esi
    0.00 :	  41c232:       mov    %r9,0x20(%rsp)
    0.00 :	  41c237:       mov    %rcx,0x18(%rsp)
    0.00 :	  41c23c:       lea    (%rax,%rcx,1),%rdx
    0.00 :	  41c240:       sub    %rdx,%rdi
    0.00 :	  41c243:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41c248:       mov    0x18(%rsp),%rcx
    0.00 :	  41c24d:       lea    0x3f(%rsp),%rax
    0.00 :	  41c252:       mov    0x20(%rsp),%r9
    0.00 :	  41c257:       sub    %rcx,%rax
    0.00 :	  41c25a:       add    %rax,%r12
    0.00 :	  41c25d:       mov    0x2b605c(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41c264:       mov    $0x4a56d8,%edx
    0.00 :	  41c269:       mov    %r13d,%edi
    0.00 :	  41c26c:       mov    %r12,%r8
    0.00 :	  41c26f:       mov    $0x4a5718,%ecx
    0.00 :	  41c274:       mov    $0x4a5a30,%esi
    0.00 :	  41c279:       mov    %r9,0x18(%rsp)
    0.00 :	  41c27e:       mov    (%rax),%rax
    0.00 :	  41c281:       test   %rax,%rax
    0.00 :	  41c284:       cmovne %rax,%rdx
    0.00 :	  41c288:       and    $0x2,%edi
    0.00 :	  41c28b:       xor    %eax,%eax
    0.00 :	  41c28d:       callq  415660 <__libc_message>
    0.00 :	  41c292:       mov    0x18(%rsp),%r9
    0.00 :	  41c297:       jmpq   41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41c29c:       nopl   0x0(%rax)
    0.00 :	  41c2a0:       cmp    0x28(%rax),%rbx
    0.00 :	  41c2a4:       jne    41c3a7 <malloc_consolidate+0x4d7>
    0.00 :	  41c2aa:       mov    0x28(%rbx),%rdx
    0.00 :	  41c2ae:       cmp    0x20(%rdx),%rbx
    0.00 :	  41c2b2:       jne    41c3a7 <malloc_consolidate+0x4d7>
    0.00 :	  41c2b8:       cmpq   $0x0,0x20(%r11)
    0.00 :	  41c2bd:       je     41c3e6 <malloc_consolidate+0x516>
    0.00 :	  41c2c3:       mov    0x28(%rbx),%rdx
    0.00 :	  41c2c7:       mov    %rdx,0x28(%rax)
    0.00 :	  41c2cb:       mov    0x28(%rbx),%rdx
    0.00 :	  41c2cf:       mov    %rax,0x20(%rdx)
    0.00 :	  41c2d3:       jmpq   41c040 <malloc_consolidate+0x170>
    0.00 :	  41c2d8:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41c2e0:       cmp    0x28(%rax),%r12
    0.00 :	  41c2e4:       jne    41c410 <malloc_consolidate+0x540>
    0.00 :	  41c2ea:       mov    0x28(%r12),%rdx
    0.00 :	  41c2ef:       cmp    0x20(%rdx),%r12
    0.00 :	  41c2f3:       jne    41c410 <malloc_consolidate+0x540>
    0.00 :	  41c2f9:       cmpq   $0x0,0x20(%r13)
    0.00 :	  41c2fe:       je     41c44a <malloc_consolidate+0x57a>
    0.00 :	  41c304:       mov    0x28(%r12),%rdx
    0.00 :	  41c309:       mov    %rdx,0x28(%rax)
    0.00 :	  41c30d:       mov    0x28(%r12),%rdx
    0.00 :	  41c312:       mov    %rax,0x20(%rdx)
    0.00 :	  41c316:       jmpq   41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41c31b:       mov    %r11d,%edi
    0.00 :	  41c31e:       mov    $0x4a5718,%edx
    0.00 :	  41c323:       mov    $0x4c00dc,%esi
    0.00 :	  41c328:       and    $0x2,%edi
    0.00 :	  41c32b:       xor    %eax,%eax
    0.00 :	  41c32d:       mov    %r9,0x18(%rsp)
    0.00 :	  41c332:       callq  415660 <__libc_message>
    0.00 :	  41c337:       mov    0x18(%rsp),%r9
    0.00 :	  41c33c:       jmpq   41c040 <malloc_consolidate+0x170>
    0.00 :	  41c341:       mov    %r13d,%edi
    0.00 :	  41c344:       mov    $0x4a5718,%edx
    0.00 :	  41c349:       mov    $0x4c00dc,%esi
    0.00 :	  41c34e:       and    $0x2,%edi
    0.00 :	  41c351:       xor    %eax,%eax
    0.00 :	  41c353:       mov    %r9,0x18(%rsp)
    0.00 :	  41c358:       callq  415660 <__libc_message>
    0.00 :	  41c35d:       mov    0x18(%rsp),%r9
    0.00 :	  41c362:       jmpq   41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41c367:       lea    0x58(%rdi),%rcx
    0.00 :	  41c36b:       lea    0x848(%rdi),%rdx
    0.00 :	  41c372:       mov    %rcx,%rax
    0.00 :	  41c375:       nopl   (%rax)
    0.00 :	  41c378:       mov    %rax,0x18(%rax)
   33.33 :	  41c37c:       mov    %rax,0x10(%rax)
   33.33 :	  41c380:       add    $0x10,%rax
    0.00 :	  41c384:       cmp    %rax,%rdx
    0.00 :	  41c387:       jne    41c378 <malloc_consolidate+0x4a8>
    0.00 :	  41c389:       cmp    $0x6cf800,%rdi
    0.00 :	  41c390:       je     41c62d <malloc_consolidate+0x75d>
    0.00 :	  41c396:       mov    0x4(%rdi),%eax
    0.00 :	  41c399:       or     $0x2,%eax
    0.00 :	  41c39c:       or     $0x1,%eax
    0.00 :	  41c39f:       mov    %rcx,0x58(%rdi)
    0.00 :	  41c3a3:       mov    %eax,0x4(%rdi)
    0.00 :	  41c3a6:       retq   
    0.00 :	  41c3a7:       test   %r14,%r14
    0.00 :	  41c3aa:       mov    0x2b33bf(%rip),%r8d        # 6cf770 <check_action>
    0.00 :	  41c3b1:       je     41c3b8 <malloc_consolidate+0x4e8>
    0.00 :	  41c3b3:       orl    $0x4,0x4(%r14)
    0.00 :	  41c3b8:       mov    %r8d,%edx
    0.00 :	  41c3bb:       and    $0x5,%edx
    0.00 :	  41c3be:       cmp    $0x5,%edx
    0.00 :	  41c3c1:       je     41c650 <malloc_consolidate+0x780>
    0.00 :	  41c3c7:       test   $0x1,%r8b
    0.00 :	  41c3cb:       jne    41c477 <malloc_consolidate+0x5a7>
    0.00 :	  41c3d1:       and    $0x2,%r8d
    0.00 :	  41c3d5:       jne    41c0e0 <malloc_consolidate+0x210>
    0.00 :	  41c3db:       cmpq   $0x0,0x20(%r11)
    0.00 :	  41c3e0:       jne    41c2c3 <malloc_consolidate+0x3f3>
    0.00 :	  41c3e6:       cmp    %rax,%rbx
    0.00 :	  41c3e9:       je     41c643 <malloc_consolidate+0x773>
    0.00 :	  41c3ef:       mov    %rax,0x20(%r11)
    0.00 :	  41c3f3:       mov    0x28(%rbx),%rax
    0.00 :	  41c3f7:       mov    %rax,0x28(%r11)
    0.00 :	  41c3fb:       mov    0x20(%rbx),%rax
    0.00 :	  41c3ff:       mov    %r11,0x28(%rax)
    0.00 :	  41c403:       mov    0x28(%rbx),%rax
    0.00 :	  41c407:       mov    %r11,0x20(%rax)
    0.00 :	  41c40b:       jmpq   41c040 <malloc_consolidate+0x170>
    0.00 :	  41c410:       mov    0x2b3359(%rip),%r11d        # 6cf770 <check_action>
    0.00 :	  41c417:       orl    $0x4,0x4(%r14)
    0.00 :	  41c41c:       mov    %r11d,%edx
    0.00 :	  41c41f:       and    $0x5,%edx
    0.00 :	  41c422:       cmp    $0x5,%edx
    0.00 :	  41c425:       je     41c691 <malloc_consolidate+0x7c1>
    0.00 :	  41c42b:       test   $0x1,%r11b
    0.00 :	  41c42f:       jne    41c562 <malloc_consolidate+0x692>
    0.00 :	  41c435:       and    $0x2,%r11d
    0.00 :	  41c439:       jne    41c0e0 <malloc_consolidate+0x210>
    0.00 :	  41c43f:       cmpq   $0x0,0x20(%r13)
    0.00 :	  41c444:       jne    41c304 <malloc_consolidate+0x434>
    0.00 :	  41c44a:       cmp    %rax,%r12
    0.00 :	  41c44d:       je     41c684 <malloc_consolidate+0x7b4>
    0.00 :	  41c453:       mov    %rax,0x20(%r13)
    0.00 :	  41c457:       mov    0x28(%r12),%rax
    0.00 :	  41c45c:       mov    %rax,0x28(%r13)
    0.00 :	  41c460:       mov    0x20(%r12),%rax
    0.00 :	  41c465:       mov    %r13,0x28(%rax)
    0.00 :	  41c469:       mov    0x28(%r12),%rax
    0.00 :	  41c46e:       mov    %r13,0x20(%rax)
    0.00 :	  41c472:       jmpq   41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41c477:       lea    0x50(%rsp),%rsi
    0.00 :	  41c47c:       xor    %ecx,%ecx
    0.00 :	  41c47e:       mov    $0x10,%edx
    0.00 :	  41c483:       mov    %rbx,%rdi
    0.00 :	  41c486:       mov    %r8d,0x28(%rsp)
    0.00 :	  41c48b:       mov    %r11,0x20(%rsp)
    0.00 :	  41c490:       mov    %r9,0x18(%rsp)
    0.00 :	  41c495:       movb   $0x0,0x50(%rsp)
    0.00 :	  41c49a:       callq  455480 <_itoa_word>
    0.00 :	  41c49f:       mov    %rax,%rcx
    0.00 :	  41c4a2:       lea    0x40(%rsp),%rax
    0.00 :	  41c4a7:       mov    0x18(%rsp),%r9
    0.00 :	  41c4ac:       mov    0x20(%rsp),%r11
    0.00 :	  41c4b1:       mov    0x28(%rsp),%r8d
    0.00 :	  41c4b6:       cmp    %rax,%rcx
    0.00 :	  41c4b9:       jbe    41c515 <malloc_consolidate+0x645>
    0.00 :	  41c4bb:       mov    0x10(%rsp),%rax
    0.00 :	  41c4c0:       lea    -0x1(%rcx),%r10
    0.00 :	  41c4c4:       mov    %rcx,%rdi
    0.00 :	  41c4c7:       mov    $0x30,%esi
    0.00 :	  41c4cc:       mov    %r8d,0x3c(%rsp)
    0.00 :	  41c4d1:       mov    %r11,0x30(%rsp)
    0.00 :	  41c4d6:       mov    %r9,0x28(%rsp)
    0.00 :	  41c4db:       mov    %r10,0x20(%rsp)
    0.00 :	  41c4e0:       lea    (%rax,%r10,1),%rdx
    0.00 :	  41c4e4:       mov    %rcx,0x18(%rsp)
    0.00 :	  41c4e9:       sub    %rdx,%rdi
    0.00 :	  41c4ec:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41c4f1:       mov    0x20(%rsp),%r10
    0.00 :	  41c4f6:       lea    0x3f(%rsp),%rax
    0.00 :	  41c4fb:       mov    0x18(%rsp),%rcx
    0.00 :	  41c500:       mov    0x3c(%rsp),%r8d
    0.00 :	  41c505:       mov    0x30(%rsp),%r11
    0.00 :	  41c50a:       mov    0x28(%rsp),%r9
    0.00 :	  41c50f:       sub    %r10,%rax
    0.00 :	  41c512:       add    %rax,%rcx
    0.00 :	  41c515:       mov    0x2b5da4(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41c51c:       mov    %r8d,%edi
    0.00 :	  41c51f:       mov    $0x4a56d8,%edx
    0.00 :	  41c524:       mov    %rcx,%r8
    0.00 :	  41c527:       mov    $0x4a5a30,%esi
    0.00 :	  41c52c:       mov    $0x4a5a78,%ecx
    0.00 :	  41c531:       mov    %r11,0x20(%rsp)
    0.00 :	  41c536:       mov    %r9,0x18(%rsp)
    0.00 :	  41c53b:       mov    (%rax),%rax
    0.00 :	  41c53e:       test   %rax,%rax
    0.00 :	  41c541:       cmovne %rax,%rdx
    0.00 :	  41c545:       xor    %eax,%eax
    0.00 :	  41c547:       and    $0x2,%edi
    0.00 :	  41c54a:       callq  415660 <__libc_message>
    0.00 :	  41c54f:       mov    0x20(%rbx),%rax
    0.00 :	  41c553:       mov    0x18(%rsp),%r9
    0.00 :	  41c558:       mov    0x20(%rsp),%r11
    0.00 :	  41c55d:       jmpq   41c2b8 <malloc_consolidate+0x3e8>
    0.00 :	  41c562:       lea    0x50(%rsp),%rsi
    0.00 :	  41c567:       xor    %ecx,%ecx
    0.00 :	  41c569:       mov    $0x10,%edx
    0.00 :	  41c56e:       mov    %r12,%rdi
    0.00 :	  41c571:       mov    %r11d,0x20(%rsp)
    0.00 :	  41c576:       mov    %r9,0x18(%rsp)
    0.00 :	  41c57b:       movb   $0x0,0x50(%rsp)
    0.00 :	  41c580:       callq  455480 <_itoa_word>
    0.00 :	  41c585:       mov    %rax,%r8
    0.00 :	  41c588:       lea    0x40(%rsp),%rax
    0.00 :	  41c58d:       mov    0x18(%rsp),%r9
    0.00 :	  41c592:       mov    0x20(%rsp),%r11d
    0.00 :	  41c597:       cmp    %rax,%r8
    0.00 :	  41c59a:       jbe    41c5ec <malloc_consolidate+0x71c>
    0.00 :	  41c59c:       mov    0x10(%rsp),%rax
    0.00 :	  41c5a1:       lea    -0x1(%r8),%rcx
    0.00 :	  41c5a5:       mov    %r8,%rdi
    0.00 :	  41c5a8:       mov    $0x30,%esi
    0.00 :	  41c5ad:       mov    %r11d,0x30(%rsp)
    0.00 :	  41c5b2:       mov    %r9,0x28(%rsp)
    0.00 :	  41c5b7:       mov    %rcx,0x20(%rsp)
    0.00 :	  41c5bc:       mov    %r8,0x18(%rsp)
    0.00 :	  41c5c1:       lea    (%rax,%rcx,1),%rdx
    0.00 :	  41c5c5:       sub    %rdx,%rdi
    0.00 :	  41c5c8:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41c5cd:       mov    0x20(%rsp),%rcx
    0.00 :	  41c5d2:       lea    0x3f(%rsp),%rax
    0.00 :	  41c5d7:       mov    0x18(%rsp),%r8
    0.00 :	  41c5dc:       mov    0x30(%rsp),%r11d
    0.00 :	  41c5e1:       mov    0x28(%rsp),%r9
    0.00 :	  41c5e6:       sub    %rcx,%rax
    0.00 :	  41c5e9:       add    %rax,%r8
    0.00 :	  41c5ec:       mov    0x2b5ccd(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41c5f3:       mov    %r11d,%edi
    0.00 :	  41c5f6:       mov    $0x4a56d8,%edx
    0.00 :	  41c5fb:       mov    $0x4a5a78,%ecx
    0.00 :	  41c600:       mov    $0x4a5a30,%esi
    0.00 :	  41c605:       mov    %r9,0x18(%rsp)
    0.00 :	  41c60a:       mov    (%rax),%rax
    0.00 :	  41c60d:       test   %rax,%rax
    0.00 :	  41c610:       cmovne %rax,%rdx
    0.00 :	  41c614:       xor    %eax,%eax
    0.00 :	  41c616:       and    $0x2,%edi
    0.00 :	  41c619:       callq  415660 <__libc_message>
    0.00 :	  41c61e:       mov    0x20(%r12),%rax
    0.00 :	  41c623:       mov    0x18(%rsp),%r9
    0.00 :	  41c628:       jmpq   41c2f9 <malloc_consolidate+0x429>
    0.00 :	  41c62d:       movq   $0x80,0x2b5000(%rip)        # 6d1638 <global_max_fast>
    0.00 :	  41c638:       mov    0x2b31c6(%rip),%eax        # 6cf804 <main_arena+0x4>
    0.00 :	  41c63e:       jmpq   41c39c <malloc_consolidate+0x4cc>
    0.00 :	  41c643:       mov    %r11,0x28(%r11)
    0.00 :	  41c647:       mov    %r11,0x20(%r11)
    0.00 :	  41c64b:       jmpq   41c040 <malloc_consolidate+0x170>
    0.00 :	  41c650:       mov    %r8d,%edi
    0.00 :	  41c653:       xor    %eax,%eax
    0.00 :	  41c655:       mov    $0x4a5a78,%edx
    0.00 :	  41c65a:       and    $0x2,%edi
    0.00 :	  41c65d:       mov    $0x4c00dc,%esi
    0.00 :	  41c662:       mov    %r11,0x20(%rsp)
    0.00 :	  41c667:       mov    %r9,0x18(%rsp)
    0.00 :	  41c66c:       callq  415660 <__libc_message>
    0.00 :	  41c671:       mov    0x20(%rbx),%rax
    0.00 :	  41c675:       mov    0x18(%rsp),%r9
    0.00 :	  41c67a:       mov    0x20(%rsp),%r11
    0.00 :	  41c67f:       jmpq   41c2b8 <malloc_consolidate+0x3e8>
    0.00 :	  41c684:       mov    %r13,0x28(%r13)
    0.00 :	  41c688:       mov    %r13,0x20(%r13)
    0.00 :	  41c68c:       jmpq   41bf90 <malloc_consolidate+0xc0>
    0.00 :	  41c691:       mov    %r11d,%edi
    0.00 :	  41c694:       xor    %eax,%eax
    0.00 :	  41c696:       mov    $0x4a5a78,%edx
    0.00 :	  41c69b:       and    $0x2,%edi
    0.00 :	  41c69e:       mov    $0x4c00dc,%esi
    0.00 :	  41c6a3:       mov    %r9,0x18(%rsp)
    0.00 :	  41c6a8:       callq  415660 <__libc_message>
    0.00 :	  41c6ad:       mov    0x20(%r12),%rax
    0.00 :	  41c6b2:       mov    0x18(%rsp),%r9
    0.00 :	  41c6b7:       jmpq   41c2f9 <malloc_consolidate+0x429>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000404486 <randombytes>:
         :	randombytes():
         :	#include "randombytes.h"
         :
         :	static int fd = -1;
         :
         :	void randombytes(unsigned char *x,unsigned long long xlen)
         :	{
    0.00 :	  404486:       push   %rbp
    0.00 :	  404487:       mov    %rsp,%rbp
    0.00 :	  40448a:       sub    $0x20,%rsp
    0.00 :	  40448e:       mov    %rdi,-0x18(%rbp)
    0.00 :	  404492:       mov    %rsi,-0x20(%rbp)
         :	  int i;
         :
         :	  if (fd == -1) {
    0.00 :	  404496:       mov    0x2cac04(%rip),%eax        # 6cf0a0 <fd>
   66.67 :	  40449c:       cmp    $0xffffffff,%eax
    0.00 :	  40449f:       jne    404534 <randombytes+0xae>
         :	    for (;;) {
         :	      fd = open("/dev/urandom",O_RDONLY);
    0.00 :	  4044a5:       mov    $0x0,%esi
    0.00 :	  4044aa:       mov    $0x4a4520,%edi
    0.00 :	  4044af:       mov    $0x0,%eax
    0.00 :	  4044b4:       callq  442720 <__libc_open>
    0.00 :	  4044b9:       mov    %eax,0x2cabe1(%rip)        # 6cf0a0 <fd>
         :	      if (fd != -1) break;
    0.00 :	  4044bf:       mov    0x2cabdb(%rip),%eax        # 6cf0a0 <fd>
    0.00 :	  4044c5:       cmp    $0xffffffff,%eax
    0.00 :	  4044c8:       jne    4044d6 <randombytes+0x50>
         :	      sleep(1);
    0.00 :	  4044ca:       mov    $0x1,%edi
    0.00 :	  4044cf:       callq  441d20 <__sleep>
         :	    }
    0.00 :	  4044d4:       jmp    4044a5 <randombytes+0x1f>
         :	  int i;
         :
         :	  if (fd == -1) {
         :	    for (;;) {
         :	      fd = open("/dev/urandom",O_RDONLY);
         :	      if (fd != -1) break;
    0.00 :	  4044d6:       nop
         :	      sleep(1);
         :	    }
         :	  }
         :
         :	  while (xlen > 0) {
    0.00 :	  4044d7:       jmp    404534 <randombytes+0xae>
         :	    if (xlen < 1048576) i = xlen; else i = 1048576;
   33.33 :	  4044d9:       cmpq   $0xfffff,-0x20(%rbp)
    0.00 :	  4044e1:       ja     4044ec <randombytes+0x66>
    0.00 :	  4044e3:       mov    -0x20(%rbp),%rax
    0.00 :	  4044e7:       mov    %eax,-0x4(%rbp)
    0.00 :	  4044ea:       jmp    4044f3 <randombytes+0x6d>
    0.00 :	  4044ec:       movl   $0x100000,-0x4(%rbp)
         :
         :	    i = read(fd,x,i);
    0.00 :	  4044f3:       mov    -0x4(%rbp),%eax
    0.00 :	  4044f6:       movslq %eax,%rdx
    0.00 :	  4044f9:       mov    0x2caba1(%rip),%eax        # 6cf0a0 <fd>
    0.00 :	  4044ff:       mov    -0x18(%rbp),%rcx
    0.00 :	  404503:       mov    %rcx,%rsi
    0.00 :	  404506:       mov    %eax,%edi
    0.00 :	  404508:       callq  442780 <__libc_read>
    0.00 :	  40450d:       mov    %eax,-0x4(%rbp)
         :	    if (i < 1) {
    0.00 :	  404510:       cmpl   $0x0,-0x4(%rbp)
    0.00 :	  404514:       jg     404522 <randombytes+0x9c>
         :	      sleep(1);
    0.00 :	  404516:       mov    $0x1,%edi
    0.00 :	  40451b:       callq  441d20 <__sleep>
         :	      continue;
    0.00 :	  404520:       jmp    404534 <randombytes+0xae>
         :	    }
         :
         :	    x += i;
    0.00 :	  404522:       mov    -0x4(%rbp),%eax
    0.00 :	  404525:       cltq   
    0.00 :	  404527:       add    %rax,-0x18(%rbp)
         :	    xlen -= i;
    0.00 :	  40452b:       mov    -0x4(%rbp),%eax
    0.00 :	  40452e:       cltq   
    0.00 :	  404530:       sub    %rax,-0x20(%rbp)
         :	      if (fd != -1) break;
         :	      sleep(1);
         :	    }
         :	  }
         :
         :	  while (xlen > 0) {
    0.00 :	  404534:       cmpq   $0x0,-0x20(%rbp)
    0.00 :	  404539:       jne    4044d9 <randombytes+0x53>
         :	    }
         :
         :	    x += i;
         :	    xlen -= i;
         :	  }
         :	}
    0.00 :	  40453b:       nop
    0.00 :	  40453c:       leaveq 
    0.00 :	  40453d:       retq   
 Percent |	Source code & Disassembly of kcore for cycles:u
---------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section load0:
         :
         :	ffffffff81834f90 <load0>:
  100.00 :	  ffffffff81834f90:       swapgs 
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000421b10 <__calloc>:
         :	__calloc():
   50.00 :	  421b10:       push   %r13
    0.00 :	  421b12:       mov    %rdi,%rdx
    0.00 :	  421b15:       push   %r12
    0.00 :	  421b17:       push   %rbp
    0.00 :	  421b18:       push   %rbx
    0.00 :	  421b19:       mov    %rdi,%rbp
    0.00 :	  421b1c:       or     %rsi,%rdx
    0.00 :	  421b1f:       mov    $0xffffffff,%eax
    0.00 :	  421b24:       sub    $0x8,%rsp
    0.00 :	  421b28:       imul   %rsi,%rbp
    0.00 :	  421b2c:       cmp    %rax,%rdx
    0.00 :	  421b2f:       jbe    421b50 <__calloc+0x40>
    0.00 :	  421b31:       test   %rsi,%rsi
    0.00 :	  421b34:       je     421b50 <__calloc+0x40>
    0.00 :	  421b36:       xor    %edx,%edx
    0.00 :	  421b38:       mov    %rbp,%rax
    0.00 :	  421b3b:       div    %rsi
    0.00 :	  421b3e:       cmp    %rax,%rdi
    0.00 :	  421b41:       jne    421df0 <__calloc+0x2e0>
    0.00 :	  421b47:       nopw   0x0(%rax,%rax,1)
    0.00 :	  421b50:       mov    0x2adc31(%rip),%rax        # 6cf788 <__malloc_hook>
    0.00 :	  421b57:       test   %rax,%rax
    0.00 :	  421b5a:       jne    421dd0 <__calloc+0x2c0>
    0.00 :	  421b60:       mov    $0xffffffffffffffd8,%rax
    0.00 :	  421b67:       mov    %fs:(%rax),%rbx
    0.00 :	  421b6b:       test   %rbx,%rbx
    0.00 :	  421b6e:       je     421b7c <__calloc+0x6c>
    0.00 :	  421b70:       mov    0x4(%rbx),%eax
    0.00 :	  421b73:       and    $0x4,%eax
    0.00 :	  421b76:       je     421c50 <__calloc+0x140>
    0.00 :	  421b7c:       callq  41b200 <get_free_list>
    0.00 :	  421b81:       test   %rax,%rax
    0.00 :	  421b84:       mov    %rax,%rbx
    0.00 :	  421b87:       je     421e08 <__calloc+0x2f8>
    0.00 :	  421b8d:       mov    0x58(%rbx),%r13
    0.00 :	  421b91:       mov    0x8(%r13),%r12
    0.00 :	  421b95:       and    $0xfffffffffffffff8,%r12
    0.00 :	  421b99:       cmp    $0x6cf800,%rbx
    0.00 :	  421ba0:       je     421d40 <__calloc+0x230>
    0.00 :	  421ba6:       mov    %r13,%rax
    0.00 :	  421ba9:       mov    %rbp,%rsi
    0.00 :	  421bac:       mov    %rbx,%rdi
    0.00 :	  421baf:       and    $0xfffffffffc000000,%rax
    0.00 :	  421bb5:       add    0x18(%rax),%rax
    0.00 :	  421bb9:       sub    %r13,%rax
    0.00 :	  421bbc:       cmp    %rax,%r12
    0.00 :	  421bbf:       cmovb  %rax,%r12
    0.00 :	  421bc3:       callq  41ed10 <_int_malloc>
    0.00 :	  421bc8:       test   %rax,%rax
    0.00 :	  421bcb:       mov    %rax,%r8
    0.00 :	  421bce:       je     421d60 <__calloc+0x250>
    0.00 :	  421bd4:       mov    -0x8(%r8),%rax
    0.00 :	  421bd8:       test   $0x2,%al
    0.00 :	  421bda:       jne    421bf2 <__calloc+0xe2>
    0.00 :	  421bdc:       test   $0x4,%al
    0.00 :	  421bde:       mov    $0x6cf800,%edx
    0.00 :	  421be3:       jne    421da0 <__calloc+0x290>
    0.00 :	  421be9:       cmp    %rbx,%rdx
    0.00 :	  421bec:       jne    421e47 <__calloc+0x337>
    0.00 :	  421bf2:       test   %rbx,%rbx
    0.00 :	  421bf5:       je     421c2a <__calloc+0x11a>
    0.00 :	  421bf7:       cmpl   $0x0,0x2b05be(%rip)        # 6d21bc <__libc_multiple_threads>
    0.00 :	  421bfe:       je     421c07 <__calloc+0xf7>
    0.00 :	  421c00:       lock decl (%rbx)
    0.00 :	  421c03:       jne    421c0b <__calloc+0xfb>
    0.00 :	  421c05:       jmp    421c21 <__calloc+0x111>
    0.00 :	  421c07:       decl   (%rbx)
    0.00 :	  421c09:       je     421c21 <__calloc+0x111>
    0.00 :	  421c0b:       lea    (%rbx),%rdi
    0.00 :	  421c0e:       sub    $0x80,%rsp
    0.00 :	  421c15:       callq  445bc0 <__lll_unlock_wake_private>
    0.00 :	  421c1a:       add    $0x80,%rsp
    0.00 :	  421c21:       test   %r8,%r8
    0.00 :	  421c24:       je     421de7 <__calloc+0x2d7>
    0.00 :	  421c2a:       mov    -0x8(%r8),%rdx
    0.00 :	  421c2e:       test   $0x2,%dl
    0.00 :	  421c31:       je     421c90 <__calloc+0x180>
    0.00 :	  421c33:       mov    0x2af9fb(%rip),%edx        # 6d1634 <perturb_byte>
    0.00 :	  421c39:       mov    %r8,%rax
    0.00 :	  421c3c:       test   %edx,%edx
    0.00 :	  421c3e:       jne    421db8 <__calloc+0x2a8>
    0.00 :	  421c44:       add    $0x8,%rsp
    0.00 :	  421c48:       pop    %rbx
    0.00 :	  421c49:       pop    %rbp
    0.00 :	  421c4a:       pop    %r12
    0.00 :	  421c4c:       pop    %r13
    0.00 :	  421c4e:       retq   
    0.00 :	  421c4f:       nop
    0.00 :	  421c50:       mov    $0x1,%esi
    0.00 :	  421c55:       cmpl   $0x0,0x2b0560(%rip)        # 6d21bc <__libc_multiple_threads>
    0.00 :	  421c5c:       je     421c66 <__calloc+0x156>
    0.00 :	  421c5e:       lock cmpxchg %esi,(%rbx)
    0.00 :	  421c62:       jne    421c6b <__calloc+0x15b>
    0.00 :	  421c64:       jmp    421c81 <__calloc+0x171>
    0.00 :	  421c66:       cmpxchg %esi,(%rbx)
    0.00 :	  421c69:       je     421c81 <__calloc+0x171>
    0.00 :	  421c6b:       lea    (%rbx),%rdi
    0.00 :	  421c6e:       sub    $0x80,%rsp
    0.00 :	  421c75:       callq  445b90 <__lll_lock_wait_private>
    0.00 :	  421c7a:       add    $0x80,%rsp
    0.00 :	  421c81:       jmpq   421b8d <__calloc+0x7d>
    0.00 :	  421c86:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  421c90:       mov    0x2af99e(%rip),%eax        # 6d1634 <perturb_byte>
    0.00 :	  421c96:       and    $0xfffffffffffffff8,%rdx
    0.00 :	  421c9a:       test   %eax,%eax
    0.00 :	  421c9c:       jne    421cae <__calloc+0x19e>
    0.00 :	  421c9e:       lea    -0x10(%r8),%rax
    0.00 :	  421ca2:       cmp    %rax,%r13
    0.00 :	  421ca5:       jne    421cae <__calloc+0x19e>
    0.00 :	  421ca7:       cmp    %r12,%rdx
    0.00 :	  421caa:       cmova  %r12,%rdx
    0.00 :	  421cae:       sub    $0x8,%rdx
    0.00 :	  421cb2:       mov    %rdx,%rcx
    0.00 :	  421cb5:       shr    $0x3,%rcx
    0.00 :	  421cb9:       cmp    $0x2,%rcx
   50.00 :	  421cbd:       jbe    421e60 <__calloc+0x350>
    0.00 :	  421cc3:       cmp    $0x9,%rcx
    0.00 :	  421cc7:       ja     421dbb <__calloc+0x2ab>
    0.00 :	  421ccd:       cmp    $0x4,%rcx
    0.00 :	  421cd1:       movq   $0x0,(%r8)
    0.00 :	  421cd8:       movq   $0x0,0x8(%r8)
    0.00 :	  421ce0:       movq   $0x0,0x10(%r8)
    0.00 :	  421ce8:       mov    %r8,%rax
    0.00 :	  421ceb:       jbe    421c44 <__calloc+0x134>
    0.00 :	  421cf1:       cmp    $0x6,%rcx
    0.00 :	  421cf5:       movq   $0x0,0x18(%r8)
    0.00 :	  421cfd:       movq   $0x0,0x20(%r8)
    0.00 :	  421d05:       jbe    421c44 <__calloc+0x134>
    0.00 :	  421d0b:       cmp    $0x9,%rcx
    0.00 :	  421d0f:       movq   $0x0,0x28(%r8)
    0.00 :	  421d17:       movq   $0x0,0x30(%r8)
    0.00 :	  421d1f:       jne    421c44 <__calloc+0x134>
    0.00 :	  421d25:       movq   $0x0,0x38(%r8)
    0.00 :	  421d2d:       movq   $0x0,0x40(%r8)
    0.00 :	  421d35:       jmpq   421c44 <__calloc+0x134>
    0.00 :	  421d3a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  421d40:       mov    %rbp,%rsi
    0.00 :	  421d43:       mov    $0x6cf800,%edi
    0.00 :	  421d48:       callq  41ed10 <_int_malloc>
    0.00 :	  421d4d:       test   %rax,%rax
    0.00 :	  421d50:       mov    %rax,%r8
    0.00 :	  421d53:       jne    421bd4 <__calloc+0xc4>
    0.00 :	  421d59:       nopl   0x0(%rax)
    0.00 :	  421d60:       nop
    0.00 :	  421d61:       mov    %rbx,%rdi
    0.00 :	  421d64:       mov    %rbp,%rsi
    0.00 :	  421d67:       callq  41ba90 <arena_get_retry>
    0.00 :	  421d6c:       mov    %rbp,%rsi
    0.00 :	  421d6f:       mov    %rax,%rbx
    0.00 :	  421d72:       mov    %rax,%rdi
    0.00 :	  421d75:       callq  41ed10 <_int_malloc>
    0.00 :	  421d7a:       test   %rbx,%rbx
    0.00 :	  421d7d:       mov    %rax,%r8
    0.00 :	  421d80:       jne    421bf7 <__calloc+0xe7>
    0.00 :	  421d86:       jmpq   421c21 <__calloc+0x111>
    0.00 :	  421d8b:       nopl   0x0(%rax,%rax,1)
    0.00 :	  421d90:       test   $0x4,%al
    0.00 :	  421d92:       je     421e47 <__calloc+0x337>
    0.00 :	  421d98:       xor    %r12d,%r12d
    0.00 :	  421d9b:       xor    %r13d,%r13d
    0.00 :	  421d9e:       xchg   %ax,%ax
    0.00 :	  421da0:       lea    -0x10(%r8),%rax
    0.00 :	  421da4:       and    $0xfffffffffc000000,%rax
    0.00 :	  421daa:       mov    (%rax),%rdx
    0.00 :	  421dad:       jmpq   421be9 <__calloc+0xd9>
    0.00 :	  421db2:       nopw   0x0(%rax,%rax,1)
    0.00 :	  421db8:       mov    %rbp,%rdx
    0.00 :	  421dbb:       xor    %esi,%esi
    0.00 :	  421dbd:       mov    %r8,%rdi
    0.00 :	  421dc0:       add    $0x8,%rsp
    0.00 :	  421dc4:       pop    %rbx
    0.00 :	  421dc5:       pop    %rbp
    0.00 :	  421dc6:       pop    %r12
    0.00 :	  421dc8:       pop    %r13
    0.00 :	  421dca:       jmpq   400350 <__rela_iplt_end+0x88>
    0.00 :	  421dcf:       nop
    0.00 :	  421dd0:       mov    0x28(%rsp),%rsi
    0.00 :	  421dd5:       mov    %rbp,%rdi
    0.00 :	  421dd8:       callq  *%rax
    0.00 :	  421dda:       xor    %esi,%esi
    0.00 :	  421ddc:       test   %rax,%rax
    0.00 :	  421ddf:       mov    %rbp,%rdx
    0.00 :	  421de2:       mov    %rax,%rdi
    0.00 :	  421de5:       jne    421dc0 <__calloc+0x2b0>
    0.00 :	  421de7:       xor    %eax,%eax
    0.00 :	  421de9:       jmpq   421c44 <__calloc+0x134>
    0.00 :	  421dee:       xchg   %ax,%ax
    0.00 :	  421df0:       mov    $0xffffffffffffffd0,%rax
    0.00 :	  421df7:       movl   $0xc,%fs:(%rax)
    0.00 :	  421dfe:       xor    %eax,%eax
    0.00 :	  421e00:       jmpq   421c44 <__calloc+0x134>
    0.00 :	  421e05:       nopl   (%rax)
    0.00 :	  421e08:       xor    %esi,%esi
    0.00 :	  421e0a:       mov    %rbp,%rdi
    0.00 :	  421e0d:       callq  41b4f0 <arena_get2.part.3>
    0.00 :	  421e12:       test   %rax,%rax
    0.00 :	  421e15:       mov    %rax,%rbx
    0.00 :	  421e18:       jne    421b8d <__calloc+0x7d>
    0.00 :	  421e1e:       xor    %edi,%edi
    0.00 :	  421e20:       mov    %rbp,%rsi
    0.00 :	  421e23:       callq  41ed10 <_int_malloc>
    0.00 :	  421e28:       test   %rax,%rax
    0.00 :	  421e2b:       mov    %rax,%r8
    0.00 :	  421e2e:       je     421de7 <__calloc+0x2d7>
    0.00 :	  421e30:       mov    -0x8(%rax),%rax
    0.00 :	  421e34:       test   $0x2,%al
    0.00 :	  421e36:       je     421d90 <__calloc+0x280>
    0.00 :	  421e3c:       xor    %r12d,%r12d
    0.00 :	  421e3f:       xor    %r13d,%r13d
    0.00 :	  421e42:       jmpq   421c2a <__calloc+0x11a>
    0.00 :	  421e47:       mov    $0x4a6480,%ecx
    0.00 :	  421e4c:       mov    $0xca6,%edx
    0.00 :	  421e51:       mov    $0x4a5668,%esi
    0.00 :	  421e56:       mov    $0x4a6100,%edi
    0.00 :	  421e5b:       callq  41aec0 <__malloc_assert>
    0.00 :	  421e60:       mov    $0x4a6480,%ecx
    0.00 :	  421e65:       mov    $0xcd1,%edx
    0.00 :	  421e6a:       mov    $0x4a5668,%esi
    0.00 :	  421e6f:       mov    $0x4a5864,%edi
    0.00 :	  421e74:       callq  41aec0 <__malloc_assert>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000405160 <__libc_setup_tls>:
         :	__libc_setup_tls():
    0.00 :	  405160:       push   %r15
    0.00 :	  405162:       push   %r14
    0.00 :	  405164:       push   %r13
    0.00 :	  405166:       push   %r12
    0.00 :	  405168:       push   %rbp
    0.00 :	  405169:       push   %rbx
    0.00 :	  40516a:       mov    %rsi,%rbx
    0.00 :	  40516d:       sub    $0x18,%rsp
    0.00 :	  405171:       mov    0x2cd0d0(%rip),%rdx        # 6d2248 <_dl_phdr>
    0.00 :	  405178:       test   %rdx,%rdx
    0.00 :	  40517b:       je     4051d0 <__libc_setup_tls+0x70>
    0.00 :	  40517d:       mov    0x2cd0fc(%rip),%rax        # 6d2280 <_dl_phnum>
    0.00 :	  405184:       lea    0x0(,%rax,8),%rcx
    0.00 :	  40518c:       shl    $0x6,%rax
    0.00 :	  405190:       sub    %rcx,%rax
    0.00 :	  405193:       add    %rdx,%rax
    0.00 :	  405196:       cmp    %rax,%rdx
    0.00 :	  405199:       jb     4051a9 <__libc_setup_tls+0x49>
    0.00 :	  40519b:       jmp    4051d0 <__libc_setup_tls+0x70>
    0.00 :	  40519d:       nopl   (%rax)
    0.00 :	  4051a0:       add    $0x38,%rdx
    0.00 :	  4051a4:       cmp    %rax,%rdx
    0.00 :	  4051a7:       jae    4051d0 <__libc_setup_tls+0x70>
    0.00 :	  4051a9:       cmpl   $0x7,(%rdx)
   50.00 :	  4051ac:       jne    4051a0 <__libc_setup_tls+0x40>
    0.00 :	  4051ae:       mov    0x30(%rdx),%r14
    0.00 :	  4051b2:       mov    0x28(%rdx),%rbp
    0.00 :	  4051b6:       mov    0x20(%rdx),%r12
    0.00 :	  4051ba:       mov    0x10(%rdx),%r13
    0.00 :	  4051be:       cmp    %r14,%rbx
    0.00 :	  4051c1:       cmovb  %r14,%rbx
    0.00 :	  4051c5:       jmp    4051db <__libc_setup_tls+0x7b>
    0.00 :	  4051c7:       nopw   0x0(%rax,%rax,1)
    0.00 :	  4051d0:       xor    %r14d,%r14d
    0.00 :	  4051d3:       xor    %r13d,%r13d
    0.00 :	  4051d6:       xor    %r12d,%r12d
    0.00 :	  4051d9:       xor    %ebp,%ebp
    0.00 :	  4051db:       mov    %rbp,%rax
    0.00 :	  4051de:       add    0x2c9ec3(%rip),%rax        # 6cf0a8 <_dl_tls_static_size>
    0.00 :	  4051e5:       xor    %edx,%edx
    0.00 :	  4051e7:       add    %rbx,%rdi
    0.00 :	  4051ea:       lea    -0x1(%rax,%rbx,1),%rax
    0.00 :	  4051ef:       div    %rbx
    0.00 :	  4051f2:       imul   %rbx,%rax
    0.00 :	  4051f6:       add    %rax,%rdi
    0.00 :	  4051f9:       mov    %rax,%r15
    0.00 :	  4051fc:       callq  4430b0 <__sbrk>
    0.00 :	  405201:       lea    -0x1(%rax,%rbx,1),%rsi
    0.00 :	  405206:       mov    %rbx,%rax
    0.00 :	  405209:       movq   $0x3e,0x2ccb6c(%rip)        # 6d1d80 <_dl_static_dtv>
    0.00 :	  405214:       neg    %rax
    0.00 :	  405217:       mov    0x2cafa2(%rip),%r9        # 6d01c0 <_dl_ns>
    0.00 :	  40521e:       mov    %rsi,%rcx
    0.00 :	  405221:       and    %rax,%rcx
    0.00 :	  405224:       test   %r14,%r14
    0.00 :	  405227:       je     4052a0 <__libc_setup_tls+0x140>
    0.00 :	  405229:       lea    -0x1(%rbp,%r14,1),%rax
    0.00 :	  40522e:       xor    %edx,%edx
    0.00 :	  405230:       mov    %r15,%rdi
    0.00 :	  405233:       div    %r14
    0.00 :	  405236:       imul   %r14,%rax
    0.00 :	  40523a:       sub    %rax,%rdi
    0.00 :	  40523d:       add    %rcx,%rdi
    0.00 :	  405240:       mov    %r13,%rsi
    0.00 :	  405243:       mov    %rax,0x440(%r9)
    0.00 :	  40524a:       mov    %r12,%rdx
    0.00 :	  40524d:       mov    %rcx,(%rsp)
    0.00 :	  405251:       mov    %rdi,0x2ccb48(%rip)        # 6d1da0 <_dl_static_dtv+0x20>
    0.00 :	  405258:       mov    %r9,0x8(%rsp)
    0.00 :	  40525d:       movb   $0x1,0x2ccb44(%rip)        # 6d1da8 <_dl_static_dtv+0x28>
    0.00 :	  405264:       callq  42f570 <memcpy>
    0.00 :	  405269:       mov    (%rsp),%rcx
    0.00 :	  40526d:       mov    $0x1002,%edi
    0.00 :	  405272:       mov    $0x9e,%eax
    0.00 :	  405277:       lea    (%rcx,%r15,1),%rsi
    0.00 :	  40527b:       movq   $0x6d1d90,0x8(%rsi)
    0.00 :	  405283:       mov    %rsi,(%rsi)
    0.00 :	  405286:       mov    %rsi,0x10(%rsi)
    0.00 :	  40528a:       syscall 
    0.00 :	  40528c:       test   %eax,%eax
    0.00 :	  40528e:       je     4052b0 <__libc_setup_tls+0x150>
    0.00 :	  405290:       mov    $0x4a4638,%edi
    0.00 :	  405295:       callq  415930 <__libc_fatal>
    0.00 :	  40529a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  4052a0:       mov    %r15,%rdi
    0.00 :	  4052a3:       mov    %rbp,%rax
    0.00 :	  4052a6:       sub    %rbp,%rdi
    0.00 :	  4052a9:       add    %rcx,%rdi
    0.00 :	  4052ac:       jmp    405240 <__libc_setup_tls+0xe0>
    0.00 :	  4052ae:       xchg   %ax,%ax
    0.00 :	  4052b0:       mov    0x8(%rsp),%r9
    0.00 :	  4052b5:       test   %r14,%r14
    0.00 :	  4052b8:       movq   $0x40,0x2cb8fd(%rip)        # 6d0bc0 <static_slotinfo>
    0.00 :	  4052c3:       movq   $0x1,0x2ccaa2(%rip)        # 6d1d70 <_dl_tls_max_dtv_idx>
    0.00 :	  4052ce:       movq   $0x6d0bc0,0x2ccea7(%rip)        # 6d2180 <_dl_tls_dtv_slotinfo_list>
    0.00 :	  4052d9:       mov    %r14,0x430(%r9)
    0.00 :	  4052e0:       mov    %rbp,0x428(%r9)
    0.00 :	  4052e7:       mov    %r13,0x418(%r9)
    0.00 :	  4052ee:       mov    %r12,0x420(%r9)
    0.00 :	  4052f5:       movq   $0x1,0x448(%r9)
    0.00 :	  405300:       mov    %r9,0x2cb8e1(%rip)        # 6d0be8 <static_slotinfo+0x28>
    0.00 :	  405307:       jne    405370 <__libc_setup_tls+0x210>
    0.00 :	  405309:       mov    %rbp,%rax
    0.00 :	  40530c:       mov    $0x1,%edx
    0.00 :	  405311:       imul   %rdx,%rax
    0.00 :	  405315:       mov    0x2c9d8c(%rip),%rdx        # 6cf0a8 <_dl_tls_static_size>
    0.00 :	  40531c:       movq   $0x1,0x2cce71(%rip)        # 6d2198 <_dl_tls_static_nelem>
    0.00 :	  405327:       lea    0x3f(%rax,%rdx,1),%rdx
    0.00 :	  40532c:       mov    %rax,0x2cca2d(%rip)        # 6d1d60 <_dl_tls_static_used>
    0.00 :	  405333:       mov    $0x40,%eax
    0.00 :	  405338:       and    $0xffffffffffffffc0,%rdx
    0.00 :	  40533c:       add    $0x900,%rdx
    0.00 :	  405343:       cmp    $0x40,%rbx
    0.00 :	  405347:       cmovb  %rax,%rbx
   50.00 :	  40534b:       mov    %rdx,0x2c9d56(%rip)        # 6cf0a8 <_dl_tls_static_size>
    0.00 :	  405352:       mov    %rbx,0x2cca0f(%rip)        # 6d1d68 <_dl_tls_static_align>
    0.00 :	  405359:       add    $0x18,%rsp
    0.00 :	  40535d:       pop    %rbx
    0.00 :	  40535e:       pop    %rbp
    0.00 :	  40535f:       pop    %r12
    0.00 :	  405361:       pop    %r13
    0.00 :	  405363:       pop    %r14
    0.00 :	  405365:       pop    %r15
    0.00 :	  405367:       retq   
    0.00 :	  405368:       nopl   0x0(%rax,%rax,1)
    0.00 :	  405370:       lea    -0x1(%rbp,%r14,1),%rax
    0.00 :	  405375:       xor    %edx,%edx
    0.00 :	  405377:       div    %r14
    0.00 :	  40537a:       mov    %r14,%rdx
    0.00 :	  40537d:       jmp    405311 <__libc_setup_tls+0x1b1>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429b10 <__mempcpy>:
         :	mempcpy():
   50.00 :	  429b10:       cmp    $0x20,%rdx
    0.00 :	  429b14:       jae    429b90 <__mempcpy+0x80>
    0.00 :	  429b16:       test   $0x1,%dl
    0.00 :	  429b19:       je     429b26 <__mempcpy+0x16>
    0.00 :	  429b1b:       movzbl (%rsi),%ecx
   50.00 :	  429b1e:       mov    %cl,(%rdi)
    0.00 :	  429b20:       inc    %rsi
    0.00 :	  429b23:       inc    %rdi
    0.00 :	  429b26:       test   $0x2,%dl
    0.00 :	  429b29:       je     429b39 <__mempcpy+0x29>
    0.00 :	  429b2b:       movzwl (%rsi),%ecx
    0.00 :	  429b2e:       mov    %cx,(%rdi)
    0.00 :	  429b31:       add    $0x2,%rsi
    0.00 :	  429b35:       add    $0x2,%rdi
    0.00 :	  429b39:       test   $0x4,%dl
    0.00 :	  429b3c:       je     429b4a <__mempcpy+0x3a>
    0.00 :	  429b3e:       mov    (%rsi),%ecx
    0.00 :	  429b40:       mov    %ecx,(%rdi)
    0.00 :	  429b42:       add    $0x4,%rsi
    0.00 :	  429b46:       add    $0x4,%rdi
    0.00 :	  429b4a:       test   $0x8,%dl
    0.00 :	  429b4d:       je     429b60 <__mempcpy+0x50>
    0.00 :	  429b4f:       mov    (%rsi),%rcx
    0.00 :	  429b52:       mov    %rcx,(%rdi)
    0.00 :	  429b55:       add    $0x8,%rsi
    0.00 :	  429b59:       add    $0x8,%rdi
    0.00 :	  429b5d:       nopl   (%rax)
    0.00 :	  429b60:       and    $0xf0,%edx
    0.00 :	  429b66:       je     429b8b <__mempcpy+0x7b>
    0.00 :	  429b68:       nopl   0x0(%rax,%rax,1)
    0.00 :	  429b70:       mov    (%rsi),%rcx
    0.00 :	  429b73:       mov    0x8(%rsi),%r8
    0.00 :	  429b77:       mov    %rcx,(%rdi)
    0.00 :	  429b7a:       mov    %r8,0x8(%rdi)
    0.00 :	  429b7e:       sub    $0x10,%edx
    0.00 :	  429b81:       lea    0x10(%rsi),%rsi
    0.00 :	  429b85:       lea    0x10(%rdi),%rdi
    0.00 :	  429b89:       jne    429b70 <__mempcpy+0x60>
    0.00 :	  429b8b:       mov    %rdi,%rax
    0.00 :	  429b8e:       retq   
    0.00 :	  429b8f:       nop
    0.00 :	  429b90:       mov    %esi,%ecx
    0.00 :	  429b92:       and    $0x7,%ecx
    0.00 :	  429b95:       je     429bc0 <__mempcpy+0xb0>
    0.00 :	  429b97:       lea    -0x8(%rcx,%rdx,1),%rdx
    0.00 :	  429b9c:       sub    $0x8,%ecx
    0.00 :	  429b9f:       nop
    0.00 :	  429ba0:       movzbl (%rsi),%eax
    0.00 :	  429ba3:       mov    %al,(%rdi)
    0.00 :	  429ba5:       inc    %ecx
    0.00 :	  429ba7:       lea    0x1(%rsi),%rsi
    0.00 :	  429bab:       lea    0x1(%rdi),%rdi
    0.00 :	  429baf:       jne    429ba0 <__mempcpy+0x90>
    0.00 :	  429bb1:       nopl   0x0(%rax,%rax,1)
    0.00 :	  429bb6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  429bc0:       cmp    $0x400,%rdx
    0.00 :	  429bc7:       ja     429c40 <__mempcpy+0x130>
    0.00 :	  429bc9:       mov    %edx,%ecx
    0.00 :	  429bcb:       shr    $0x5,%ecx
    0.00 :	  429bce:       je     429c30 <__mempcpy+0x120>
    0.00 :	  429bd0:       dec    %ecx
    0.00 :	  429bd2:       mov    (%rsi),%rax
    0.00 :	  429bd5:       mov    0x8(%rsi),%r8
    0.00 :	  429bd9:       mov    0x10(%rsi),%r9
    0.00 :	  429bdd:       mov    0x18(%rsi),%r10
    0.00 :	  429be1:       mov    %rax,(%rdi)
    0.00 :	  429be4:       mov    %r8,0x8(%rdi)
    0.00 :	  429be8:       mov    %r9,0x10(%rdi)
    0.00 :	  429bec:       mov    %r10,0x18(%rdi)
    0.00 :	  429bf0:       lea    0x20(%rsi),%rsi
    0.00 :	  429bf4:       lea    0x20(%rdi),%rdi
    0.00 :	  429bf8:       je     429c30 <__mempcpy+0x120>
    0.00 :	  429bfa:       dec    %ecx
    0.00 :	  429bfc:       mov    (%rsi),%rax
    0.00 :	  429bff:       mov    0x8(%rsi),%r8
    0.00 :	  429c03:       mov    0x10(%rsi),%r9
    0.00 :	  429c07:       mov    0x18(%rsi),%r10
    0.00 :	  429c0b:       mov    %rax,(%rdi)
    0.00 :	  429c0e:       mov    %r8,0x8(%rdi)
    0.00 :	  429c12:       mov    %r9,0x10(%rdi)
    0.00 :	  429c16:       mov    %r10,0x18(%rdi)
    0.00 :	  429c1a:       lea    0x20(%rsi),%rsi
    0.00 :	  429c1e:       lea    0x20(%rdi),%rdi
    0.00 :	  429c22:       jne    429bd0 <__mempcpy+0xc0>
    0.00 :	  429c24:       xchg   %ax,%ax
    0.00 :	  429c26:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  429c30:       and    $0x1f,%edx
    0.00 :	  429c33:       jne    429b16 <__mempcpy+0x6>
    0.00 :	  429c39:       mov    %rdi,%rax
    0.00 :	  429c3c:       retq   
    0.00 :	  429c3d:       nopl   (%rax)
    0.00 :	  429c40:       mov    0x2a6489(%rip),%r11        # 6d00d0 <__x86_data_cache_size_half>
    0.00 :	  429c47:       cmp    %rdx,%r11
    0.00 :	  429c4a:       cmova  %rdx,%r11
    0.00 :	  429c4e:       mov    %r11,%rcx
    0.00 :	  429c51:       and    $0xfffffffffffffff8,%r11
    0.00 :	  429c55:       shr    $0x3,%rcx
    0.00 :	  429c59:       je     429c60 <__mempcpy+0x150>
    0.00 :	  429c5b:       rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :	  429c5e:       xchg   %ax,%ax
    0.00 :	  429c60:       sub    %r11,%rdx
    0.00 :	  429c63:       test   $0xfffffffffffffff8,%rdx
    0.00 :	  429c6a:       jne    429c80 <__mempcpy+0x170>
    0.00 :	  429c6c:       and    $0x7,%edx
    0.00 :	  429c6f:       jne    429b16 <__mempcpy+0x6>
    0.00 :	  429c75:       mov    %rdi,%rax
    0.00 :	  429c78:       retq   
    0.00 :	  429c79:       nopl   0x0(%rax)
    0.00 :	  429c80:       mov    0x2a6429(%rip),%r8        # 6d00b0 <__x86_shared_cache_size_half>
    0.00 :	  429c87:       cmp    %rdx,%r8
    0.00 :	  429c8a:       cmova  %rdx,%r8
    0.00 :	  429c8e:       mov    %r8,%rcx
    0.00 :	  429c91:       and    $0xffffffffffffffc0,%r8
    0.00 :	  429c95:       shr    $0x6,%rcx
    0.00 :	  429c99:       je     429e4a <__mempcpy+0x33a>
    0.00 :	  429c9f:       mov    %r14,-0x8(%rsp)
    0.00 :	  429ca4:       mov    %r13,-0x10(%rsp)
    0.00 :	  429ca9:       mov    %r12,-0x18(%rsp)
    0.00 :	  429cae:       mov    %rbx,-0x20(%rsp)
    0.00 :	  429cb3:       cmpl   $0x0,0x2a84fe(%rip)        # 6d21b8 <__x86_prefetchw>
    0.00 :	  429cba:       je     429d80 <__mempcpy+0x270>
    0.00 :	  429cc0:       dec    %rcx
    0.00 :	  429cc3:       mov    (%rsi),%rax
    0.00 :	  429cc6:       mov    0x8(%rsi),%rbx
    0.00 :	  429cca:       mov    0x10(%rsi),%r9
    0.00 :	  429cce:       mov    0x18(%rsi),%r10
    0.00 :	  429cd2:       mov    0x20(%rsi),%r11
    0.00 :	  429cd6:       mov    0x28(%rsi),%r12
    0.00 :	  429cda:       mov    0x30(%rsi),%r13
    0.00 :	  429cde:       mov    0x38(%rsi),%r14
    0.00 :	  429ce2:       prefetcht0 0x380(%rsi)
    0.00 :	  429ce9:       prefetcht0 0x3c0(%rsi)
    0.00 :	  429cf0:       mov    %rax,(%rdi)
    0.00 :	  429cf3:       mov    %rbx,0x8(%rdi)
    0.00 :	  429cf7:       mov    %r9,0x10(%rdi)
    0.00 :	  429cfb:       mov    %r10,0x18(%rdi)
    0.00 :	  429cff:       mov    %r11,0x20(%rdi)
    0.00 :	  429d03:       mov    %r12,0x28(%rdi)
    0.00 :	  429d07:       mov    %r13,0x30(%rdi)
    0.00 :	  429d0b:       mov    %r14,0x38(%rdi)
    0.00 :	  429d0f:       lea    0x40(%rsi),%rsi
    0.00 :	  429d13:       lea    0x40(%rdi),%rdi
    0.00 :	  429d17:       je     429e36 <__mempcpy+0x326>
    0.00 :	  429d1d:       dec    %rcx
    0.00 :	  429d20:       mov    (%rsi),%rax
    0.00 :	  429d23:       mov    0x8(%rsi),%rbx
    0.00 :	  429d27:       mov    0x10(%rsi),%r9
    0.00 :	  429d2b:       mov    0x18(%rsi),%r10
    0.00 :	  429d2f:       mov    0x20(%rsi),%r11
    0.00 :	  429d33:       mov    0x28(%rsi),%r12
    0.00 :	  429d37:       mov    0x30(%rsi),%r13
    0.00 :	  429d3b:       mov    0x38(%rsi),%r14
    0.00 :	  429d3f:       mov    %rax,(%rdi)
    0.00 :	  429d42:       mov    %rbx,0x8(%rdi)
    0.00 :	  429d46:       mov    %r9,0x10(%rdi)
    0.00 :	  429d4a:       mov    %r10,0x18(%rdi)
    0.00 :	  429d4e:       mov    %r11,0x20(%rdi)
    0.00 :	  429d52:       mov    %r12,0x28(%rdi)
    0.00 :	  429d56:       mov    %r13,0x30(%rdi)
    0.00 :	  429d5a:       mov    %r14,0x38(%rdi)
    0.00 :	  429d5e:       prefetchw 0x340(%rdi)
    0.00 :	  429d65:       prefetchw 0x380(%rdi)
    0.00 :	  429d6c:       lea    0x40(%rsi),%rsi
    0.00 :	  429d70:       lea    0x40(%rdi),%rdi
    0.00 :	  429d74:       jne    429cc0 <__mempcpy+0x1b0>
    0.00 :	  429d7a:       jmpq   429e36 <__mempcpy+0x326>
    0.00 :	  429d7f:       nop
    0.00 :	  429d80:       dec    %rcx
    0.00 :	  429d83:       mov    (%rsi),%rax
    0.00 :	  429d86:       mov    0x8(%rsi),%rbx
    0.00 :	  429d8a:       mov    0x10(%rsi),%r9
    0.00 :	  429d8e:       mov    0x18(%rsi),%r10
    0.00 :	  429d92:       mov    0x20(%rsi),%r11
    0.00 :	  429d96:       mov    0x28(%rsi),%r12
    0.00 :	  429d9a:       mov    0x30(%rsi),%r13
    0.00 :	  429d9e:       mov    0x38(%rsi),%r14
    0.00 :	  429da2:       prefetcht0 0x380(%rsi)
    0.00 :	  429da9:       prefetcht0 0x3c0(%rsi)
    0.00 :	  429db0:       mov    %rax,(%rdi)
    0.00 :	  429db3:       mov    %rbx,0x8(%rdi)
    0.00 :	  429db7:       mov    %r9,0x10(%rdi)
    0.00 :	  429dbb:       mov    %r10,0x18(%rdi)
    0.00 :	  429dbf:       mov    %r11,0x20(%rdi)
    0.00 :	  429dc3:       mov    %r12,0x28(%rdi)
    0.00 :	  429dc7:       mov    %r13,0x30(%rdi)
    0.00 :	  429dcb:       mov    %r14,0x38(%rdi)
    0.00 :	  429dcf:       lea    0x40(%rsi),%rsi
    0.00 :	  429dd3:       lea    0x40(%rdi),%rdi
    0.00 :	  429dd7:       je     429e36 <__mempcpy+0x326>
    0.00 :	  429dd9:       dec    %rcx
    0.00 :	  429ddc:       mov    (%rsi),%rax
    0.00 :	  429ddf:       mov    0x8(%rsi),%rbx
    0.00 :	  429de3:       mov    0x10(%rsi),%r9
    0.00 :	  429de7:       mov    0x18(%rsi),%r10
    0.00 :	  429deb:       mov    0x20(%rsi),%r11
    0.00 :	  429def:       mov    0x28(%rsi),%r12
    0.00 :	  429df3:       mov    0x30(%rsi),%r13
    0.00 :	  429df7:       mov    0x38(%rsi),%r14
    0.00 :	  429dfb:       prefetcht0 0x340(%rdi)
    0.00 :	  429e02:       prefetcht0 0x380(%rdi)
    0.00 :	  429e09:       mov    %rax,(%rdi)
    0.00 :	  429e0c:       mov    %rbx,0x8(%rdi)
    0.00 :	  429e10:       mov    %r9,0x10(%rdi)
    0.00 :	  429e14:       mov    %r10,0x18(%rdi)
    0.00 :	  429e18:       mov    %r11,0x20(%rdi)
    0.00 :	  429e1c:       mov    %r12,0x28(%rdi)
    0.00 :	  429e20:       mov    %r13,0x30(%rdi)
    0.00 :	  429e24:       mov    %r14,0x38(%rdi)
    0.00 :	  429e28:       lea    0x40(%rsi),%rsi
    0.00 :	  429e2c:       lea    0x40(%rdi),%rdi
    0.00 :	  429e30:       jne    429d80 <__mempcpy+0x270>
    0.00 :	  429e36:       mov    -0x20(%rsp),%rbx
    0.00 :	  429e3b:       mov    -0x18(%rsp),%r12
    0.00 :	  429e40:       mov    -0x10(%rsp),%r13
    0.00 :	  429e45:       mov    -0x8(%rsp),%r14
    0.00 :	  429e4a:       sub    %r8,%rdx
    0.00 :	  429e4d:       test   $0xffffffffffffffc0,%rdx
    0.00 :	  429e54:       jne    429e70 <__mempcpy+0x360>
    0.00 :	  429e56:       and    $0x3f,%edx
    0.00 :	  429e59:       jne    429b16 <__mempcpy+0x6>
    0.00 :	  429e5f:       mov    %rdi,%rax
    0.00 :	  429e62:       retq   
    0.00 :	  429e63:       nopl   (%rax)
    0.00 :	  429e66:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  429e70:       mov    %rdx,%rcx
    0.00 :	  429e73:       shr    $0x7,%rcx
    0.00 :	  429e77:       je     429f55 <__mempcpy+0x445>
    0.00 :	  429e7d:       mov    %r14,-0x8(%rsp)
    0.00 :	  429e82:       mov    %r13,-0x10(%rsp)
    0.00 :	  429e87:       mov    %r12,-0x18(%rsp)
    0.00 :	  429e8c:       nopl   0x0(%rax)
    0.00 :	  429e90:       prefetchnta 0x300(%rsi)
    0.00 :	  429e97:       prefetchnta 0x340(%rsi)
    0.00 :	  429e9e:       dec    %rcx
    0.00 :	  429ea1:       mov    (%rsi),%rax
    0.00 :	  429ea4:       mov    0x8(%rsi),%r8
    0.00 :	  429ea8:       mov    0x10(%rsi),%r9
    0.00 :	  429eac:       mov    0x18(%rsi),%r10
    0.00 :	  429eb0:       mov    0x20(%rsi),%r11
    0.00 :	  429eb4:       mov    0x28(%rsi),%r12
    0.00 :	  429eb8:       mov    0x30(%rsi),%r13
    0.00 :	  429ebc:       mov    0x38(%rsi),%r14
    0.00 :	  429ec0:       movnti %rax,(%rdi)
    0.00 :	  429ec4:       movnti %r8,0x8(%rdi)
    0.00 :	  429ec9:       movnti %r9,0x10(%rdi)
    0.00 :	  429ece:       movnti %r10,0x18(%rdi)
    0.00 :	  429ed3:       movnti %r11,0x20(%rdi)
    0.00 :	  429ed8:       movnti %r12,0x28(%rdi)
    0.00 :	  429edd:       movnti %r13,0x30(%rdi)
    0.00 :	  429ee2:       movnti %r14,0x38(%rdi)
    0.00 :	  429ee7:       mov    0x40(%rsi),%rax
    0.00 :	  429eeb:       mov    0x48(%rsi),%r8
    0.00 :	  429eef:       mov    0x50(%rsi),%r9
    0.00 :	  429ef3:       mov    0x58(%rsi),%r10
    0.00 :	  429ef7:       mov    0x60(%rsi),%r11
    0.00 :	  429efb:       mov    0x68(%rsi),%r12
    0.00 :	  429eff:       mov    0x70(%rsi),%r13
    0.00 :	  429f03:       mov    0x78(%rsi),%r14
    0.00 :	  429f07:       movnti %rax,0x40(%rdi)
    0.00 :	  429f0c:       movnti %r8,0x48(%rdi)
    0.00 :	  429f11:       movnti %r9,0x50(%rdi)
    0.00 :	  429f16:       movnti %r10,0x58(%rdi)
    0.00 :	  429f1b:       movnti %r11,0x60(%rdi)
    0.00 :	  429f20:       movnti %r12,0x68(%rdi)
    0.00 :	  429f25:       movnti %r13,0x70(%rdi)
    0.00 :	  429f2a:       movnti %r14,0x78(%rdi)
    0.00 :	  429f2f:       lea    0x80(%rsi),%rsi
    0.00 :	  429f36:       lea    0x80(%rdi),%rdi
    0.00 :	  429f3d:       jne    429e90 <__mempcpy+0x380>
    0.00 :	  429f43:       sfence 
    0.00 :	  429f46:       mov    -0x18(%rsp),%r12
    0.00 :	  429f4b:       mov    -0x10(%rsp),%r13
    0.00 :	  429f50:       mov    -0x8(%rsp),%r14
    0.00 :	  429f55:       and    $0x7f,%edx
    0.00 :	  429f58:       jne    429b16 <__mempcpy+0x6>
    0.00 :	  429f5e:       mov    %rdi,%rax
    0.00 :	  429f61:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000440e90 <__memset_avx2>:
         :	__memset_avx2():
    0.00 :	  440e90:       vpxor  %xmm0,%xmm0,%xmm0
    0.00 :	  440e94:       vmovd  %esi,%xmm1
    0.00 :	  440e98:       lea    (%rdi,%rdx,1),%rsi
    0.00 :	  440e9c:       mov    %rdi,%rax
    0.00 :	  440e9f:       vpshufb %xmm0,%xmm1,%xmm0
    0.00 :	  440ea4:       cmp    $0x10,%rdx
    0.00 :	  440ea8:       jb     440f70 <__memset_avx2+0xe0>
    0.00 :	  440eae:       cmp    $0x100,%rdx
    0.00 :	  440eb5:       jae    440fb0 <__memset_avx2+0x120>
    0.00 :	  440ebb:       cmp    $0x80,%dl
    0.00 :	  440ebe:       jb     440f10 <__memset_avx2+0x80>
    0.00 :	  440ec0:       vmovdqu %xmm0,(%rdi)
    0.00 :	  440ec4:       vmovdqu %xmm0,0x10(%rdi)
    0.00 :	  440ec9:       vmovdqu %xmm0,0x20(%rdi)
    0.00 :	  440ece:       vmovdqu %xmm0,0x30(%rdi)
    0.00 :	  440ed3:       vmovdqu %xmm0,0x40(%rdi)
    0.00 :	  440ed8:       vmovdqu %xmm0,0x50(%rdi)
    0.00 :	  440edd:       vmovdqu %xmm0,0x60(%rdi)
    0.00 :	  440ee2:       vmovdqu %xmm0,0x70(%rdi)
    0.00 :	  440ee7:       vmovdqu %xmm0,-0x80(%rsi)
    0.00 :	  440eec:       vmovdqu %xmm0,-0x70(%rsi)
    0.00 :	  440ef1:       vmovdqu %xmm0,-0x60(%rsi)
    0.00 :	  440ef6:       vmovdqu %xmm0,-0x50(%rsi)
    0.00 :	  440efb:       vmovdqu %xmm0,-0x40(%rsi)
    0.00 :	  440f00:       vmovdqu %xmm0,-0x30(%rsi)
    0.00 :	  440f05:       vmovdqu %xmm0,-0x20(%rsi)
    0.00 :	  440f0a:       vmovdqu %xmm0,-0x10(%rsi)
    0.00 :	  440f0f:       retq   
    0.00 :	  440f10:       cmp    $0x40,%dl
    0.00 :	  440f13:       jb     440f40 <__memset_avx2+0xb0>
    0.00 :	  440f15:       vmovdqu %xmm0,(%rdi)
    0.00 :	  440f19:       vmovdqu %xmm0,0x10(%rdi)
    0.00 :	  440f1e:       vmovdqu %xmm0,0x20(%rdi)
    0.00 :	  440f23:       vmovdqu %xmm0,0x30(%rdi)
    0.00 :	  440f28:       vmovdqu %xmm0,-0x40(%rsi)
    0.00 :	  440f2d:       vmovdqu %xmm0,-0x30(%rsi)
    0.00 :	  440f32:       vmovdqu %xmm0,-0x20(%rsi)
    0.00 :	  440f37:       vmovdqu %xmm0,-0x10(%rsi)
    0.00 :	  440f3c:       retq   
    0.00 :	  440f3d:       nopl   (%rax)
    0.00 :	  440f40:       cmp    $0x20,%dl
    0.00 :	  440f43:       jb     440f60 <__memset_avx2+0xd0>
    0.00 :	  440f45:       vmovdqu %xmm0,(%rdi)
    0.00 :	  440f49:       vmovdqu %xmm0,0x10(%rdi)
    0.00 :	  440f4e:       vmovdqu %xmm0,-0x20(%rsi)
    0.00 :	  440f53:       vmovdqu %xmm0,-0x10(%rsi)
    0.00 :	  440f58:       retq   
    0.00 :	  440f59:       nopl   0x0(%rax)
    0.00 :	  440f60:       vmovdqu %xmm0,(%rdi)
    0.00 :	  440f64:       vmovdqu %xmm0,-0x10(%rsi)
    0.00 :	  440f69:       retq   
    0.00 :	  440f6a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  440f70:       cmp    $0x8,%dl
    0.00 :	  440f73:       jb     440f80 <__memset_avx2+0xf0>
    0.00 :	  440f75:       vmovq  %xmm0,(%rdi)
    0.00 :	  440f79:       vmovq  %xmm0,-0x8(%rsi)
    0.00 :	  440f7e:       retq   
    0.00 :	  440f7f:       nop
    0.00 :	  440f80:       vmovd  %xmm0,%ecx
    0.00 :	  440f84:       cmp    $0x4,%dl
    0.00 :	  440f87:       jb     440f90 <__memset_avx2+0x100>
    0.00 :	  440f89:       mov    %ecx,(%rdi)
    0.00 :	  440f8b:       mov    %ecx,-0x4(%rsi)
    0.00 :	  440f8e:       retq   
    0.00 :	  440f8f:       nop
    0.00 :	  440f90:       cmp    $0x2,%dl
    0.00 :	  440f93:       jb     440fa0 <__memset_avx2+0x110>
    0.00 :	  440f95:       mov    %cx,(%rdi)
    0.00 :	  440f98:       mov    %cx,-0x2(%rsi)
    0.00 :	  440f9c:       retq   
    0.00 :	  440f9d:       nopl   (%rax)
    0.00 :	  440fa0:       cmp    $0x1,%dl
    0.00 :	  440fa3:       jb     440fa7 <__memset_avx2+0x117>
    0.00 :	  440fa5:       mov    %cl,(%rdi)
    0.00 :	  440fa7:       retq   
    0.00 :	  440fa8:       nopl   0x0(%rax,%rax,1)
    0.00 :	  440fb0:       vinserti128 $0x1,%xmm0,%ymm0,%ymm0
   50.00 :	  440fb6:       and    $0xffffffffffffffe0,%rdi
    0.00 :	  440fba:       add    $0x20,%rdi
    0.00 :	  440fbe:       vmovdqu %ymm0,(%rax)
    0.00 :	  440fc2:       sub    %rdi,%rax
    0.00 :	  440fc5:       lea    -0x80(%rax,%rdx,1),%rcx
    0.00 :	  440fca:       cmp    $0x1000,%rcx
    0.00 :	  440fd1:       ja     441010 <__memset_avx2+0x180>
    0.00 :	  440fd3:       vmovdqa %ymm0,(%rdi)
    0.00 :	  440fd7:       vmovdqa %ymm0,0x20(%rdi)
    0.00 :	  440fdc:       vmovdqa %ymm0,0x40(%rdi)
    0.00 :	  440fe1:       vmovdqa %ymm0,0x60(%rdi)
    0.00 :	  440fe6:       sub    $0xffffffffffffff80,%rdi
    0.00 :	  440fea:       add    $0xffffff80,%ecx
    0.00 :	  440fed:       jb     440fd3 <__memset_avx2+0x143>
    0.00 :	  440fef:       mov    %rsi,%rax
    0.00 :	  440ff2:       vmovdqu %ymm0,-0x80(%rsi)
   50.00 :	  440ff7:       vmovdqu %ymm0,-0x60(%rsi)
    0.00 :	  440ffc:       vmovdqu %ymm0,-0x40(%rsi)
    0.00 :	  441001:       vmovdqu %ymm0,-0x20(%rsi)
    0.00 :	  441006:       sub    %rdx,%rax
    0.00 :	  441009:       vzeroupper 
    0.00 :	  44100c:       retq   
    0.00 :	  44100d:       nopl   (%rax)
    0.00 :	  441010:       sub    $0xffffffffffffff80,%rcx
    0.00 :	  441014:       vmovd  %xmm0,%eax
    0.00 :	  441018:       rep stos %al,%es:(%rdi)
    0.00 :	  44101a:       mov    %rsi,%rax
    0.00 :	  44101d:       sub    %rdx,%rax
    0.00 :	  441020:       vzeroupper 
    0.00 :	  441023:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000446170 <_dl_aux_init>:
         :	_dl_aux_init():
    0.00 :	  446170:       mov    (%rdi),%rax
    0.00 :	  446173:       mov    %rdi,0x28c0a6(%rip)        # 6d2220 <_dl_auxv>
    0.00 :	  44617a:       test   %rax,%rax
    0.00 :	  44617d:       je     446364 <_dl_aux_init+0x1f4>
    0.00 :	  446183:       mov    0x28b4e6(%rip),%rcx        # 6d1670 <_dl_hwcap>
    0.00 :	  44618a:       push   %r15
    0.00 :	  44618c:       xor    %r11d,%r11d
    0.00 :	  44618f:       push   %r14
    0.00 :	  446191:       mov    0x28b4d0(%rip),%rsi        # 6d1668 <_dl_hwcap2>
    0.00 :	  446198:       xor    %r15d,%r15d
    0.00 :	  44619b:       push   %r13
    0.00 :	  44619d:       push   %r12
    0.00 :	  44619f:       xor    %r13d,%r13d
    0.00 :	  4461a2:       push   %rbp
    0.00 :	  4461a3:       push   %rbx
    0.00 :	  4461a4:       xor    %ebp,%ebp
    0.00 :	  4461a6:       mov    0x286dec(%rip),%edx        # 6ccf98 <__libc_enable_secure>
    0.00 :	  4461ac:       mov    0x289fcd(%rip),%r9        # 6d0180 <_dl_pagesize>
    0.00 :	  4461b3:       xor    %r8d,%r8d
    0.00 :	  4461b6:       mov    %rcx,-0x38(%rsp)
    0.00 :	  4461bb:       movzwl 0x289fb2(%rip),%ecx        # 6d0174 <_dl_fpu_control>
    0.00 :	  4461c2:       mov    %rsi,-0x28(%rsp)
    0.00 :	  4461c7:       mov    0x28c09a(%rip),%rsi        # 6d2268 <_dl_sysinfo_dso>
    0.00 :	  4461ce:       mov    0x28c08b(%rip),%r14d        # 6d2260 <_dl_clktck>
    0.00 :	  4461d5:       mov    0x28c06c(%rip),%r12        # 6d2248 <_dl_phdr>
    0.00 :	  4461dc:       mov    0x28c09d(%rip),%rbx        # 6d2280 <_dl_phnum>
    0.00 :	  4461e3:       mov    0x28c03e(%rip),%r10        # 6d2228 <_dl_platform>
    0.00 :	  4461ea:       mov    %cx,-0x18(%rsp)
    0.00 :	  4461ef:       mov    %rsi,-0x20(%rsp)
    0.00 :	  4461f4:       mov    0x28c0b6(%rip),%ecx        # 6d22b0 <__libc_enable_secure_decided>
    0.00 :	  4461fa:       mov    0x286d7f(%rip),%rsi        # 6ccf80 <_dl_random>
    0.00 :	  446201:       mov    %edx,-0x14(%rsp)
    0.00 :	  446205:       movb   $0x0,-0x1(%rsp)
    0.00 :	  44620a:       xor    %edx,%edx
    0.00 :	  44620c:       movb   $0x0,-0x2(%rsp)
    0.00 :	  446211:       movb   $0x0,-0x3(%rsp)
    0.00 :	  446216:       mov    %ecx,-0x8(%rsp)
    0.00 :	  44621a:       mov    %rsi,-0x10(%rsp)
    0.00 :	  44621f:       xor    %ecx,%ecx
    0.00 :	  446221:       movb   $0x0,-0x4(%rsp)
    0.00 :	  446226:       movb   $0x0,-0x15(%rsp)
    0.00 :	  44622b:       xor    %esi,%esi
    0.00 :	  44622d:       movb   $0x0,-0x16(%rsp)
    0.00 :	  446232:       movb   $0x0,-0x29(%rsp)
    0.00 :	  446237:       nopw   0x0(%rax,%rax,1)
    0.00 :	  446240:       sub    $0x3,%rax
    0.00 :	  446244:       cmp    $0x1e,%rax
    0.00 :	  446248:       ja     446270 <_dl_aux_init+0x100>
    0.00 :	  44624a:       jmpq   *0x4a8140(,%rax,8)
    0.00 :	  446251:       nopl   0x0(%rax)
    0.00 :	  446258:       mov    0x8(%rdi),%rax
    0.00 :	  44625c:       movb   $0x1,-0x4(%rsp)
    0.00 :	  446261:       mov    %rax,-0x20(%rsp)
    0.00 :	  446266:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  446270:       add    $0x10,%rdi
    0.00 :	  446274:       mov    (%rdi),%rax
    0.00 :	  446277:       test   %rax,%rax
    0.00 :	  44627a:       jne    446240 <_dl_aux_init+0xd0>
    0.00 :	  44627c:       test   %r8b,%r8b
    0.00 :	  44627f:       jne    446499 <_dl_aux_init+0x329>
    0.00 :	  446285:       test   %r15b,%r15b
    0.00 :	  446288:       je     446291 <_dl_aux_init+0x121>
   50.00 :	  44628a:       mov    %r14d,0x28bfcf(%rip)        # 6d2260 <_dl_clktck>
    0.00 :	  446291:       test   %r13b,%r13b
    0.00 :	  446294:       je     44629d <_dl_aux_init+0x12d>
    0.00 :	  446296:       mov    %r12,0x28bfab(%rip)        # 6d2248 <_dl_phdr>
    0.00 :	  44629d:       test   %bpl,%bpl
    0.00 :	  4462a0:       je     4462a9 <_dl_aux_init+0x139>
    0.00 :	  4462a2:       mov    %rbx,0x28bfd7(%rip)        # 6d2280 <_dl_phnum>
    0.00 :	  4462a9:       test   %r11b,%r11b
    0.00 :	  4462ac:       je     4462b5 <_dl_aux_init+0x145>
    0.00 :	  4462ae:       mov    %r10,0x28bf73(%rip)        # 6d2228 <_dl_platform>
    0.00 :	  4462b5:       cmpb   $0x0,-0x29(%rsp)
    0.00 :	  4462ba:       je     4462c8 <_dl_aux_init+0x158>
    0.00 :	  4462bc:       mov    -0x38(%rsp),%rax
    0.00 :	  4462c1:       mov    %rax,0x28b3a8(%rip)        # 6d1670 <_dl_hwcap>
    0.00 :	  4462c8:       cmpb   $0x0,-0x16(%rsp)
    0.00 :	  4462cd:       je     4462db <_dl_aux_init+0x16b>
    0.00 :	  4462cf:       mov    -0x28(%rsp),%rax
    0.00 :	  4462d4:       mov    %rax,0x28b38d(%rip)        # 6d1668 <_dl_hwcap2>
    0.00 :	  4462db:       cmpb   $0x0,-0x15(%rsp)
    0.00 :	  4462e0:       je     4462ee <_dl_aux_init+0x17e>
    0.00 :	  4462e2:       movzwl -0x18(%rsp),%eax
    0.00 :	  4462e7:       mov    %ax,0x289e86(%rip)        # 6d0174 <_dl_fpu_control>
    0.00 :	  4462ee:       cmpb   $0x0,-0x4(%rsp)
    0.00 :	  4462f3:       je     446301 <_dl_aux_init+0x191>
    0.00 :	  4462f5:       mov    -0x20(%rsp),%rax
    0.00 :	  4462fa:       mov    %rax,0x28bf67(%rip)        # 6d2268 <_dl_sysinfo_dso>
    0.00 :	  446301:       cmpb   $0x0,-0x3(%rsp)
    0.00 :	  446306:       je     446312 <_dl_aux_init+0x1a2>
    0.00 :	  446308:       mov    -0x14(%rsp),%eax
    0.00 :	  44630c:       mov    %eax,0x286c86(%rip)        # 6ccf98 <__libc_enable_secure>
    0.00 :	  446312:       cmpb   $0x0,-0x2(%rsp)
    0.00 :	  446317:       je     446323 <_dl_aux_init+0x1b3>
    0.00 :	  446319:       mov    -0x8(%rsp),%eax
    0.00 :	  44631d:       mov    %eax,0x28bf8d(%rip)        # 6d22b0 <__libc_enable_secure_decided>
    0.00 :	  446323:       cmpb   $0x0,-0x1(%rsp)
    0.00 :	  446328:       je     446336 <_dl_aux_init+0x1c6>
    0.00 :	  44632a:       mov    -0x10(%rsp),%rax
    0.00 :	  44632f:       mov    %rax,0x286c4a(%rip)        # 6ccf80 <_dl_random>
    0.00 :	  446336:       cmp    $0xf,%edx
    0.00 :	  446339:       jne    44635a <_dl_aux_init+0x1ea>
    0.00 :	  44633b:       test   %esi,%esi
    0.00 :	  44633d:       movl   $0x1,0x28bf69(%rip)        # 6d22b0 <__libc_enable_secure_decided>
    0.00 :	  446347:       setne  %dl
    0.00 :	  44634a:       test   %ecx,%ecx
    0.00 :	  44634c:       setne  %al
    0.00 :	  44634f:       or     %edx,%eax
    0.00 :	  446351:       movzbl %al,%eax
    0.00 :	  446354:       mov    %eax,0x286c3e(%rip)        # 6ccf98 <__libc_enable_secure>
    0.00 :	  44635a:       pop    %rbx
    0.00 :	  44635b:       pop    %rbp
    0.00 :	  44635c:       pop    %r12
    0.00 :	  44635e:       pop    %r13
    0.00 :	  446360:       pop    %r14
    0.00 :	  446362:       pop    %r15
    0.00 :	  446364:       repz retq 
    0.00 :	  446366:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  446370:       mov    0x8(%rdi),%rax
    0.00 :	  446374:       movb   $0x1,-0x16(%rsp)
    0.00 :	  446379:       mov    %rax,-0x28(%rsp)
    0.00 :	  44637e:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  446383:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446388:       mov    0x8(%rdi),%rax
    0.00 :	  44638c:       movb   $0x1,-0x1(%rsp)
    0.00 :	  446391:       mov    %rax,-0x10(%rsp)
    0.00 :	  446396:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  44639b:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4463a0:       mov    0x8(%rdi),%eax
    0.00 :	  4463a3:       movb   $0x1,-0x2(%rsp)
    0.00 :	  4463a8:       mov    $0xffffffff,%edx
    0.00 :	  4463ad:       movl   $0x1,-0x8(%rsp)
    0.00 :	  4463b5:       movb   $0x1,-0x3(%rsp)
    0.00 :	  4463ba:       mov    %eax,-0x14(%rsp)
    0.00 :	  4463be:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  4463c3:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4463c8:       movzwl 0x8(%rdi),%eax
    0.00 :	  4463cc:       movb   $0x1,-0x15(%rsp)
    0.00 :	  4463d1:       mov    %ax,-0x18(%rsp)
    0.00 :	  4463d6:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  4463db:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4463e0:       mov    0x8(%rdi),%r14d
    0.00 :	  4463e4:       mov    $0x1,%r15d
    0.00 :	  4463ea:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  4463ef:       nop
    0.00 :	  4463f0:       mov    0x8(%rdi),%rax
    0.00 :	  4463f4:       movb   $0x1,-0x29(%rsp)
    0.00 :	  4463f9:       mov    %rax,-0x38(%rsp)
    0.00 :	  4463fe:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  446403:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446408:       mov    0x8(%rdi),%r10
    0.00 :	  44640c:       mov    $0x1,%r11d
    0.00 :	  446412:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  446417:       nopw   0x0(%rax,%rax,1)
    0.00 :	  446420:       xor    0x8(%rdi),%ecx
    0.00 :	  446423:       or     $0x8,%edx
    0.00 :	  446426:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  44642b:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446430:       xor    0x8(%rdi),%ecx
    0.00 :	  446433:       or     $0x4,%edx
    0.00 :	  446436:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  44643b:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446440:       xor    0x8(%rdi),%esi
    0.00 :	  446443:       or     $0x2,%edx
    0.00 :	  446446:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  44644b:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446450:       mov    0x8(%rdi),%rbx
    0.00 :	  446454:       mov    $0x1,%ebp
    0.00 :	  446459:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  44645e:       xchg   %ax,%ax
   50.00 :	  446460:       mov    0x8(%rdi),%r12
    0.00 :	  446464:       mov    $0x1,%r13d
    0.00 :	  44646a:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  44646f:       nop
    0.00 :	  446470:       xor    0x8(%rdi),%esi
    0.00 :	  446473:       or     $0x1,%edx
    0.00 :	  446476:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  44647b:       nopl   0x0(%rax,%rax,1)
    0.00 :	  446480:       mov    0x8(%rdi),%rax
    0.00 :	  446484:       test   %rax,%rax
    0.00 :	  446487:       cmovne %rax,%r9
    0.00 :	  44648b:       mov    $0x1,%eax
    0.00 :	  446490:       cmovne %eax,%r8d
    0.00 :	  446494:       jmpq   446270 <_dl_aux_init+0x100>
    0.00 :	  446499:       mov    %r9,0x289ce0(%rip)        # 6d0180 <_dl_pagesize>
    0.00 :	  4464a0:       jmpq   446285 <_dl_aux_init+0x115>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000475e00 <_dl_important_hwcaps>:
         :	_dl_important_hwcaps():
    0.00 :	  475e00:       push   %rbp
    0.00 :	  475e01:       mov    %rsp,%rbp
    0.00 :	  475e04:       push   %r15
    0.00 :	  475e06:       push   %r14
    0.00 :	  475e08:       push   %r13
    0.00 :	  475e0a:       push   %r12
    0.00 :	  475e0c:       xor    %r15d,%r15d
    0.00 :	  475e0f:       push   %rbx
    0.00 :	  475e10:       sub    $0x78,%rsp
    0.00 :	  475e14:       test   %rdi,%rdi
    0.00 :	  475e17:       mov    0x25b852(%rip),%r8        # 6d1670 <_dl_hwcap>
    0.00 :	  475e1e:       setne  %r15b
    0.00 :	  475e22:       and    0x25b837(%rip),%r8        # 6d1660 <_dl_hwcap_mask>
    0.00 :	  475e29:       mov    %rdi,-0x68(%rbp)
    0.00 :	  475e2d:       mov    %rsi,-0x78(%rbp)
    0.00 :	  475e31:       mov    %rdx,-0x50(%rbp)
    0.00 :	  475e35:       mov    %rcx,-0x70(%rbp)
    0.00 :	  475e39:       mov    %r8,%r14
    0.00 :	  475e3c:       je     475e66 <_dl_important_hwcaps+0x66>
    0.00 :	  475e3e:       xor    %ecx,%ecx
    0.00 :	  475e40:       mov    $0x1,%edx
    0.00 :	  475e45:       nopl   (%rax)
    0.00 :	  475e48:       mov    %r14,%rax
    0.00 :	  475e4b:       shr    %cl,%rax
    0.00 :	  475e4e:       add    $0x1,%rcx
    0.00 :	  475e52:       and    $0x1,%eax
    0.00 :	  475e55:       add    %rax,%r15
    0.00 :	  475e58:       mov    %rdx,%rax
    0.00 :	  475e5b:       shl    %cl,%rax
    0.00 :	  475e5e:       neg    %rax
    0.00 :	  475e61:       test   %r14,%rax
    0.00 :	  475e64:       jne    475e48 <_dl_important_hwcaps+0x48>
    0.00 :	  475e66:       mov    0x25c3cb(%rip),%rax        # 6d2238 <_dl_sysinfo_map>
    0.00 :	  475e6d:       test   %rax,%rax
    0.00 :	  475e70:       mov    %rax,-0x48(%rbp)
    0.00 :	  475e74:       je     4760be <_dl_important_hwcaps+0x2be>
    0.00 :	  475e7a:       mov    0x2a0(%rax),%r9
    0.00 :	  475e81:       movzwl 0x2b0(%rax),%eax
    0.00 :	  475e88:       test   %rax,%rax
    0.00 :	  475e8b:       mov    %rax,-0x38(%rbp)
    0.00 :	  475e8f:       je     4760be <_dl_important_hwcaps+0x2be>
    0.00 :	  475e95:       xor    %r11d,%r11d
    0.00 :	  475e98:       mov    %r15,-0x58(%rbp)
    0.00 :	  475e9c:       mov    %r14,-0x60(%rbp)
    0.00 :	  475ea0:       mov    %r11,%r15
    0.00 :	  475ea3:       mov    %r9,%r14
    0.00 :	  475ea6:       jmp    475ec2 <_dl_important_hwcaps+0xc2>
    0.00 :	  475ea8:       nopl   0x0(%rax,%rax,1)
    0.00 :	  475eb0:       add    $0x1,%r15
    0.00 :	  475eb4:       add    $0x38,%r14
    0.00 :	  475eb8:       cmp    %r15,-0x38(%rbp)
    0.00 :	  475ebc:       je     4760b6 <_dl_important_hwcaps+0x2b6>
    0.00 :	  475ec2:       cmpl   $0x4,(%r14)
    0.00 :	  475ec6:       jne    475eb0 <_dl_important_hwcaps+0xb0>
    0.00 :	  475ec8:       mov    -0x48(%rbp),%rax
    0.00 :	  475ecc:       mov    0x28(%r14),%r13
    0.00 :	  475ed0:       mov    (%rax),%r8
    0.00 :	  475ed3:       add    0x10(%r14),%r8
    0.00 :	  475ed7:       cmp    $0xc,%r13
    0.00 :	  475edb:       mov    %r8,%r12
    0.00 :	  475ede:       lea    0xc(%r8),%rdi
    0.00 :	  475ee2:       jbe    475eb0 <_dl_important_hwcaps+0xb0>
    0.00 :	  475ee4:       mov    %r14,-0x40(%rbp)
    0.00 :	  475ee8:       mov    %r8,%r14
    0.00 :	  475eeb:       jmp    475f21 <_dl_important_hwcaps+0x121>
    0.00 :	  475eed:       nopl   (%rax)
   50.00 :	  475ef0:       mov    0x4(%r12),%eax
    0.00 :	  475ef5:       add    $0x3,%rbx
    0.00 :	  475ef9:       add    $0x3,%rax
    0.00 :	  475efd:       and    $0xfffffffffffffffc,%rbx
    0.00 :	  475f01:       and    $0xfffffffffffffffc,%rax
    0.00 :	  475f05:       lea    0xc(%rbx,%rax,1),%rax
    0.00 :	  475f0a:       add    %rax,%r12
    0.00 :	  475f0d:       lea    0xc(%r12),%rdi
    0.00 :	  475f12:       mov    %rdi,%rax
    0.00 :	  475f15:       sub    %r14,%rax
    0.00 :	  475f18:       cmp    %rax,%r13
    0.00 :	  475f1b:       jbe    4760a0 <_dl_important_hwcaps+0x2a0>
    0.00 :	  475f21:       cmpl   $0x2,0x8(%r12)
    0.00 :	  475f27:       mov    (%r12),%ebx
    0.00 :	  475f2b:       jne    475ef0 <_dl_important_hwcaps+0xf0>
    0.00 :	  475f2d:       cmp    $0x4,%ebx
    0.00 :	  475f30:       jne    475ef0 <_dl_important_hwcaps+0xf0>
    0.00 :	  475f32:       mov    $0x4,%edx
    0.00 :	  475f37:       mov    $0x4b903a,%esi
    0.00 :	  475f3c:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  475f41:       test   %eax,%eax
    0.00 :	  475f43:       mov    0x4(%r12),%eax
    0.00 :	  475f48:       jne    475ef5 <_dl_important_hwcaps+0xf5>
    0.00 :	  475f4a:       cmp    $0xa,%eax
    0.00 :	  475f4d:       jbe    475ef5 <_dl_important_hwcaps+0xf5>
    0.00 :	  475f4f:       mov    %eax,%ebx
    0.00 :	  475f51:       mov    0x10(%r12),%eax
    0.00 :	  475f56:       mov    -0x58(%rbp),%r15
    0.00 :	  475f5a:       xor    %esi,%esi
    0.00 :	  475f5c:       mov    $0x4b903e,%edi
    0.00 :	  475f61:       mov    -0x60(%rbp),%r14
    0.00 :	  475f65:       sub    $0x8,%rbx
    0.00 :	  475f69:       lea    0x18(%r12),%r13
    0.00 :	  475f6e:       lea    0x1(%r15,%rax,1),%r15
    0.00 :	  475f73:       callq  46dfc0 <__access>
    0.00 :	  475f78:       test   %eax,%eax
    0.00 :	  475f7a:       je     4760d2 <_dl_important_hwcaps+0x2d2>
    0.00 :	  475f80:       mov    %r15,%rax
    0.00 :	  475f83:       shl    $0x4,%rax
    0.00 :	  475f87:       add    $0x10,%rax
    0.00 :	  475f8b:       sub    %rax,%rsp
    0.00 :	  475f8e:       lea    0xf(%rsp),%rax
    0.00 :	  475f93:       and    $0xfffffffffffffff0,%rax
    0.00 :	  475f97:       mov    %rax,-0x40(%rbp)
    0.00 :	  475f9b:       mov    %rax,-0x38(%rbp)
    0.00 :	  475f9f:       mov    0x14(%r12),%eax
    0.00 :	  475fa4:       or     %rax,0x25b6c5(%rip)        # 6d1670 <_dl_hwcap>
    0.00 :	  475fab:       or     %rax,0x25b6ae(%rip)        # 6d1660 <_dl_hwcap_mask>
    0.00 :	  475fb2:       mov    %eax,%ecx
    0.00 :	  475fb4:       lea    0x0(%r13,%rbx,1),%rax
    0.00 :	  475fb9:       xor    %ebx,%ebx
    0.00 :	  475fbb:       cmp    %rax,%r13
    0.00 :	  475fbe:       jae    4765ff <_dl_important_hwcaps+0x7ff>
    0.00 :	  475fc4:       mov    %r15,-0x48(%rbp)
    0.00 :	  475fc8:       mov    %r14,-0x58(%rbp)
    0.00 :	  475fcc:       mov    %ecx,%r12d
    0.00 :	  475fcf:       mov    %r13,%r14
    0.00 :	  475fd2:       mov    %rbx,%r15
    0.00 :	  475fd5:       mov    %rax,%r13
    0.00 :	  475fd8:       jmp    476000 <_dl_important_hwcaps+0x200>
    0.00 :	  475fda:       nopw   0x0(%rax,%rax,1)
    0.00 :	  475fe0:       mov    %r15,%rdx
    0.00 :	  475fe3:       lea    0x1(%rbx,%rax,1),%r14
    0.00 :	  475fe8:       add    $0x1,%r15
    0.00 :	  475fec:       shl    $0x4,%rdx
    0.00 :	  475ff0:       add    -0x40(%rbp),%rdx
    0.00 :	  475ff4:       cmp    %r13,%r14
    0.00 :	  475ff7:       mov    %rbx,(%rdx)
    0.00 :	  475ffa:       mov    %rax,0x8(%rdx)
    0.00 :	  475ffe:       jae    47602b <_dl_important_hwcaps+0x22b>
    0.00 :	  476000:       lea    0x1(%r14),%rbx
    0.00 :	  476004:       mov    %rbx,%rdi
    0.00 :	  476007:       callq  426ba0 <strlen>
    0.00 :	  47600c:       movzbl (%r14),%ecx
    0.00 :	  476010:       mov    $0x1,%edx
    0.00 :	  476015:       shl    %cl,%edx
    0.00 :	  476017:       test   %r12d,%edx
    0.00 :	  47601a:       jne    475fe0 <_dl_important_hwcaps+0x1e0>
    0.00 :	  47601c:       lea    0x1(%rbx,%rax,1),%r14
    0.00 :	  476021:       subq   $0x1,-0x48(%rbp)
    0.00 :	  476026:       cmp    %r13,%r14
    0.00 :	  476029:       jb     476000 <_dl_important_hwcaps+0x200>
    0.00 :	  47602b:       mov    %r15,%rbx
    0.00 :	  47602e:       mov    -0x58(%rbp),%r14
    0.00 :	  476032:       mov    -0x48(%rbp),%r15
    0.00 :	  476036:       mov    %rbx,%rax
    0.00 :	  476039:       lea    0x1(%rbx),%rdx
    0.00 :	  47603d:       shl    $0x4,%rax
    0.00 :	  476041:       test   %r14,%r14
    0.00 :	  476044:       je     476112 <_dl_important_hwcaps+0x312>
    0.00 :	  47604a:       xor    %ecx,%ecx
    0.00 :	  47604c:       mov    $0x1,%edi
    0.00 :	  476051:       nopl   0x0(%rax)
    0.00 :	  476058:       bt     %rcx,%r14
    0.00 :	  47605c:       jae    476094 <_dl_important_hwcaps+0x294>
    0.00 :	  47605e:       mov    %rbx,%rax
    0.00 :	  476061:       mov    %rdi,%rdx
    0.00 :	  476064:       shl    $0x4,%rax
    0.00 :	  476068:       add    -0x38(%rbp),%rax
    0.00 :	  47606c:       shl    %cl,%rdx
    0.00 :	  47606f:       add    $0x1,%rcx
    0.00 :	  476073:       xor    %rdx,%r14
    0.00 :	  476076:       movq   $0x4b9dc5,(%rax)
    0.00 :	  47607d:       movq   $0x0,0x8(%rax)
    0.00 :	  476085:       lea    0x1(%rbx),%rax
    0.00 :	  476089:       je     47610a <_dl_important_hwcaps+0x30a>
    0.00 :	  47608b:       bt     %rcx,%r14
    0.00 :	  47608f:       mov    %rax,%rbx
    0.00 :	  476092:       jb     47605e <_dl_important_hwcaps+0x25e>
    0.00 :	  476094:       add    $0x1,%rcx
    0.00 :	  476098:       jmp    476058 <_dl_important_hwcaps+0x258>
    0.00 :	  47609a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  4760a0:       mov    -0x40(%rbp),%r14
    0.00 :	  4760a4:       add    $0x1,%r15
    0.00 :	  4760a8:       add    $0x38,%r14
    0.00 :	  4760ac:       cmp    %r15,-0x38(%rbp)
    0.00 :	  4760b0:       jne    475ec2 <_dl_important_hwcaps+0xc2>
    0.00 :	  4760b6:       mov    -0x58(%rbp),%r15
    0.00 :	  4760ba:       mov    -0x60(%rbp),%r14
    0.00 :	  4760be:       xor    %esi,%esi
    0.00 :	  4760c0:       mov    $0x4b903e,%edi
    0.00 :	  4760c5:       callq  46dfc0 <__access>
    0.00 :	  4760ca:       test   %eax,%eax
    0.00 :	  4760cc:       jne    476516 <_dl_important_hwcaps+0x716>
    0.00 :	  4760d2:       mov    $0x10,%edi
    0.00 :	  4760d7:       callq  420f60 <__libc_malloc>
    0.00 :	  4760dc:       test   %rax,%rax
    0.00 :	  4760df:       je     4764f7 <_dl_important_hwcaps+0x6f7>
    0.00 :	  4760e5:       mov    -0x50(%rbp),%rcx
    0.00 :	  4760e9:       mov    %rax,(%rax)
    0.00 :	  4760ec:       movq   $0x0,0x8(%rax)
    0.00 :	  4760f4:       movq   $0x1,(%rcx)
    0.00 :	  4760fb:       lea    -0x28(%rbp),%rsp
    0.00 :	  4760ff:       pop    %rbx
    0.00 :	  476100:       pop    %r12
    0.00 :	  476102:       pop    %r13
    0.00 :	  476104:       pop    %r14
    0.00 :	  476106:       pop    %r15
    0.00 :	  476108:       pop    %rbp
    0.00 :	  476109:       retq   
    0.00 :	  47610a:       lea    0x2(%rbx),%rdx
    0.00 :	  47610e:       shl    $0x4,%rax
    0.00 :	  476112:       mov    -0x68(%rbp),%rcx
    0.00 :	  476116:       test   %rcx,%rcx
    0.00 :	  476119:       je     476135 <_dl_important_hwcaps+0x335>
    0.00 :	  47611b:       add    -0x38(%rbp),%rax
    0.00 :	  47611f:       mov    %rcx,(%rax)
    0.00 :	  476122:       mov    -0x78(%rbp),%rcx
    0.00 :	  476126:       mov    %rcx,0x8(%rax)
    0.00 :	  47612a:       mov    %rdx,%rax
    0.00 :	  47612d:       add    $0x1,%rdx
    0.00 :	  476131:       shl    $0x4,%rax
    0.00 :	  476135:       add    -0x38(%rbp),%rax
    0.00 :	  476139:       cmp    %rdx,%r15
    0.00 :	  47613c:       movq   $0x4b9051,(%rax)
    0.00 :	  476143:       movq   $0x3,0x8(%rax)
    0.00 :	  47614b:       jne    47660b <_dl_important_hwcaps+0x80b>
    0.00 :	  476151:       cmp    $0x1,%r15
    0.00 :	  476155:       mov    -0x38(%rbp),%rax
    0.00 :	  476159:       je     4764cf <_dl_important_hwcaps+0x6cf>
    0.00 :	  47615f:       mov    %r15,%r8
    0.00 :	  476162:       mov    0x8(%rax),%rcx
    0.00 :	  476166:       shl    $0x4,%r8
    0.00 :	  47616a:       cmp    $0x2,%r15
    0.00 :	  47616e:       lea    -0x10(%rax,%r8,1),%rsi
    0.00 :	  476173:       mov    %rcx,%rdi
    0.00 :	  476176:       mov    %rcx,-0x48(%rbp)
    0.00 :	  47617a:       mov    %rax,%rcx
    0.00 :	  47617d:       mov    0x8(%rsi),%rax
    0.00 :	  476181:       mov    %rax,%rdx
    0.00 :	  476184:       mov    %rax,-0x40(%rbp)
    0.00 :	  476188:       mov    %rdi,%rax
    0.00 :	  47618b:       lea    0x2(%rax,%rdx,1),%rax
    0.00 :	  476190:       jbe    4764c6 <_dl_important_hwcaps+0x6c6>
    0.00 :	  476196:       lea    (%rax,%rax,1),%rdx
    0.00 :	  47619a:       lea    -0x8(%rcx,%r8,1),%rdi
    0.00 :	  47619f:       mov    %rcx,%rax
    0.00 :	  4761a2:       add    $0x18,%rax
    0.00 :	  4761a6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  4761b0:       mov    (%rax),%rcx
    0.00 :	  4761b3:       add    $0x10,%rax
    0.00 :	  4761b7:       cmp    %rdi,%rax
    0.00 :	  4761ba:       lea    0x1(%rdx,%rcx,1),%rdx
    0.00 :	  4761bf:       jne    4761b0 <_dl_important_hwcaps+0x3b0>
    0.00 :	  4761c1:       cmp    $0x3,%r15
    0.00 :	  4761c5:       je     47650a <_dl_important_hwcaps+0x70a>
    0.00 :	  4761cb:       cmp    $0x3f,%r15
    0.00 :	  4761cf:       ja     4764f7 <_dl_important_hwcaps+0x6f7>
    0.00 :	  4761d5:       lea    0x80(%rdx),%rax
    0.00 :	  4761dc:       mov    $0x43,%ecx
    0.00 :	  4761e1:       mov    %r15d,-0x68(%rbp)
    0.00 :	  4761e5:       sub    %r15d,%ecx
    0.00 :	  4761e8:       shr    %cl,%rax
    0.00 :	  4761eb:       test   %rax,%rax
    0.00 :	  4761ee:       jne    4764f7 <_dl_important_hwcaps+0x6f7>
    0.00 :	  4761f4:       mov    -0x68(%rbp),%eax
    0.00 :	  4761f7:       lea    -0x3(%rax),%ecx
    0.00 :	  4761fa:       mov    %rdx,%rax
    0.00 :	  4761fd:       shl    %cl,%rax
    0.00 :	  476200:       movzbl -0x68(%rbp),%ecx
    0.00 :	  476204:       mov    $0x1,%r9d
    0.00 :	  47620a:       mov    %rsi,-0x80(%rbp)
    0.00 :	  47620e:       mov    %r9d,%esi
    0.00 :	  476211:       mov    %r8,-0x78(%rbp)
    0.00 :	  476215:       mov    %r9d,-0x58(%rbp)
    0.00 :	  476219:       shl    %cl,%esi
    0.00 :	  47621b:       mov    -0x50(%rbp),%rcx
    0.00 :	  47621f:       movslq %esi,%r12
    0.00 :	  476222:       mov    %esi,-0x84(%rbp)
    0.00 :	  476228:       mov    %r12,%rdx
    0.00 :	  47622b:       shl    $0x4,%rdx
    0.00 :	  47622f:       mov    %r12,(%rcx)
    0.00 :	  476232:       lea    (%rax,%rdx,1),%rdi
    0.00 :	  476236:       mov    %rdx,-0x50(%rbp)
    0.00 :	  47623a:       callq  420f60 <__libc_malloc>
    0.00 :	  47623f:       test   %rax,%rax
    0.00 :	  476242:       mov    %rax,-0x60(%rbp)
    0.00 :	  476246:       mov    -0x50(%rbp),%rdx
    0.00 :	  47624a:       mov    -0x58(%rbp),%r9d
    0.00 :	  47624e:       mov    -0x78(%rbp),%r8
    0.00 :	  476252:       mov    -0x80(%rbp),%rsi
    0.00 :	  476256:       je     4764f7 <_dl_important_hwcaps+0x6f7>
    0.00 :	  47625c:       lea    (%rax,%rdx,1),%rdi
    0.00 :	  476260:       cmp    $0x2,%r15
    0.00 :	  476264:       mov    %rdi,(%rax)
    0.00 :	  476267:       mov    %rdi,0x10(%rax)
    0.00 :	  47626b:       je     476543 <_dl_important_hwcaps+0x743>
    0.00 :	  476271:       mov    -0x68(%rbp),%eax
    0.00 :	  476274:       mov    %r15,-0x90(%rbp)
    0.00 :	  47627b:       mov    $0x1,%r13d
    0.00 :	  476281:       mov    %r12,-0x98(%rbp)
    0.00 :	  476288:       sub    $0x1,%eax
    0.00 :	  47628b:       mov    %eax,%ecx
    0.00 :	  47628d:       mov    %eax,-0x78(%rbp)
    0.00 :	  476290:       mov    -0x38(%rbp),%rax
    0.00 :	  476294:       shl    %cl,%r9d
    0.00 :	  476297:       mov    %r9d,-0x80(%rbp)
    0.00 :	  47629b:       movslq %r9d,%rbx
    0.00 :	  47629e:       mov    (%rax),%rcx
    0.00 :	  4762a1:       add    %rax,%r8
    0.00 :	  4762a4:       mov    %r8,-0x38(%rbp)
    0.00 :	  4762a8:       mov    %rcx,-0x50(%rbp)
    0.00 :	  4762ac:       mov    (%rsi),%rcx
    0.00 :	  4762af:       lea    -0x2(%r15),%rsi
    0.00 :	  4762b3:       mov    %rsi,-0x58(%rbp)
    0.00 :	  4762b7:       mov    %rcx,%r15
    0.00 :	  4762ba:       nopw   0x0(%rax,%rax,1)
    0.00 :	  4762c0:       mov    -0x40(%rbp),%rdx
    0.00 :	  4762c4:       mov    %r15,%rsi
    0.00 :	  4762c7:       sub    $0x2,%rbx
    0.00 :	  4762cb:       callq  429b10 <__mempcpy>
    0.00 :	  4762d0:       mov    $0x1,%edx
    0.00 :	  4762d5:       mov    $0x4b7f4e,%esi
    0.00 :	  4762da:       mov    %rax,%rdi
    0.00 :	  4762dd:       callq  429b10 <__mempcpy>
    0.00 :	  4762e2:       mov    -0x38(%rbp),%r14
    0.00 :	  4762e6:       mov    -0x58(%rbp),%r12
    0.00 :	  4762ea:       jmp    4762fa <_dl_important_hwcaps+0x4fa>
    0.00 :	  4762ec:       nopl   0x0(%rax)
    0.00 :	  4762f0:       sub    $0x10,%r14
    0.00 :	  4762f4:       sub    $0x1,%r12
    0.00 :	  4762f8:       je     476336 <_dl_important_hwcaps+0x536>
    0.00 :	  4762fa:       mov    %r13d,%edx
    0.00 :	  4762fd:       mov    %r12d,%ecx
    0.00 :	  476300:       shl    %cl,%edx
    0.00 :	  476302:       movslq %edx,%rdx
    0.00 :	  476305:       test   %rbx,%rdx
    0.00 :	  476308:       je     4762f0 <_dl_important_hwcaps+0x4f0>
    0.00 :	  47630a:       mov    -0x18(%r14),%rdx
    0.00 :	  47630e:       mov    -0x20(%r14),%rsi
    0.00 :	  476312:       mov    %rax,%rdi
    0.00 :	  476315:       sub    $0x10,%r14
    0.00 :	  476319:       callq  429b10 <__mempcpy>
    0.00 :	  47631e:       mov    $0x1,%edx
    0.00 :	  476323:       mov    $0x4b7f4e,%esi
    0.00 :	  476328:       mov    %rax,%rdi
    0.00 :	  47632b:       callq  429b10 <__mempcpy>
    0.00 :	  476330:       sub    $0x1,%r12
    0.00 :	  476334:       jne    4762fa <_dl_important_hwcaps+0x4fa>
    0.00 :	  476336:       mov    -0x48(%rbp),%rdx
    0.00 :	  47633a:       mov    -0x50(%rbp),%rsi
    0.00 :	  47633e:       mov    %rax,%rdi
    0.00 :	  476341:       callq  429b10 <__mempcpy>
    0.00 :	  476346:       mov    $0x1,%edx
    0.00 :	  47634b:       mov    %rax,%rdi
    0.00 :	  47634e:       mov    $0x4b7f4e,%esi
    0.00 :	  476353:       callq  429b10 <__mempcpy>
    0.00 :	  476358:       test   %rbx,%rbx
    0.00 :	  47635b:       mov    %rax,%rdi
    0.00 :	  47635e:       jne    4762c0 <_dl_important_hwcaps+0x4c0>
    0.00 :	  476364:       mov    -0x90(%rbp),%r15
    0.00 :	  47636b:       mov    -0x98(%rbp),%r12
    0.00 :	  476372:       movzbl -0x68(%rbp),%ecx
    0.00 :	  476376:       mov    -0x60(%rbp),%rsi
    0.00 :	  47637a:       mov    $0x10,%edx
    0.00 :	  47637f:       mov    %rsi,%rax
    0.00 :	  476382:       shl    %cl,%rdx
    0.00 :	  476385:       add    %rsi,%rdx
    0.00 :	  476388:       nopl   0x0(%rax,%rax,1)
    0.00 :	  476390:       movq   $0x0,0x8(%rax)
    0.00 :	  476398:       add    $0x10,%rax
    0.00 :	  47639c:       cmp    %rdx,%rax
    0.00 :	  47639f:       jne    476390 <_dl_important_hwcaps+0x590>
    0.00 :	  4763a1:       mov    -0x38(%rbp),%r13
    0.00 :	  4763a5:       mov    -0x60(%rbp),%r9
    0.00 :	  4763a9:       mov    $0x1,%edi
    0.00 :	  4763ae:       mov    %r15,%rcx
    0.00 :	  4763b1:       nopl   0x0(%rax)
    0.00 :	  4763b8:       sub    $0x1,%rcx
    0.00 :	  4763bc:       mov    %edi,%r8d
    0.00 :	  4763bf:       shl    %cl,%r8d
    0.00 :	  4763c2:       test   %r12,%r12
    0.00 :	  4763c5:       movslq %r8d,%r8
    0.00 :	  4763c8:       je     4763fb <_dl_important_hwcaps+0x5fb>
    0.00 :	  4763ca:       mov    %r9,%rdx
    0.00 :	  4763cd:       mov    %r12,%rax
    0.00 :	  4763d0:       sub    $0x1,%rax
    0.00 :	  4763d4:       test   %rax,%r8
    0.00 :	  4763d7:       je     4763f2 <_dl_important_hwcaps+0x5f2>
    0.00 :	  4763d9:       mov    -0x8(%r13),%rsi
    0.00 :	  4763dd:       sub    $0x1,%rax
    0.00 :	  4763e1:       add    $0x1,%rsi
    0.00 :	  4763e5:       add    %rsi,0x8(%rdx)
    0.00 :	  4763e9:       add    $0x10,%rdx
    0.00 :	  4763ed:       test   %rax,%r8
    0.00 :	  4763f0:       jne    4763d9 <_dl_important_hwcaps+0x5d9>
    0.00 :	  4763f2:       add    $0x10,%rdx
    0.00 :	  4763f6:       test   %rax,%rax
    0.00 :	  4763f9:       jne    4763d0 <_dl_important_hwcaps+0x5d0>
    0.00 :	  4763fb:       sub    $0x10,%r13
    0.00 :	  4763ff:       test   %rcx,%rcx
    0.00 :	  476402:       jne    4763b8 <_dl_important_hwcaps+0x5b8>
    0.00 :	  476404:       mov    -0x60(%rbp),%rax
    0.00 :	  476408:       mov    -0x84(%rbp),%r8d
    0.00 :	  47640f:       movzbl -0x78(%rbp),%ecx
    0.00 :	  476413:       sub    $0x2,%r8d
    0.00 :	  476417:       lea    0x20(%rax),%rdx
    0.00 :	  47641b:       mov    $0x1,%eax
    0.00 :	  476420:       movslq %r8d,%r8
    0.00 :	  476423:       shl    %cl,%rax
    0.00 :	  476426:       cmp    %rax,%r8
    0.00 :	  476429:       je     476472 <_dl_important_hwcaps+0x672>
    0.00 :	  47642b:       mov    %rdx,%rcx
    0.00 :	  47642e:       mov    %r8,%rsi
    0.00 :	  476431:       jmp    47644d <_dl_important_hwcaps+0x64d>
    0.00 :	  476433:       nopl   0x0(%rax,%rax,1)
    0.00 :	  476438:       mov    -0x18(%rcx),%rdi
    0.00 :	  47643c:       add    -0x20(%rcx),%rdi
    0.00 :	  476440:       add    $0x10,%rcx
    0.00 :	  476444:       mov    %rdi,-0x10(%rcx)
    0.00 :	  476448:       cmp    %rax,%rsi
    0.00 :	  47644b:       je     476468 <_dl_important_hwcaps+0x668>
    0.00 :	  47644d:       sub    $0x1,%rsi
    0.00 :	  476451:       test   $0x1,%sil
    0.00 :	  476455:       jne    476438 <_dl_important_hwcaps+0x638>
    0.00 :	  476457:       mov    -0x10(%rcx),%rdi
    0.00 :	  47645b:       add    $0x10,%rcx
    0.00 :	  47645f:       mov    %rdi,-0x10(%rcx)
    0.00 :	  476463:       cmp    %rax,%rsi
    0.00 :	  476466:       jne    47644d <_dl_important_hwcaps+0x64d>
    0.00 :	  476468:       sub    %rax,%r8
    0.00 :	  47646b:       shl    $0x4,%r8
    0.00 :	  47646f:       add    %r8,%rdx
    0.00 :	  476472:       mov    -0x80(%rbp),%esi
    0.00 :	  476475:       mov    -0x40(%rbp),%rbx
    0.00 :	  476479:       neg    %esi
    0.00 :	  47647b:       add    $0x1,%rbx
    0.00 :	  47647f:       movslq %esi,%rsi
    0.00 :	  476482:       shl    $0x4,%rsi
    0.00 :	  476486:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  476490:       mov    %rbx,%rcx
    0.00 :	  476493:       add    (%rdx,%rsi,1),%rcx
    0.00 :	  476497:       add    $0x10,%rdx
    0.00 :	  47649b:       mov    %rcx,-0x10(%rdx)
    0.00 :	  47649f:       sub    $0x1,%rax
    0.00 :	  4764a3:       jne    476490 <_dl_important_hwcaps+0x690>
    0.00 :	  4764a5:       mov    -0x60(%rbp),%rcx
    0.00 :	  4764a9:       mov    -0x70(%rbp),%rsi
    0.00 :	  4764ad:       mov    0x8(%rcx),%rax
    0.00 :	  4764b1:       mov    %rax,(%rsi)
    0.00 :	  4764b4:       lea    -0x28(%rbp),%rsp
    0.00 :	  4764b8:       mov    %rcx,%rax
    0.00 :	  4764bb:       pop    %rbx
    0.00 :	  4764bc:       pop    %r12
    0.00 :	  4764be:       pop    %r13
    0.00 :	  4764c0:       pop    %r14
    0.00 :	  4764c2:       pop    %r15
    0.00 :	  4764c4:       pop    %rbp
    0.00 :	  4764c5:       retq   
   50.00 :	  4764c6:       mov    %r15d,-0x68(%rbp)
    0.00 :	  4764ca:       jmpq   476200 <_dl_important_hwcaps+0x400>
    0.00 :	  4764cf:       mov    0x8(%rax),%rbx
    0.00 :	  4764d3:       mov    -0x50(%rbp),%rax
    0.00 :	  4764d7:       lea    0x21(%rbx),%rdi
    0.00 :	  4764db:       movq   $0x2,(%rax)
    0.00 :	  4764e2:       lea    0x1(%rbx),%r12
    0.00 :	  4764e6:       callq  420f60 <__libc_malloc>
    0.00 :	  4764eb:       test   %rax,%rax
    0.00 :	  4764ee:       mov    %rax,%r14
    0.00 :	  4764f1:       jne    4765b8 <_dl_important_hwcaps+0x7b8>
    0.00 :	  4764f7:       mov    $0x4b906a,%ecx
    0.00 :	  4764fc:       xor    %edx,%edx
    0.00 :	  4764fe:       xor    %esi,%esi
    0.00 :	  476500:       mov    $0xc,%edi
    0.00 :	  476505:       callq  476630 <_dl_signal_error>
    0.00 :	  47650a:       movl   $0x3,-0x68(%rbp)
    0.00 :	  476511:       jmpq   4761f4 <_dl_important_hwcaps+0x3f4>
    0.00 :	  476516:       add    $0x1,%r15
    0.00 :	  47651a:       mov    $0x1,%edx
    0.00 :	  47651f:       xor    %ebx,%ebx
    0.00 :	  476521:       mov    %r15,%rax
    0.00 :	  476524:       shl    $0x4,%rax
    0.00 :	  476528:       add    $0x10,%rax
    0.00 :	  47652c:       sub    %rax,%rsp
    0.00 :	  47652f:       xor    %eax,%eax
    0.00 :	  476531:       lea    0xf(%rsp),%r13
    0.00 :	  476536:       and    $0xfffffffffffffff0,%r13
    0.00 :	  47653a:       mov    %r13,-0x38(%rbp)
    0.00 :	  47653e:       jmpq   476041 <_dl_important_hwcaps+0x241>
    0.00 :	  476543:       mov    -0x38(%rbp),%rbx
    0.00 :	  476547:       mov    %r9d,-0x58(%rbp)
    0.00 :	  47654b:       mov    %r8,-0x50(%rbp)
    0.00 :	  47654f:       mov    0x18(%rbx),%rdx
    0.00 :	  476553:       mov    0x10(%rbx),%rsi
    0.00 :	  476557:       callq  429b10 <__mempcpy>
    0.00 :	  47655c:       mov    $0x1,%edx
    0.00 :	  476561:       mov    $0x4b7f4e,%esi
    0.00 :	  476566:       mov    %rax,%rdi
    0.00 :	  476569:       callq  429b10 <__mempcpy>
    0.00 :	  47656e:       mov    -0x48(%rbp),%rdx
    0.00 :	  476572:       mov    (%rbx),%rsi
    0.00 :	  476575:       mov    %rax,%rdi
    0.00 :	  476578:       callq  429b10 <__mempcpy>
    0.00 :	  47657d:       mov    $0x1,%edx
    0.00 :	  476582:       mov    $0x4b7f4e,%esi
    0.00 :	  476587:       mov    %rax,%rdi
    0.00 :	  47658a:       callq  429b10 <__mempcpy>
    0.00 :	  47658f:       mov    -0x68(%rbp),%eax
    0.00 :	  476592:       mov    -0x58(%rbp),%r9d
    0.00 :	  476596:       mov    -0x50(%rbp),%r8
    0.00 :	  47659a:       sub    $0x1,%eax
    0.00 :	  47659d:       mov    %eax,%ecx
    0.00 :	  47659f:       mov    %eax,-0x78(%rbp)
    0.00 :	  4765a2:       mov    %rbx,%rax
    0.00 :	  4765a5:       shl    %cl,%r9d
    0.00 :	  4765a8:       add    %r8,%rax
    0.00 :	  4765ab:       mov    %r9d,-0x80(%rbp)
    0.00 :	  4765af:       mov    %rax,-0x38(%rbp)
    0.00 :	  4765b3:       jmpq   476372 <_dl_important_hwcaps+0x572>
    0.00 :	  4765b8:       lea    0x20(%rax),%rdi
    0.00 :	  4765bc:       mov    %r12,0x8(%rax)
    0.00 :	  4765c0:       movq   $0x0,0x18(%rax)
    0.00 :	  4765c8:       mov    %rbx,%rdx
    0.00 :	  4765cb:       mov    %rdi,(%rax)
    0.00 :	  4765ce:       mov    %rdi,0x10(%rax)
    0.00 :	  4765d2:       mov    -0x38(%rbp),%rax
    0.00 :	  4765d6:       mov    (%rax),%rsi
    0.00 :	  4765d9:       callq  429b10 <__mempcpy>
    0.00 :	  4765de:       movb   $0x2f,(%rax)
    0.00 :	  4765e1:       mov    -0x50(%rbp),%rax
    0.00 :	  4765e5:       mov    -0x70(%rbp),%rcx
    0.00 :	  4765e9:       movq   $0x2,(%rax)
    0.00 :	  4765f0:       mov    0x8(%r14),%rax
    0.00 :	  4765f4:       mov    %rax,(%rcx)
    0.00 :	  4765f7:       mov    %r14,%rax
    0.00 :	  4765fa:       jmpq   4760fb <_dl_important_hwcaps+0x2fb>
    0.00 :	  4765ff:       mov    $0x1,%edx
    0.00 :	  476604:       xor    %eax,%eax
    0.00 :	  476606:       jmpq   476041 <_dl_important_hwcaps+0x241>
    0.00 :	  47660b:       mov    $0x4b9090,%ecx
    0.00 :	  476610:       mov    $0xb5,%edx
    0.00 :	  476615:       mov    $0x4b9055,%esi
    0.00 :	  47661a:       mov    $0x4b9061,%edi
    0.00 :	  47661f:       callq  405610 <__assert_fail>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000471490 <_dl_init_paths>:
         :	_dl_init_paths():
   50.00 :	  471490:       push   %rbp
    0.00 :	  471491:       mov    $0x6ccfb0,%ecx
    0.00 :	  471496:       mov    $0x6ccfb8,%edx
    0.00 :	  47149b:       mov    %rsp,%rbp
    0.00 :	  47149e:       push   %r15
    0.00 :	  4714a0:       push   %r14
    0.00 :	  4714a2:       push   %r13
    0.00 :	  4714a4:       push   %r12
    0.00 :	  4714a6:       push   %rbx
    0.00 :	  4714a7:       mov    %rdi,%rbx
    0.00 :	  4714aa:       sub    $0x38,%rsp
    0.00 :	  4714ae:       mov    0x260d3b(%rip),%rsi        # 6d21f0 <_dl_platformlen>
    0.00 :	  4714b5:       mov    0x260d6c(%rip),%rdi        # 6d2228 <_dl_platform>
    0.00 :	  4714bc:       callq  475e00 <_dl_important_hwcaps>
    0.00 :	  4714c1:       mov    $0x28,%edi
    0.00 :	  4714c6:       mov    %rax,0x25baf3(%rip)        # 6ccfc0 <capstr>
    0.00 :	  4714cd:       callq  420f60 <__libc_malloc>
    0.00 :	  4714d2:       test   %rax,%rax
    0.00 :	  4714d5:       mov    %rax,0x25bac4(%rip)        # 6ccfa0 <rtld_search_dirs>
    0.00 :	  4714dc:       je     471751 <_dl_init_paths+0x2c1>
    0.00 :	  4714e2:       mov    %rax,%r15
    0.00 :	  4714e5:       mov    0x25bacc(%rip),%rax        # 6ccfb8 <ncapstr>
    0.00 :	  4714ec:       movabs $0xcccccccccccccccd,%rdx
    0.00 :	  4714f6:       mov    %rax,-0x48(%rbp)
    0.00 :	  4714fa:       shl    $0x2,%rax
    0.00 :	  4714fe:       lea    0x4f(%rax),%r12
    0.00 :	  471502:       mov    %rax,-0x50(%rbp)
    0.00 :	  471506:       mov    %r12,%rax
    0.00 :	  471509:       mul    %rdx
    0.00 :	  47150c:       shr    $0x5,%rdx
    0.00 :	  471510:       imul   $0xa50,%rdx,%rdi
    0.00 :	  471517:       mov    %rdx,%r12
    0.00 :	  47151a:       callq  420f60 <__libc_malloc>
    0.00 :	  47151f:       test   %rax,%rax
    0.00 :	  471522:       mov    %rax,(%r15)
    0.00 :	  471525:       je     47173e <_dl_init_paths+0x2ae>
    0.00 :	  47152b:       lea    (%r12,%r12,4),%r12
    0.00 :	  47152f:       lea    0x28(%rax),%r13
    0.00 :	  471533:       cmpq   $0x0,-0x48(%rbp)
    0.00 :	  471538:       mov    %rax,0x260d59(%rip)        # 6d2298 <_dl_all_dirs>
    0.00 :	  47153f:       movq   $0x4b819f,0x8(%rax)
    0.00 :	  471547:       mov    %r15,%r14
    0.00 :	  47154a:       lea    0x0(,%r12,8),%rsi
    0.00 :	  471552:       movq   $0x0,0x10(%rax)
    0.00 :	  47155a:       movq   $0x4b8820,0x18(%rax)
    0.00 :	  471562:       movq   $0x16,0x20(%rax)
    0.00 :	  47156a:       movl   $0x0,0x25ba34(%rip)        # 6ccfa8 <rtld_search_dirs+0x8>
    0.00 :	  471574:       mov    $0x4b8800,%r12d
    0.00 :	  47157a:       lea    0x8(%rax,%rsi,1),%r8
    0.00 :	  47157f:       lea    -0x28(%r13),%rax
    0.00 :	  471583:       mov    %rsi,-0x58(%rbp)
    0.00 :	  471587:       mov    $0x4b8837,%r15d
    0.00 :	  47158d:       mov    %rax,-0x40(%rbp)
    0.00 :	  471591:       je     4715a9 <_dl_init_paths+0x119>
    0.00 :	  471593:       mov    -0x50(%rbp),%rdx
    0.00 :	  471597:       xor    %esi,%esi
    0.00 :	  471599:       mov    %r13,%rdi
    0.00 :	  47159c:       mov    %r8,-0x38(%rbp)
    0.00 :	  4715a0:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  4715a5:       mov    -0x38(%rbp),%r8
    0.00 :	  4715a9:       cmp    $0x4b8818,%r12
    0.00 :	  4715b0:       je     471618 <_dl_init_paths+0x188>
    0.00 :	  4715b2:       lea    -0x8(%r8),%rax
    0.00 :	  4715b6:       mov    -0x58(%rbp),%rcx
    0.00 :	  4715ba:       add    $0x8,%r14
    0.00 :	  4715be:       add    $0x8,%r12
    0.00 :	  4715c2:       mov    %rax,-0x28(%r13)
    0.00 :	  4715c6:       mov    %rax,(%r14)
    0.00 :	  4715c9:       mov    (%r12),%rax
   50.00 :	  4715cd:       movq   $0x4b819f,(%r8)
    0.00 :	  4715d4:       add    %rcx,%r13
    0.00 :	  4715d7:       movq   $0x0,0x8(%r8)
    0.00 :	  4715df:       mov    %r15,0x10(%r8)
    0.00 :	  4715e3:       mov    %rax,0x18(%r8)
    0.00 :	  4715e7:       add    %rcx,%r8
    0.00 :	  4715ea:       cmpb   $0x2f,(%r15)
    0.00 :	  4715ee:       lea    0x1(%r15,%rax,1),%rax
    0.00 :	  4715f3:       jne    471725 <_dl_init_paths+0x295>
    0.00 :	  4715f9:       cmpq   $0x0,-0x48(%rbp)
    0.00 :	  4715fe:       mov    %rax,%r15
    0.00 :	  471601:       lea    -0x28(%r13),%rax
    0.00 :	  471605:       mov    %rax,-0x40(%rbp)
    0.00 :	  471609:       jne    471593 <_dl_init_paths+0x103>
    0.00 :	  47160b:       cmp    $0x4b8818,%r12
    0.00 :	  471612:       jne    4715b2 <_dl_init_paths+0x122>
    0.00 :	  471614:       nopl   0x0(%rax)
    0.00 :	  471618:       mov    -0x40(%rbp),%rax
    0.00 :	  47161c:       test   %rbx,%rbx
    0.00 :	  47161f:       movq   $0x1a,0x26034e(%rip)        # 6d1978 <max_dirnamelen>
    0.00 :	  47162a:       movq   $0x0,0x8(%r14)
    0.00 :	  471632:       movq   $0x0,(%rax)
    0.00 :	  471639:       je     471644 <_dl_init_paths+0x1b4>
    0.00 :	  47163b:       movzbl (%rbx),%r12d
    0.00 :	  47163f:       test   %r12b,%r12b
    0.00 :	  471642:       jne    471660 <_dl_init_paths+0x1d0>
    0.00 :	  471644:       movq   $0xffffffffffffffff,0x25b981(%rip)        # 6ccfd0 <env_path_list>
    0.00 :	  47164f:       lea    -0x28(%rbp),%rsp
    0.00 :	  471653:       pop    %rbx
    0.00 :	  471654:       pop    %r12
    0.00 :	  471656:       pop    %r13
    0.00 :	  471658:       pop    %r14
    0.00 :	  47165a:       pop    %r15
    0.00 :	  47165c:       pop    %rbp
    0.00 :	  47165d:       retq   
    0.00 :	  47165e:       xchg   %ax,%ax
    0.00 :	  471660:       mov    %rbx,%rdi
    0.00 :	  471663:       callq  426ba0 <strlen>
    0.00 :	  471668:       lea    0x1(%rax),%rdx
    0.00 :	  47166c:       add    $0x1f,%rax
    0.00 :	  471670:       mov    %rbx,%rsi
    0.00 :	  471673:       and    $0xfffffffffffffff0,%rax
    0.00 :	  471677:       sub    %rax,%rsp
    0.00 :	  47167a:       lea    0xf(%rsp),%rdi
    0.00 :	  47167f:       and    $0xfffffffffffffff0,%rdi
    0.00 :	  471683:       callq  42f570 <memcpy>
    0.00 :	  471688:       mov    %rax,%r13
    0.00 :	  47168b:       mov    $0x1,%eax
    0.00 :	  471690:       sub    $0x3a,%r12d
    0.00 :	  471694:       xor    %edx,%edx
    0.00 :	  471696:       cmp    $0x2,%r12b
    0.00 :	  47169a:       setb   %dl
    0.00 :	  47169d:       add    $0x1,%rbx
    0.00 :	  4716a1:       movzbl (%rbx),%r12d
    0.00 :	  4716a5:       add    %rdx,%rax
    0.00 :	  4716a8:       test   %r12b,%r12b
    0.00 :	  4716ab:       jne    471690 <_dl_init_paths+0x200>
    0.00 :	  4716ad:       lea    0x8(,%rax,8),%rdi
    0.00 :	  4716b5:       callq  420f60 <__libc_malloc>
    0.00 :	  4716ba:       test   %rax,%rax
    0.00 :	  4716bd:       mov    %rax,0x25b90c(%rip)        # 6ccfd0 <env_path_list>
    0.00 :	  4716c4:       je     47173e <_dl_init_paths+0x2ae>
    0.00 :	  4716c6:       sub    $0x8,%rsp
    0.00 :	  4716ca:       mov    0x25b8c8(%rip),%ecx        # 6ccf98 <__libc_enable_secure>
    0.00 :	  4716d0:       xor    %r9d,%r9d
    0.00 :	  4716d3:       pushq  $0x0
    0.00 :	  4716d5:       mov    $0x4b81cb,%edx
    0.00 :	  4716da:       mov    %r13,%rdi
    0.00 :	  4716dd:       mov    $0x4a85ea,%r8d
    0.00 :	  4716e3:       mov    %rax,%rsi
    0.00 :	  4716e6:       callq  470d30 <fillin_rpath>
    0.00 :	  4716eb:       mov    0x25b8de(%rip),%rdi        # 6ccfd0 <env_path_list>
    0.00 :	  4716f2:       pop    %rax
    0.00 :	  4716f3:       pop    %rdx
    0.00 :	  4716f4:       cmpq   $0x0,(%rdi)
    0.00 :	  4716f8:       je     471713 <_dl_init_paths+0x283>
    0.00 :	  4716fa:       movl   $0x0,0x25b8d4(%rip)        # 6ccfd8 <env_path_list+0x8>
    0.00 :	  471704:       lea    -0x28(%rbp),%rsp
    0.00 :	  471708:       pop    %rbx
    0.00 :	  471709:       pop    %r12
    0.00 :	  47170b:       pop    %r13
    0.00 :	  47170d:       pop    %r14
    0.00 :	  47170f:       pop    %r15
    0.00 :	  471711:       pop    %rbp
    0.00 :	  471712:       retq   
    0.00 :	  471713:       callq  421300 <__cfree>
    0.00 :	  471718:       movq   $0xffffffffffffffff,0x25b8ad(%rip)        # 6ccfd0 <env_path_list>
    0.00 :	  471723:       jmp    4716fa <_dl_init_paths+0x26a>
    0.00 :	  471725:       mov    $0x4b8748,%ecx
    0.00 :	  47172a:       mov    $0x2cf,%edx
    0.00 :	  47172f:       mov    $0x4b8149,%esi
    0.00 :	  471734:       mov    $0x4b81b2,%edi
    0.00 :	  471739:       callq  405610 <__assert_fail>
    0.00 :	  47173e:       mov    $0x4b8620,%ecx
    0.00 :	  471743:       xor    %edx,%edx
    0.00 :	  471745:       xor    %esi,%esi
    0.00 :	  471747:       mov    $0xc,%edi
    0.00 :	  47174c:       callq  476630 <_dl_signal_error>
    0.00 :	  471751:       mov    $0x4b8670,%ecx
    0.00 :	  471756:       jmp    471743 <_dl_init_paths+0x2b3>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000400890 <_start>:
         :	_start():
   50.00 :	  400890:       xor    %ebp,%ebp
   50.00 :	  400892:       mov    %rdx,%r9
    0.00 :	  400895:       pop    %rsi
    0.00 :	  400896:       mov    %rsp,%rdx
    0.00 :	  400899:       and    $0xfffffffffffffff0,%rsp
    0.00 :	  40089d:       push   %rax
    0.00 :	  40089e:       push   %rsp
    0.00 :	  40089f:       mov    $0x405490,%r8
    0.00 :	  4008a6:       mov    $0x405400,%rcx
    0.00 :	  4008ad:       mov    $0x40487b,%rdi
    0.00 :	  4008b4:       callq  404bb0 <__libc_start_main>
    0.00 :	  4008b9:       hlt    
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000402813 <gen_a>:
         :	gen_a():
         :	    c->coeffs[4*i+3] = (r[POLY_BYTES+i] >> 6);
         :	  }
         :	}
         :
         :	static void gen_a(poly *a, const unsigned char *seed)
         :	{
    0.00 :	  402813:       push   %rbp
   50.00 :	  402814:       mov    %rsp,%rbp
    0.00 :	  402817:       sub    $0x10,%rsp
    0.00 :	  40281b:       mov    %rdi,-0x8(%rbp)
    0.00 :	  40281f:       mov    %rsi,-0x10(%rbp)
         :	    poly_uniform(a,seed);
    0.00 :	  402823:       mov    -0x10(%rbp),%rdx
    0.00 :	  402827:       mov    -0x8(%rbp),%rax
    0.00 :	  40282b:       mov    %rdx,%rsi
    0.00 :	  40282e:       mov    %rax,%rdi
    0.00 :	  402831:       callq  4016fd <poly_uniform>
         :	}
    0.00 :	  402836:       nop
    0.00 :	  402837:       leaveq 
   50.00 :	  402838:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004126b0 <getenv>:
         :	getenv():
   50.00 :	  4126b0:       push   %r15
    0.00 :	  4126b2:       push   %r14
    0.00 :	  4126b4:       push   %r13
    0.00 :	  4126b6:       push   %r12
    0.00 :	  4126b8:       push   %rbp
    0.00 :	  4126b9:       push   %rbx
    0.00 :	  4126ba:       mov    %rdi,%rbx
    0.00 :	  4126bd:       sub    $0x8,%rsp
    0.00 :	  4126c1:       callq  426ba0 <strlen>
    0.00 :	  4126c6:       mov    0x2bef73(%rip),%rbp        # 6d1640 <__environ>
    0.00 :	  4126cd:       test   %rbp,%rbp
    0.00 :	  4126d0:       je     412788 <getenv+0xd8>
    0.00 :	  4126d6:       mov    %rax,%r13
    0.00 :	  4126d9:       movzbl (%rbx),%eax
    0.00 :	  4126dc:       test   %al,%al
    0.00 :	  4126de:       je     412788 <getenv+0xd8>
    0.00 :	  4126e4:       cmpb   $0x0,0x1(%rbx)
    0.00 :	  4126e8:       jne    412730 <getenv+0x80>
    0.00 :	  4126ea:       mov    0x0(%rbp),%rbx
    0.00 :	  4126ee:       or     $0x3d,%ah
    0.00 :	  4126f1:       test   %rbx,%rbx
    0.00 :	  4126f4:       jne    41270d <getenv+0x5d>
    0.00 :	  4126f6:       jmp    412716 <getenv+0x66>
    0.00 :	  4126f8:       nopl   0x0(%rax,%rax,1)
    0.00 :	  412700:       add    $0x8,%rbp
    0.00 :	  412704:       mov    0x0(%rbp),%rbx
    0.00 :	  412708:       test   %rbx,%rbx
    0.00 :	  41270b:       je     412716 <getenv+0x66>
    0.00 :	  41270d:       cmp    (%rbx),%ax
    0.00 :	  412710:       jne    412700 <getenv+0x50>
    0.00 :	  412712:       add    $0x2,%rbx
    0.00 :	  412716:       add    $0x8,%rsp
    0.00 :	  41271a:       mov    %rbx,%rax
    0.00 :	  41271d:       pop    %rbx
    0.00 :	  41271e:       pop    %rbp
    0.00 :	  41271f:       pop    %r12
    0.00 :	  412721:       pop    %r13
    0.00 :	  412723:       pop    %r14
    0.00 :	  412725:       pop    %r15
    0.00 :	  412727:       retq   
    0.00 :	  412728:       nopl   0x0(%rax,%rax,1)
    0.00 :	  412730:       movzwl (%rbx),%r12d
    0.00 :	  412734:       lea    0x2(%rbx),%r15
    0.00 :	  412738:       mov    0x0(%rbp),%rbx
    0.00 :	  41273c:       lea    -0x2(%r13),%r14
   50.00 :	  412740:       test   %rbx,%rbx
    0.00 :	  412743:       jne    41275d <getenv+0xad>
    0.00 :	  412745:       jmp    412716 <getenv+0x66>
    0.00 :	  412747:       nopw   0x0(%rax,%rax,1)
    0.00 :	  412750:       add    $0x8,%rbp
    0.00 :	  412754:       mov    0x0(%rbp),%rbx
    0.00 :	  412758:       test   %rbx,%rbx
    0.00 :	  41275b:       je     412716 <getenv+0x66>
    0.00 :	  41275d:       cmp    (%rbx),%r12w
    0.00 :	  412761:       jne    412750 <getenv+0xa0>
    0.00 :	  412763:       lea    0x2(%rbx),%rdi
    0.00 :	  412767:       mov    %r14,%rdx
    0.00 :	  41276a:       mov    %r15,%rsi
    0.00 :	  41276d:       callq  426d40 <strncmp>
    0.00 :	  412772:       test   %eax,%eax
    0.00 :	  412774:       jne    412750 <getenv+0xa0>
    0.00 :	  412776:       cmpb   $0x3d,(%rbx,%r13,1)
    0.00 :	  41277b:       jne    412750 <getenv+0xa0>
    0.00 :	  41277d:       lea    0x1(%rbx,%r13,1),%rbx
    0.00 :	  412782:       jmp    412716 <getenv+0x66>
    0.00 :	  412784:       nopl   0x0(%rax)
    0.00 :	  412788:       xor    %ebx,%ebx
    0.00 :	  41278a:       jmp    412716 <getenv+0x66>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000404355 <shake128_absorb>:
         :	shake128_absorb():
         :	  }
         :	}
         :
         :
         :	void shake128_absorb(uint64_t *s, const unsigned char *input, unsigned int inputByteLen)
         :	{
   50.00 :	  404355:       push   %rbp
    0.00 :	  404356:       mov    %rsp,%rbp
    0.00 :	  404359:       sub    $0x20,%rsp
    0.00 :	  40435d:       mov    %rdi,-0x8(%rbp)
    0.00 :	  404361:       mov    %rsi,-0x10(%rbp)
    0.00 :	  404365:       mov    %edx,-0x14(%rbp)
         :	  keccak_absorb(s, SHAKE128_RATE, input, inputByteLen, 0x1F);
    0.00 :	  404368:       mov    -0x14(%rbp),%ecx
   50.00 :	  40436b:       mov    -0x10(%rbp),%rdx
    0.00 :	  40436f:       mov    -0x8(%rbp),%rax
    0.00 :	  404373:       mov    $0x1f,%r8d
    0.00 :	  404379:       mov    $0xa8,%esi
    0.00 :	  40437e:       mov    %rax,%rdi
    0.00 :	  404381:       callq  404026 <keccak_absorb>
         :	}
    0.00 :	  404386:       nop
    0.00 :	  404387:       leaveq 
    0.00 :	  404388:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000041e400 <sysmalloc>:
         :	sysmalloc():
   50.00 :	  41e400:       push   %r15
    0.00 :	  41e402:       push   %r14
    0.00 :	  41e404:       push   %r13
    0.00 :	  41e406:       push   %r12
    0.00 :	  41e408:       push   %rbp
    0.00 :	  41e409:       push   %rbx
    0.00 :	  41e40a:       mov    %rdi,%rbp
    0.00 :	  41e40d:       sub    $0x58,%rsp
    0.00 :	  41e411:       test   %rsi,%rsi
    0.00 :	  41e414:       mov    0x2b1d65(%rip),%r15        # 6d0180 <_dl_pagesize>
    0.00 :	  41e41b:       je     41e6e0 <sysmalloc+0x2e0>
    0.00 :	  41e421:       cmp    %rdi,0x2b1388(%rip)        # 6cf7b0 <mp_+0x10>
    0.00 :	  41e428:       mov    %rsi,%rbx
    0.00 :	  41e42b:       jbe    41e5c0 <sysmalloc+0x1c0>
    0.00 :	  41e431:       movb   $0x0,0x8(%rsp)
    0.00 :	  41e436:       lea    0x58(%rbx),%rax
    0.00 :	  41e43a:       lea    0x7(%r15,%rbp,1),%r14
    0.00 :	  41e43f:       mov    %rax,(%rsp)
    0.00 :	  41e443:       mov    %r15,%rax
    0.00 :	  41e446:       neg    %rax
    0.00 :	  41e449:       and    %rax,%r14
    0.00 :	  41e44c:       mov    %r14,0x18(%rsp)
    0.00 :	  41e451:       mov    0x58(%rbx),%r13
    0.00 :	  41e455:       mov    0x8(%r13),%rax
    0.00 :	  41e459:       mov    %rax,%r12
    0.00 :	  41e45c:       and    $0xfffffffffffffff8,%r12
    0.00 :	  41e460:       test   %r12,%r12
    0.00 :	  41e463:       lea    0x0(%r13,%r12,1),%r10
    0.00 :	  41e468:       setne  %r11b
    0.00 :	  41e46c:       cmp    (%rsp),%r13
    0.00 :	  41e470:       jne    41e590 <sysmalloc+0x190>
    0.00 :	  41e476:       test   %r11b,%r11b
    0.00 :	  41e479:       jne    41e590 <sysmalloc+0x190>
    0.00 :	  41e47f:       lea    0x20(%rbp),%r8
    0.00 :	  41e483:       cmp    %r8,%r12
    0.00 :	  41e486:       jae    41ec43 <sysmalloc+0x843>
    0.00 :	  41e48c:       cmp    $0x6cf800,%rbx
    0.00 :	  41e493:       je     41e790 <sysmalloc+0x390>
    0.00 :	  41e499:       mov    %rbp,%rdx
    0.00 :	  41e49c:       mov    %r13,%r14
    0.00 :	  41e49f:       sub    %r12,%rdx
    0.00 :	  41e4a2:       and    $0xfffffffffc000000,%r14
    0.00 :	  41e4a9:       add    $0x20,%rdx
    0.00 :	  41e4ad:       test   %rdx,%rdx
    0.00 :	  41e4b0:       jle    41e5f8 <sysmalloc+0x1f8>
    0.00 :	  41e4b6:       mov    0x2b1cc3(%rip),%rax        # 6d0180 <_dl_pagesize>
    0.00 :	  41e4bd:       mov    0x10(%r14),%r9
    0.00 :	  41e4c1:       lea    -0x1(%rdx,%rax,1),%rcx
    0.00 :	  41e4c6:       neg    %rax
    0.00 :	  41e4c9:       and    %rcx,%rax
    0.00 :	  41e4cc:       lea    (%rax,%r9,1),%rcx
    0.00 :	  41e4d0:       cmp    $0x4000000,%rcx
    0.00 :	  41e4d7:       ja     41e5f8 <sysmalloc+0x1f8>
    0.00 :	  41e4dd:       mov    0x18(%r14),%rdi
    0.00 :	  41e4e1:       cmp    %rdi,%rcx
    0.00 :	  41e4e4:       ja     41e690 <sysmalloc+0x290>
    0.00 :	  41e4ea:       mov    %r14,%rax
    0.00 :	  41e4ed:       mov    %r13,%rdx
    0.00 :	  41e4f0:       mov    %r8,%r14
    0.00 :	  41e4f3:       mov    %rax,%r8
    0.00 :	  41e4f6:       mov    %rcx,0x10(%r8)
    0.00 :	  41e4fa:       nop
    0.00 :	  41e4fb:       mov    %rcx,%rax
    0.00 :	  41e4fe:       add    %r8,%rcx
    0.00 :	  41e501:       sub    %r9,%rax
    0.00 :	  41e504:       add    %rax,0x2b310d(%rip)        # 6d1618 <arena_mem>
    0.00 :	  41e50b:       sub    %r13,%rcx
    0.00 :	  41e50e:       mov    %rax,%rsi
    0.00 :	  41e511:       add    0x880(%rbx),%rsi
    0.00 :	  41e518:       or     $0x1,%rcx
    0.00 :	  41e51c:       mov    %rsi,0x880(%rbx)
    0.00 :	  41e523:       mov    %rcx,0x8(%r13)
    0.00 :	  41e527:       cmp    %rsi,0x888(%rbx)
    0.00 :	  41e52e:       jae    41e537 <sysmalloc+0x137>
    0.00 :	  41e530:       mov    %rsi,0x888(%rbx)
    0.00 :	  41e537:       mov    0x8(%rdx),%rax
    0.00 :	  41e53b:       and    $0xfffffffffffffff8,%rax
    0.00 :	  41e53f:       cmp    %rax,%r14
    0.00 :	  41e542:       ja     41e8a0 <sysmalloc+0x4a0>
    0.00 :	  41e548:       sub    %rbp,%rax
    0.00 :	  41e54b:       xor    %ecx,%ecx
    0.00 :	  41e54d:       cmp    $0x6cf800,%rbx
    0.00 :	  41e554:       setne  %cl
    0.00 :	  41e557:       lea    (%rdx,%rbp,1),%rsi
    0.00 :	  41e55b:       or     $0x1,%rbp
    0.00 :	  41e55f:       shl    $0x2,%rcx
    0.00 :	  41e563:       or     $0x1,%rax
    0.00 :	  41e567:       add    $0x10,%rdx
    0.00 :	  41e56b:       or     %rbp,%rcx
    0.00 :	  41e56e:       mov    %rsi,0x58(%rbx)
    0.00 :	  41e572:       mov    %rcx,-0x8(%rdx)
    0.00 :	  41e576:       mov    %rax,0x8(%rsi)
    0.00 :	  41e57a:       add    $0x58,%rsp
    0.00 :	  41e57e:       mov    %rdx,%rax
    0.00 :	  41e581:       pop    %rbx
    0.00 :	  41e582:       pop    %rbp
    0.00 :	  41e583:       pop    %r12
    0.00 :	  41e585:       pop    %r13
    0.00 :	  41e587:       pop    %r14
    0.00 :	  41e589:       pop    %r15
    0.00 :	  41e58b:       retq   
    0.00 :	  41e58c:       nopl   0x0(%rax)
    0.00 :	  41e590:       cmp    $0x1f,%r12
    0.00 :	  41e594:       jbe    41e5a7 <sysmalloc+0x1a7>
    0.00 :	  41e596:       test   $0x1,%al
    0.00 :	  41e598:       je     41e5a7 <sysmalloc+0x1a7>
    0.00 :	  41e59a:       lea    -0x1(%r15),%rax
    0.00 :	  41e59e:       test   %rax,%r10
    0.00 :	  41e5a1:       je     41e47f <sysmalloc+0x7f>
    0.00 :	  41e5a7:       mov    $0x4a6530,%ecx
    0.00 :	  41e5ac:       mov    $0x958,%edx
    0.00 :	  41e5b1:       mov    $0x4a5668,%esi
    0.00 :	  41e5b6:       mov    $0x4a5ce8,%edi
    0.00 :	  41e5bb:       callq  41aec0 <__malloc_assert>
    0.00 :	  41e5c0:       mov    0x2b1206(%rip),%eax        # 6cf7cc <mp_+0x2c>
    0.00 :	  41e5c6:       cmp    %eax,0x2b11fc(%rip)        # 6cf7c8 <mp_+0x28>
    0.00 :	  41e5cc:       jge    41e431 <sysmalloc+0x31>
    0.00 :	  41e5d2:       lea    0x7(%r15,%rdi,1),%r12
    0.00 :	  41e5d7:       mov    %r15,%rax
    0.00 :	  41e5da:       neg    %rax
    0.00 :	  41e5dd:       and    %rax,%r12
    0.00 :	  41e5e0:       cmp    %r12,%rdi
    0.00 :	  41e5e3:       jb     41ec87 <sysmalloc+0x887>
    0.00 :	  41e5e9:       movb   $0x1,0x8(%rsp)
    0.00 :	  41e5ee:       jmpq   41e436 <sysmalloc+0x36>
    0.00 :	  41e5f3:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41e5f8:       mov    0x2b11a9(%rip),%rsi        # 6cf7a8 <mp_+0x8>
    0.00 :	  41e5ff:       lea    0x40(%rbp),%rdi
    0.00 :	  41e603:       mov    %r8,0x10(%rsp)
    0.00 :	  41e608:       callq  41af20 <new_heap>
    0.00 :	  41e60d:       test   %rax,%rax
    0.00 :	  41e610:       mov    0x10(%rsp),%r8
    0.00 :	  41e615:       je     41e8b8 <sysmalloc+0x4b8>
    0.00 :	  41e61b:       mov    0x10(%rax),%rcx
    0.00 :	  41e61f:       lea    0x20(%rax),%rdx
    0.00 :	  41e623:       add    %rcx,0x2b2fee(%rip)        # 6d1618 <arena_mem>
    0.00 :	  41e62a:       sub    $0x20,%r12
    0.00 :	  41e62e:       mov    %r14,%rdi
    0.00 :	  41e631:       mov    %rbx,(%rax)
    0.00 :	  41e634:       and    $0xfffffffffffffff0,%r12
    0.00 :	  41e638:       mov    %rdi,0x8(%rax)
    0.00 :	  41e63c:       mov    %rdx,0x58(%rbx)
    0.00 :	  41e640:       mov    %rcx,%rsi
    0.00 :	  41e643:       add    0x880(%rbx),%rsi
    0.00 :	  41e64a:       sub    $0x20,%rcx
    0.00 :	  41e64e:       or     $0x1,%rcx
    0.00 :	  41e652:       cmp    $0x1f,%r12
    0.00 :	  41e656:       mov    %r8,%r14
    0.00 :	  41e659:       mov    %rsi,0x880(%rbx)
    0.00 :	  41e660:       mov    %rcx,0x28(%rax)
    0.00 :	  41e664:       lea    0x10(%r12),%rax
    0.00 :	  41e669:       lea    0x0(%r13,%rax,1),%rcx
    0.00 :	  41e66e:       movq   $0x1,0x8(%rcx)
    0.00 :	  41e676:       ja     41e868 <sysmalloc+0x468>
    0.00 :	  41e67c:       mov    %rax,%rdi
    0.00 :	  41e67f:       or     $0x1,%rdi
    0.00 :	  41e683:       mov    %rdi,0x8(%r13)
    0.00 :	  41e687:       mov    %rax,(%rcx)
    0.00 :	  41e68a:       jmpq   41e527 <sysmalloc+0x127>
    0.00 :	  41e68f:       nop
    0.00 :	  41e690:       mov    %rcx,%rsi
    0.00 :	  41e693:       mov    $0x3,%edx
    0.00 :	  41e698:       mov    %r8,0x10(%rsp)
    0.00 :	  41e69d:       sub    %rdi,%rsi
    0.00 :	  41e6a0:       add    %r14,%rdi
    0.00 :	  41e6a3:       mov    %r9,0x28(%rsp)
    0.00 :	  41e6a8:       mov    %rcx,0x20(%rsp)
    0.00 :	  41e6ad:       callq  443290 <__mprotect>
    0.00 :	  41e6b2:       test   %eax,%eax
    0.00 :	  41e6b4:       mov    0x10(%rsp),%r8
    0.00 :	  41e6b9:       jne    41e5f8 <sysmalloc+0x1f8>
    0.00 :	  41e6bf:       mov    0x20(%rsp),%rcx
    0.00 :	  41e6c4:       mov    %r14,%rax
    0.00 :	  41e6c7:       mov    0x28(%rsp),%r9
    0.00 :	  41e6cc:       mov    %r8,%r14
    0.00 :	  41e6cf:       mov    0x58(%rbx),%rdx
    0.00 :	  41e6d3:       mov    %rax,%r8
    0.00 :	  41e6d6:       mov    %rcx,0x18(%rax)
    0.00 :	  41e6da:       jmpq   41e4f6 <sysmalloc+0xf6>
    0.00 :	  41e6df:       nop
    0.00 :	  41e6e0:       lea    0x7(%r15,%rdi,1),%r12
    0.00 :	  41e6e5:       mov    %r15,%r10
    0.00 :	  41e6e8:       neg    %r10
    0.00 :	  41e6eb:       and    %r10,%r12
    0.00 :	  41e6ee:       cmp    %r12,%rdi
    0.00 :	  41e6f1:       jae    41e8ae <sysmalloc+0x4ae>
    0.00 :	  41e6f7:       xor    %r9d,%r9d
    0.00 :	  41e6fa:       xor    %edi,%edi
    0.00 :	  41e6fc:       mov    $0xffffffff,%r8d
    0.00 :	  41e702:       mov    $0x22,%ecx
    0.00 :	  41e707:       mov    $0x3,%edx
    0.00 :	  41e70c:       mov    %r12,%rsi
    0.00 :	  41e70f:       callq  4431b0 <__mmap>
    0.00 :	  41e714:       cmp    $0xffffffffffffffff,%rax
    0.00 :	  41e718:       je     41e8ae <sysmalloc+0x4ae>
    0.00 :	  41e71e:       lea    0x10(%rax),%rdx
    0.00 :	  41e722:       test   $0xf,%dl
    0.00 :	  41e725:       jne    41ecb1 <sysmalloc+0x8b1>
    0.00 :	  41e72b:       mov    %r12,%rcx
    0.00 :	  41e72e:       or     $0x2,%rcx
    0.00 :	  41e732:       mov    %rcx,0x8(%rax)
    0.00 :	  41e736:       mov    $0x1,%ecx
    0.00 :	  41e73b:       lock xadd %ecx,0x2b1085(%rip)        # 6cf7c8 <mp_+0x28>
    0.00 :	  41e743:       add    $0x1,%ecx
    0.00 :	  41e746:       mov    0x2b1084(%rip),%eax        # 6cf7d0 <mp_+0x30>
    0.00 :	  41e74c:       cmp    %eax,%ecx
    0.00 :	  41e74e:       jle    41e75a <sysmalloc+0x35a>
    0.00 :	  41e750:       lock cmpxchg %ecx,0x2b1078(%rip)        # 6cf7d0 <mp_+0x30>
    0.00 :	  41e758:       jne    41e746 <sysmalloc+0x346>
    0.00 :	  41e75a:       mov    %r12,%r10
    0.00 :	  41e75d:       lock xadd %r10,0x2b1072(%rip)        # 6cf7d8 <mp_+0x38>
    0.00 :	  41e766:       add    %r12,%r10
    0.00 :	  41e769:       mov    0x2b1070(%rip),%rax        # 6cf7e0 <mp_+0x40>
    0.00 :	  41e770:       cmp    %rax,%r10
    0.00 :	  41e773:       jbe    41e57a <sysmalloc+0x17a>
    0.00 :	  41e779:       lock cmpxchg %r10,0x2b105e(%rip)        # 6cf7e0 <mp_+0x40>
    0.00 :	  41e782:       je     41e57a <sysmalloc+0x17a>
    0.00 :	  41e788:       jmp    41e769 <sysmalloc+0x369>
    0.00 :	  41e78a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  41e790:       testb  $0x2,0x2b106d(%rip)        # 6cf804 <main_arena+0x4>
    0.00 :	  41e797:       mov    0x2b100a(%rip),%rax        # 6cf7a8 <mp_+0x8>
    0.00 :	  41e79e:       mov    %r8,%r14
    0.00 :	  41e7a1:       lea    0x20(%rbp,%rax,1),%rdx
    0.00 :	  41e7a6:       je     41e8e0 <sysmalloc+0x4e0>
    0.00 :	  41e7ac:       lea    -0x1(%r15),%rax
    0.00 :	  41e7b0:       neg    %r15
    0.00 :	  41e7b3:       mov    %r15,0x8(%rsp)
    0.00 :	  41e7b8:       add    %rax,%rdx
    0.00 :	  41e7bb:       mov    %rax,(%rsp)
    0.00 :	  41e7bf:       and    %r15,%rdx
    0.00 :	  41e7c2:       test   %rdx,%rdx
    0.00 :	  41e7c5:       mov    %rdx,%r15
    0.00 :	  41e7c8:       jle    41e917 <sysmalloc+0x517>
    0.00 :	  41e7ce:       mov    %rdx,%rdi
    0.00 :	  41e7d1:       mov    %rdx,0x10(%rsp)
    0.00 :	  41e7d6:       mov    %r11b,0x20(%rsp)
    0.00 :	  41e7db:       mov    %r10,0x18(%rsp)
    0.00 :	  41e7e0:       callq  *0x2b18aa(%rip)        # 6d0090 <__morecore>
    0.00 :	  41e7e6:       mov    0x10(%rsp),%rdx
    0.00 :	  41e7eb:       mov    %rax,%r8
    0.00 :	  41e7ee:       nop
    0.00 :	  41e7ef:       test   %rax,%rax
    0.00 :	  41e7f2:       mov    0x18(%rsp),%r10
    0.00 :	  41e7f7:       movzbl 0x20(%rsp),%r11d
    0.00 :	  41e7fd:       je     41ec75 <sysmalloc+0x875>
    0.00 :	  41e803:       mov    0x2b2dd6(%rip),%rax        # 6d15e0 <__after_morecore_hook>
    0.00 :	  41e80a:       test   %rax,%rax
    0.00 :	  41e80d:       jne    41eb50 <sysmalloc+0x750>
    0.00 :	  41e813:       mov    $0x1,%edx
    0.00 :	  41e818:       xor    %eax,%eax
    0.00 :	  41e81a:       cmpq   $0x0,0x2b0fce(%rip)        # 6cf7f0 <mp_+0x50>
    0.00 :	  41e822:       je     41eb30 <sysmalloc+0x730>
    0.00 :	  41e828:       mov    %r15,%rsi
    0.00 :	  41e82b:       add    0x2b184e(%rip),%rsi        # 6d0080 <main_arena+0x880>
    0.00 :	  41e832:       cmp    %r8,%r10
    0.00 :	  41e835:       mov    %rsi,0x2b1844(%rip)        # 6d0080 <main_arena+0x880>
    0.00 :	  41e83c:       jne    41e9a0 <sysmalloc+0x5a0>
    0.00 :	  41e842:       test   %dl,%dl
    0.00 :	  41e844:       je     41e9a0 <sysmalloc+0x5a0>
    0.00 :	  41e84a:       add    %r15,%r12
    0.00 :	  41e84d:       mov    0x2b1004(%rip),%rdx        # 6cf858 <main_arena+0x58>
    0.00 :	  41e854:       or     $0x1,%r12
    0.00 :	  41e858:       mov    %r12,0x8(%r13)
    0.00 :	  41e85c:       jmpq   41e527 <sysmalloc+0x127>
    0.00 :	  41e861:       nopl   0x0(%rax)
    0.00 :	  41e868:       movq   $0x11,0x8(%r13,%r12,1)
    0.00 :	  41e871:       or     $0x5,%r12
    0.00 :	  41e875:       movq   $0x10,(%rcx)
    0.00 :	  41e87c:       mov    $0x1,%edx
    0.00 :	  41e881:       mov    %r13,%rsi
    0.00 :	  41e884:       mov    %r12,0x8(%r13)
    0.00 :	  41e888:       mov    %rbx,%rdi
    0.00 :	  41e88b:       callq  41d360 <_int_free>
    0.00 :	  41e890:       mov    0x880(%rbx),%rsi
    0.00 :	  41e897:       mov    0x58(%rbx),%rdx
    0.00 :	  41e89b:       jmpq   41e527 <sysmalloc+0x127>
    0.00 :	  41e8a0:       mov    $0xffffffffffffffd0,%rax
    0.00 :	  41e8a7:       movl   $0xc,%fs:(%rax)
    0.00 :	  41e8ae:       xor    %edx,%edx
    0.00 :	  41e8b0:       jmpq   41e57a <sysmalloc+0x17a>
    0.00 :	  41e8b5:       nopl   (%rax)
    0.00 :	  41e8b8:       cmpb   $0x0,0x8(%rsp)
    0.00 :	  41e8bd:       jne    41ead0 <sysmalloc+0x6d0>
    0.00 :	  41e8c3:       mov    0x18(%rsp),%rax
    0.00 :	  41e8c8:       cmp    %rax,%rbp
    0.00 :	  41e8cb:       mov    %rax,%r12
    0.00 :	  41e8ce:       jb     41ecca <sysmalloc+0x8ca>
    0.00 :	  41e8d4:       movb   $0x1,0x8(%rsp)
    0.00 :	  41e8d9:       jmpq   41e451 <sysmalloc+0x51>
    0.00 :	  41e8de:       xchg   %ax,%ax
   50.00 :	  41e8e0:       lea    -0x1(%r15),%rax
    0.00 :	  41e8e4:       sub    %r12,%rdx
    0.00 :	  41e8e7:       neg    %r15
    0.00 :	  41e8ea:       mov    %r15,0x8(%rsp)
    0.00 :	  41e8ef:       add    %rax,%rdx
    0.00 :	  41e8f2:       mov    %rax,(%rsp)
    0.00 :	  41e8f6:       and    %r15,%rdx
    0.00 :	  41e8f9:       test   %rdx,%rdx
    0.00 :	  41e8fc:       mov    %rdx,%r15
    0.00 :	  41e8ff:       jg     41e7ce <sysmalloc+0x3ce>
    0.00 :	  41e905:       mov    (%rsp),%rax
    0.00 :	  41e909:       add    %r12,%rax
    0.00 :	  41e90c:       add    %rdx,%rax
    0.00 :	  41e90f:       and    0x8(%rsp),%rax
    0.00 :	  41e914:       mov    %rax,%r15
    0.00 :	  41e917:       cmp    $0xfffff,%r15
    0.00 :	  41e91e:       mov    %r15,0x10(%rsp)
    0.00 :	  41e923:       ja     41e934 <sysmalloc+0x534>
    0.00 :	  41e925:       movq   $0x100000,0x10(%rsp)
    0.00 :	  41e92e:       mov    $0x100000,%r15d
    0.00 :	  41e934:       cmp    0x10(%rsp),%rbp
    0.00 :	  41e939:       jae    41eabd <sysmalloc+0x6bd>
    0.00 :	  41e93f:       mov    0x10(%rsp),%rsi
    0.00 :	  41e944:       xor    %r9d,%r9d
    0.00 :	  41e947:       mov    $0xffffffff,%r8d
    0.00 :	  41e94d:       xor    %edi,%edi
    0.00 :	  41e94f:       mov    $0x22,%ecx
    0.00 :	  41e954:       mov    $0x3,%edx
    0.00 :	  41e959:       mov    %r11b,0x20(%rsp)
    0.00 :	  41e95e:       mov    %r10,0x18(%rsp)
    0.00 :	  41e963:       callq  4431b0 <__mmap>
    0.00 :	  41e968:       cmp    $0xffffffffffffffff,%rax
    0.00 :	  41e96c:       mov    %rax,%r8
    0.00 :	  41e96f:       je     41eabd <sysmalloc+0x6bd>
    0.00 :	  41e975:       orl    $0x2,0x2b0e88(%rip)        # 6cf804 <main_arena+0x4>
    0.00 :	  41e97c:       test   %rax,%rax
    0.00 :	  41e97f:       mov    0x18(%rsp),%r10
    0.00 :	  41e984:       movzbl 0x20(%rsp),%r11d
    0.00 :	  41e98a:       je     41eabd <sysmalloc+0x6bd>
    0.00 :	  41e990:       mov    0x10(%rsp),%rax
    0.00 :	  41e995:       add    %r8,%rax
    0.00 :	  41e998:       sete   %dl
    0.00 :	  41e99b:       jmpq   41e81a <sysmalloc+0x41a>
    0.00 :	  41e9a0:       mov    0x2b0e5e(%rip),%edx        # 6cf804 <main_arena+0x4>
    0.00 :	  41e9a6:       test   $0x2,%dl
    0.00 :	  41e9a9:       jne    41eae8 <sysmalloc+0x6e8>
    0.00 :	  41e9af:       cmp    %r8,%r10
    0.00 :	  41e9b2:       jbe    41e9bd <sysmalloc+0x5bd>
    0.00 :	  41e9b4:       test   %r11b,%r11b
    0.00 :	  41e9b7:       jne    41eb76 <sysmalloc+0x776>
    0.00 :	  41e9bd:       test   %r12,%r12
    0.00 :	  41e9c0:       je     41e9d2 <sysmalloc+0x5d2>
    0.00 :	  41e9c2:       mov    %r8,%rax
    0.00 :	  41e9c5:       sub    %r10,%rax
    0.00 :	  41e9c8:       add    %rax,%rsi
    0.00 :	  41e9cb:       mov    %rsi,0x2b16ae(%rip)        # 6d0080 <main_arena+0x880>
    0.00 :	  41e9d2:       mov    %r8,%rdx
    0.00 :	  41e9d5:       and    $0xf,%edx
    0.00 :	  41e9d8:       je     41eb40 <sysmalloc+0x740>
    0.00 :	  41e9de:       mov    $0x10,%eax
    0.00 :	  41e9e3:       sub    %rdx,%rax
    0.00 :	  41e9e6:       lea    (%r8,%rax,1),%rdi
    0.00 :	  41e9ea:       mov    %rdi,0x10(%rsp)
    0.00 :	  41e9ef:       add    %r12,%rax
    0.00 :	  41e9f2:       mov    (%rsp),%rcx
    0.00 :	  41e9f6:       mov    0x8(%rsp),%r10
    0.00 :	  41e9fb:       lea    (%r15,%rax,1),%rdx
    0.00 :	  41e9ff:       add    %r8,%rdx
    0.00 :	  41ea02:       add    %rdx,%rcx
    0.00 :	  41ea05:       sub    %rdx,%rax
    0.00 :	  41ea08:       and    %rcx,%r10
    0.00 :	  41ea0b:       lea    (%r10,%rax,1),%rcx
    0.00 :	  41ea0f:       test   %rcx,%rcx
    0.00 :	  41ea12:       mov    %rcx,%r15
    0.00 :	  41ea15:       js     41ec5c <sysmalloc+0x85c>
    0.00 :	  41ea1b:       mov    %rcx,%rdi
    0.00 :	  41ea1e:       mov    %rcx,(%rsp)
    0.00 :	  41ea22:       callq  *0x2b1668(%rip)        # 6d0090 <__morecore>
    0.00 :	  41ea28:       test   %rax,%rax
    0.00 :	  41ea2b:       mov    (%rsp),%rcx
    0.00 :	  41ea2f:       je     41ec36 <sysmalloc+0x836>
    0.00 :	  41ea35:       mov    0x2b2ba4(%rip),%rdx        # 6d15e0 <__after_morecore_hook>
    0.00 :	  41ea3c:       mov    0x2b163d(%rip),%rsi        # 6d0080 <main_arena+0x880>
    0.00 :	  41ea43:       test   %rdx,%rdx
    0.00 :	  41ea46:       mov    0x10(%rsp),%r8
    0.00 :	  41ea4b:       jne    41ec0c <sysmalloc+0x80c>
    0.00 :	  41ea51:       sub    %r8,%rax
    0.00 :	  41ea54:       add    %rcx,%rsi
    0.00 :	  41ea57:       mov    %r8,0x2b0dfa(%rip)        # 6cf858 <main_arena+0x58>
    0.00 :	  41ea5e:       add    %rax,%r15
    0.00 :	  41ea61:       mov    %r8,%rdx
    0.00 :	  41ea64:       or     $0x1,%r15
    0.00 :	  41ea68:       test   %r12,%r12
    0.00 :	  41ea6b:       mov    %r15,0x8(%r8)
    0.00 :	  41ea6f:       mov    %rsi,0x2b160a(%rip)        # 6d0080 <main_arena+0x880>
    0.00 :	  41ea76:       je     41e527 <sysmalloc+0x127>
    0.00 :	  41ea7c:       sub    $0x20,%r12
    0.00 :	  41ea80:       and    $0xfffffffffffffff0,%r12
    0.00 :	  41ea84:       mov    %r12,%rax
    0.00 :	  41ea87:       or     $0x1,%rax
    0.00 :	  41ea8b:       cmp    $0x1f,%r12
    0.00 :	  41ea8f:       mov    %rax,0x8(%r13)
    0.00 :	  41ea93:       movq   $0x11,0x8(%r13,%r12,1)
    0.00 :	  41ea9c:       movq   $0x11,0x18(%r13,%r12,1)
    0.00 :	  41eaa5:       jbe    41e527 <sysmalloc+0x127>
    0.00 :	  41eaab:       mov    $0x1,%edx
    0.00 :	  41eab0:       mov    %r13,%rsi
    0.00 :	  41eab3:       mov    $0x6cf800,%edi
    0.00 :	  41eab8:       callq  41d360 <_int_free>
    0.00 :	  41eabd:       mov    0x2b15bc(%rip),%rsi        # 6d0080 <main_arena+0x880>
    0.00 :	  41eac4:       mov    0x2b0d8d(%rip),%rdx        # 6cf858 <main_arena+0x58>
    0.00 :	  41eacb:       jmpq   41e527 <sysmalloc+0x127>
    0.00 :	  41ead0:       mov    %r8,%r14
    0.00 :	  41ead3:       mov    0x880(%rbx),%rsi
    0.00 :	  41eada:       mov    0x58(%rbx),%rdx
    0.00 :	  41eade:       jmpq   41e527 <sysmalloc+0x127>
    0.00 :	  41eae3:       nopl   0x0(%rax,%rax,1)
    0.00 :	  41eae8:       mov    %r8,%rcx
    0.00 :	  41eaeb:       and    $0xf,%ecx
    0.00 :	  41eaee:       jne    41ecf4 <sysmalloc+0x8f4>
    0.00 :	  41eaf4:       xor    %r15d,%r15d
    0.00 :	  41eaf7:       test   %rax,%rax
    0.00 :	  41eafa:       jne    41ea51 <sysmalloc+0x651>
    0.00 :	  41eb00:       mov    %r8,(%rsp)
    0.00 :	  41eb04:       xor    %edi,%edi
    0.00 :	  41eb06:       callq  *0x2b1584(%rip)        # 6d0090 <__morecore>
    0.00 :	  41eb0c:       mov    (%rsp),%r8
    0.00 :	  41eb10:       mov    %r8,0x10(%rsp)
    0.00 :	  41eb15:       test   %rax,%rax
    0.00 :	  41eb18:       mov    0x2b1561(%rip),%rsi        # 6d0080 <main_arena+0x880>
    0.00 :	  41eb1f:       je     41eac4 <sysmalloc+0x6c4>
    0.00 :	  41eb21:       mov    0x10(%rsp),%r8
    0.00 :	  41eb26:       xor    %ecx,%ecx
    0.00 :	  41eb28:       xor    %r15d,%r15d
    0.00 :	  41eb2b:       jmpq   41ea51 <sysmalloc+0x651>
    0.00 :	  41eb30:       mov    %r8,0x2b0cb9(%rip)        # 6cf7f0 <mp_+0x50>
    0.00 :	  41eb37:       jmpq   41e828 <sysmalloc+0x428>
    0.00 :	  41eb3c:       nopl   0x0(%rax)
    0.00 :	  41eb40:       mov    %r8,0x10(%rsp)
    0.00 :	  41eb45:       xor    %eax,%eax
    0.00 :	  41eb47:       jmpq   41e9ef <sysmalloc+0x5ef>
    0.00 :	  41eb4c:       nopl   0x0(%rax)
    0.00 :	  41eb50:       mov    %r11b,0x20(%rsp)
    0.00 :	  41eb55:       mov    %r8,0x18(%rsp)
    0.00 :	  41eb5a:       mov    %r10,0x10(%rsp)
    0.00 :	  41eb5f:       callq  *%rax
    0.00 :	  41eb61:       mov    0x10(%rsp),%r10
    0.00 :	  41eb66:       mov    0x18(%rsp),%r8
    0.00 :	  41eb6b:       movzbl 0x20(%rsp),%r11d
    0.00 :	  41eb71:       jmpq   41e813 <sysmalloc+0x413>
    0.00 :	  41eb76:       or     $0x4,%edx
    0.00 :	  41eb79:       lea    0x30(%rsp),%r13
    0.00 :	  41eb7e:       lea    0x40(%rsp),%rsi
    0.00 :	  41eb83:       mov    %edx,0x2b0c7b(%rip)        # 6cf804 <main_arena+0x4>
    0.00 :	  41eb89:       xor    %ecx,%ecx
    0.00 :	  41eb8b:       mov    $0x10,%edx
    0.00 :	  41eb90:       mov    %r8,%rdi
    0.00 :	  41eb93:       movb   $0x0,0x40(%rsp)
    0.00 :	  41eb98:       callq  455480 <_itoa_word>
    0.00 :	  41eb9d:       cmp    %r13,%rax
    0.00 :	  41eba0:       mov    %rax,%r12
    0.00 :	  41eba3:       jbe    41ebca <sysmalloc+0x7ca>
    0.00 :	  41eba5:       mov    %rax,%rdx
    0.00 :	  41eba8:       mov    %rax,%rdi
    0.00 :	  41ebab:       mov    $0x30,%esi
    0.00 :	  41ebb0:       sub    %r13,%rdx
    0.00 :	  41ebb3:       lea    -0x1(%rax),%r15
    0.00 :	  41ebb7:       sub    %rdx,%rdi
    0.00 :	  41ebba:       callq  400350 <__rela_iplt_end+0x88>
    0.00 :	  41ebbf:       lea    0x2f(%rsp),%rax
    0.00 :	  41ebc4:       sub    %r15,%rax
    0.00 :	  41ebc7:       add    %rax,%r12
    0.00 :	  41ebca:       mov    0x2b36ef(%rip),%rax        # 6d22c0 <__libc_argv>
    0.00 :	  41ebd1:       mov    $0x4a56d8,%edx
    0.00 :	  41ebd6:       mov    $0x4a5a30,%esi
    0.00 :	  41ebdb:       mov    %r12,%r8
    0.00 :	  41ebde:       mov    $0x4a5dd0,%ecx
    0.00 :	  41ebe3:       mov    $0x2,%edi
    0.00 :	  41ebe8:       mov    (%rax),%rax
    0.00 :	  41ebeb:       test   %rax,%rax
    0.00 :	  41ebee:       cmovne %rax,%rdx
    0.00 :	  41ebf2:       xor    %eax,%eax
    0.00 :	  41ebf4:       callq  415660 <__libc_message>
    0.00 :	  41ebf9:       mov    0x2b1480(%rip),%rsi        # 6d0080 <main_arena+0x880>
    0.00 :	  41ec00:       mov    0x2b0c51(%rip),%rdx        # 6cf858 <main_arena+0x58>
    0.00 :	  41ec07:       jmpq   41e527 <sysmalloc+0x127>
    0.00 :	  41ec0c:       mov    %rax,0x10(%rsp)
    0.00 :	  41ec11:       mov    %r8,0x8(%rsp)
    0.00 :	  41ec16:       mov    %rcx,(%rsp)
    0.00 :	  41ec1a:       callq  *%rdx
    0.00 :	  41ec1c:       mov    0x2b145d(%rip),%rsi        # 6d0080 <main_arena+0x880>
    0.00 :	  41ec23:       mov    (%rsp),%rcx
    0.00 :	  41ec27:       mov    0x8(%rsp),%r8
    0.00 :	  41ec2c:       mov    0x10(%rsp),%rax
    0.00 :	  41ec31:       jmpq   41ea51 <sysmalloc+0x651>
    0.00 :	  41ec36:       xor    %edi,%edi
    0.00 :	  41ec38:       callq  *0x2b1452(%rip)        # 6d0090 <__morecore>
    0.00 :	  41ec3e:       jmpq   41eb15 <sysmalloc+0x715>
    0.00 :	  41ec43:       mov    $0x4a6530,%ecx
    0.00 :	  41ec48:       mov    $0x95b,%edx
    0.00 :	  41ec4d:       mov    $0x4a5668,%esi
    0.00 :	  41ec52:       mov    $0x4a5d90,%edi
    0.00 :	  41ec57:       callq  41aec0 <__malloc_assert>
    0.00 :	  41ec5c:       mov    $0x4a6530,%ecx
    0.00 :	  41ec61:       mov    $0xa37,%edx
    0.00 :	  41ec66:       mov    $0x4a5668,%esi
    0.00 :	  41ec6b:       mov    $0x4a57b5,%edi
    0.00 :	  41ec70:       callq  41aec0 <__malloc_assert>
    0.00 :	  41ec75:       testb  $0x2,0x2b0b88(%rip)        # 6cf804 <main_arena+0x4>
    0.00 :	  41ec7c:       je     41e905 <sysmalloc+0x505>
    0.00 :	  41ec82:       jmpq   41e917 <sysmalloc+0x517>
    0.00 :	  41ec87:       xor    %r9d,%r9d
    0.00 :	  41ec8a:       or     $0xffffffff,%r8d
    0.00 :	  41ec8e:       xor    %edi,%edi
    0.00 :	  41ec90:       mov    $0x22,%ecx
    0.00 :	  41ec95:       mov    $0x3,%edx
    0.00 :	  41ec9a:       mov    %r12,%rsi
    0.00 :	  41ec9d:       callq  4431b0 <__mmap>
    0.00 :	  41eca2:       cmp    $0xffffffffffffffff,%rax
    0.00 :	  41eca6:       jne    41e71e <sysmalloc+0x31e>
    0.00 :	  41ecac:       jmpq   41e5e9 <sysmalloc+0x1e9>
    0.00 :	  41ecb1:       mov    $0x4a6530,%ecx
    0.00 :	  41ecb6:       mov    $0x922,%edx
    0.00 :	  41ecbb:       mov    $0x4a5668,%esi
    0.00 :	  41ecc0:       mov    $0x4a5ca8,%edi
    0.00 :	  41ecc5:       callq  41aec0 <__malloc_assert>
    0.00 :	  41ecca:       xor    %r9d,%r9d
    0.00 :	  41eccd:       or     $0xffffffff,%r8d
    0.00 :	  41ecd1:       xor    %edi,%edi
    0.00 :	  41ecd3:       mov    $0x22,%ecx
    0.00 :	  41ecd8:       mov    $0x3,%edx
    0.00 :	  41ecdd:       mov    %rax,%rsi
    0.00 :	  41ece0:       callq  4431b0 <__mmap>
    0.00 :	  41ece5:       cmp    $0xffffffffffffffff,%rax
    0.00 :	  41ece9:       jne    41e71e <sysmalloc+0x31e>
    0.00 :	  41ecef:       jmpq   41e8d4 <sysmalloc+0x4d4>
    0.00 :	  41ecf4:       mov    $0x4a6530,%ecx
    0.00 :	  41ecf9:       mov    $0xa57,%edx
    0.00 :	  41ecfe:       mov    $0x4a5668,%esi
    0.00 :	  41ed03:       mov    $0x4a5df8,%edi
    0.00 :	  41ed08:       callq  41aec0 <__malloc_assert>
 Percent |	Source code & Disassembly of kcore for cycles:u
---------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section load0:
         :
         :	ffffffff81835ce0 <load0>:
  100.00 :	  ffffffff81835ce0:       clac   
    0.00 :	  ffffffff81835ce3:       pushq  $0xffffffffffffff10
    0.00 :	  ffffffff81835ce8:       cld    
    0.00 :	  ffffffff81835ce9:       add    $0xffffffffffffff88,%rsp
    0.00 :	  ffffffff81835ced:       mov    %r11,0x30(%rsp)
    0.00 :	  ffffffff81835cf2:       mov    %r10,0x38(%rsp)
    0.00 :	  ffffffff81835cf7:       mov    %r9,0x40(%rsp)
    0.00 :	  ffffffff81835cfc:       mov    %r8,0x48(%rsp)
    0.00 :	  ffffffff81835d01:       mov    %rax,0x50(%rsp)
    0.00 :	  ffffffff81835d06:       mov    %rcx,0x58(%rsp)
    0.00 :	  ffffffff81835d0b:       mov    %rdx,0x60(%rsp)
    0.00 :	  ffffffff81835d10:       mov    %rsi,0x68(%rsp)
    0.00 :	  ffffffff81835d15:       mov    %rdi,0x70(%rsp)
    0.00 :	  ffffffff81835d1a:       mov    %r15,(%rsp)
    0.00 :	  ffffffff81835d1e:       mov    %r14,0x8(%rsp)
    0.00 :	  ffffffff81835d23:       mov    %r13,0x10(%rsp)
    0.00 :	  ffffffff81835d28:       mov    %r12,0x18(%rsp)
    0.00 :	  ffffffff81835d2d:       mov    %rbp,0x20(%rsp)
    0.00 :	  ffffffff81835d32:       mov    %rbx,0x28(%rsp)
    0.00 :	  ffffffff81835d37:       testb  $0x3,0x88(%rsp)
    0.00 :	  ffffffff81835d3f:       je     0xffffffff81835d47
    0.00 :	  ffffffff81835d41:       swapgs 
    0.00 :	  ffffffff81835d44:       nopl   (%rax)
    0.00 :	  ffffffff81835d47:       mov    %rsp,%rdi
    0.00 :	  ffffffff81835d4a:       incl   %gs:0xd354
    0.00 :	  ffffffff81835d52:       cmove  %gs:0xd358,%rsp
    0.00 :	  ffffffff81835d5c:       push   %rdi
    0.00 :	  ffffffff81835d5d:       callq  0xffffffff81837a60
    0.00 :	  ffffffff81835d62:       jmpq   0xffffffff81835ac2
 Percent |	Source code & Disassembly of kcore for cycles:u
---------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section load0:
         :
         :	ffffffff81836940 <load0>:
  100.00 :	  ffffffff81836940:       clac   
    0.00 :	  ffffffff81836943:       pushq  $0xffffffffffffff09
    0.00 :	  ffffffff81836948:       cld    
    0.00 :	  ffffffff81836949:       add    $0xffffffffffffff88,%rsp
    0.00 :	  ffffffff8183694d:       mov    %r11,0x30(%rsp)
    0.00 :	  ffffffff81836952:       mov    %r10,0x38(%rsp)
    0.00 :	  ffffffff81836957:       mov    %r9,0x40(%rsp)
    0.00 :	  ffffffff8183695c:       mov    %r8,0x48(%rsp)
    0.00 :	  ffffffff81836961:       mov    %rax,0x50(%rsp)
    0.00 :	  ffffffff81836966:       mov    %rcx,0x58(%rsp)
    0.00 :	  ffffffff8183696b:       mov    %rdx,0x60(%rsp)
    0.00 :	  ffffffff81836970:       mov    %rsi,0x68(%rsp)
    0.00 :	  ffffffff81836975:       mov    %rdi,0x70(%rsp)
    0.00 :	  ffffffff8183697a:       mov    %r15,(%rsp)
    0.00 :	  ffffffff8183697e:       mov    %r14,0x8(%rsp)
    0.00 :	  ffffffff81836983:       mov    %r13,0x10(%rsp)
    0.00 :	  ffffffff81836988:       mov    %r12,0x18(%rsp)
    0.00 :	  ffffffff8183698d:       mov    %rbp,0x20(%rsp)
    0.00 :	  ffffffff81836992:       mov    %rbx,0x28(%rsp)
    0.00 :	  ffffffff81836997:       testb  $0x3,0x88(%rsp)
    0.00 :	  ffffffff8183699f:       je     0xffffffff818369a7
    0.00 :	  ffffffff818369a1:       swapgs 
    0.00 :	  ffffffff818369a4:       nopl   (%rax)
    0.00 :	  ffffffff818369a7:       mov    %rsp,%rdi
    0.00 :	  ffffffff818369aa:       incl   %gs:0xd354
    0.00 :	  ffffffff818369b2:       cmove  %gs:0xd358,%rsp
    0.00 :	  ffffffff818369bc:       push   %rdi
    0.00 :	  ffffffff818369bd:       callq  0xffffffff81033b50
    0.00 :	  ffffffff818369c2:       jmpq   0xffffffff81835ac2
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000452980 <__ctype_init>:
         :	__ctype_init():
    0.00 :	  452980:       mov    $0xffffffffffffffb0,%rax
    0.00 :	  452987:       mov    $0xfffffffffffffff0,%rcx
    0.00 :	  45298e:       mov    %fs:(%rax),%rax
    0.00 :	  452992:       mov    (%rax),%rdx
    0.00 :	  452995:       mov    0x40(%rdx),%rdx
  100.00 :	  452999:       add    $0x100,%rdx
    0.00 :	  4529a0:       mov    %rdx,%fs:(%rcx)
    0.00 :	  4529a4:       mov    (%rax),%rdx
    0.00 :	  4529a7:       mov    $0xffffffffffffffe8,%rcx
    0.00 :	  4529ae:       mov    0x48(%rdx),%rdx
    0.00 :	  4529b2:       add    $0x200,%rdx
    0.00 :	  4529b9:       mov    %rdx,%fs:(%rcx)
    0.00 :	  4529bd:       mov    (%rax),%rax
    0.00 :	  4529c0:       mov    $0xffffffffffffffe0,%rdx
    0.00 :	  4529c7:       mov    0x58(%rax),%rax
    0.00 :	  4529cb:       add    $0x200,%rax
    0.00 :	  4529d1:       mov    %rax,%fs:(%rdx)
    0.00 :	  4529d5:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004245c0 <__default_morecore>:
         :	__default_morecore():
  100.00 :	  4245c0:       sub    $0x8,%rsp
    0.00 :	  4245c4:       callq  4430b0 <__sbrk>
    0.00 :	  4245c9:       mov    $0x0,%edx
    0.00 :	  4245ce:       cmp    $0xffffffffffffffff,%rax
    0.00 :	  4245d2:       cmove  %rdx,%rax
    0.00 :	  4245d6:       add    $0x8,%rsp
    0.00 :	  4245da:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000405400 <__libc_csu_init>:
         :	__libc_csu_init():
    0.00 :	  405400:       push   %r14
    0.00 :	  405402:       mov    $0x6cced8,%r14d
    0.00 :	  405408:       push   %r13
    0.00 :	  40540a:       sub    $0x6cced8,%r14
    0.00 :	  405411:       push   %r12
    0.00 :	  405413:       push   %rbp
    0.00 :	  405414:       sar    $0x3,%r14
    0.00 :	  405418:       push   %rbx
    0.00 :	  405419:       xor    %ebx,%ebx
    0.00 :	  40541b:       test   %r14,%r14
    0.00 :	  40541e:       mov    %edi,%ebp
    0.00 :	  405420:       mov    %rsi,%r12
    0.00 :	  405423:       mov    %rdx,%r13
    0.00 :	  405426:       je     405448 <__libc_csu_init+0x48>
    0.00 :	  405428:       nopl   0x0(%rax,%rax,1)
    0.00 :	  405430:       mov    %r13,%rdx
    0.00 :	  405433:       mov    %r12,%rsi
    0.00 :	  405436:       mov    %ebp,%edi
    0.00 :	  405438:       callq  *0x6cced8(,%rbx,8)
    0.00 :	  40543f:       add    $0x1,%rbx
    0.00 :	  405443:       cmp    %r14,%rbx
    0.00 :	  405446:       jne    405430 <__libc_csu_init+0x30>
    0.00 :	  405448:       mov    $0x6ccee8,%r14d
  100.00 :	  40544e:       xor    %ebx,%ebx
    0.00 :	  405450:       sub    $0x6cced8,%r14
    0.00 :	  405457:       sar    $0x3,%r14
    0.00 :	  40545b:       callq  4002c8 <__rela_iplt_end>
    0.00 :	  405460:       test   %r14,%r14
    0.00 :	  405463:       je     405480 <__libc_csu_init+0x80>
    0.00 :	  405465:       nopl   (%rax)
    0.00 :	  405468:       mov    %r13,%rdx
    0.00 :	  40546b:       mov    %r12,%rsi
    0.00 :	  40546e:       mov    %ebp,%edi
    0.00 :	  405470:       callq  *0x6cced8(,%rbx,8)
    0.00 :	  405477:       add    $0x1,%rbx
    0.00 :	  40547b:       cmp    %r14,%rbx
    0.00 :	  40547e:       jne    405468 <__libc_csu_init+0x68>
    0.00 :	  405480:       pop    %rbx
    0.00 :	  405481:       pop    %rbp
    0.00 :	  405482:       pop    %r12
    0.00 :	  405484:       pop    %r13
    0.00 :	  405486:       pop    %r14
    0.00 :	  405488:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004053f0 <__pthread_initialize_minimal>:
         :	__pthread_initialize_minimal():
  100.00 :	  4053f0:       mov    $0x40,%esi
    0.00 :	  4053f5:       mov    $0x900,%edi
    0.00 :	  4053fa:       jmpq   405160 <__libc_setup_tls>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004a1350 <__register_frame_info.part.4>:
         :	__register_frame_info.part.4():
  100.00 :	  4a1350:       cmpq   $0x0,0x22bc90(%rip)        # 6ccfe8 <__stack_prot+0x8>
    0.00 :	  4a1358:       mov    $0x7f8,%eax
    0.00 :	  4a135d:       movq   $0x0,0x20(%rsi)
    0.00 :	  4a1365:       movq   $0xffffffffffffffff,(%rsi)
    0.00 :	  4a136c:       movq   $0x0,0x8(%rsi)
    0.00 :	  4a1374:       movq   $0x0,0x10(%rsi)
    0.00 :	  4a137c:       mov    %rdi,0x18(%rsi)
    0.00 :	  4a1380:       mov    %ax,0x20(%rsi)
    0.00 :	  4a1384:       je     4a13b8 <__register_frame_info.part.4+0x68>
    0.00 :	  4a1386:       push   %rbx
    0.00 :	  4a1387:       lea    0x230992(%rip),%rdi        # 6d1d20 <object_mutex>
    0.00 :	  4a138e:       mov    %rsi,%rbx
    0.00 :	  4a1391:       callq  0 <_nl_current_LC_CTYPE>
    0.00 :	  4a1396:       mov    0x2309b3(%rip),%rax        # 6d1d50 <unseen_objects>
    0.00 :	  4a139d:       mov    %rbx,0x2309ac(%rip)        # 6d1d50 <unseen_objects>
    0.00 :	  4a13a4:       lea    0x230975(%rip),%rdi        # 6d1d20 <object_mutex>
    0.00 :	  4a13ab:       mov    %rax,0x28(%rbx)
    0.00 :	  4a13af:       pop    %rbx
    0.00 :	  4a13b0:       jmpq   0 <_nl_current_LC_CTYPE>
    0.00 :	  4a13b5:       nopl   (%rax)
    0.00 :	  4a13b8:       mov    0x230991(%rip),%rax        # 6d1d50 <unseen_objects>
    0.00 :	  4a13bf:       mov    %rsi,0x23098a(%rip)        # 6d1d50 <unseen_objects>
    0.00 :	  4a13c6:       mov    %rax,0x28(%rsi)
    0.00 :	  4a13ca:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000452a00 <__sigsetjmp>:
         :	__sigsetjmp():
    0.00 :	  452a00:       mov    %rbx,(%rdi)
    0.00 :	  452a03:       mov    %rbp,%rax
    0.00 :	  452a06:       xor    %fs:0x30,%rax
  100.00 :	  452a0f:       rol    $0x11,%rax
    0.00 :	  452a13:       mov    %rax,0x8(%rdi)
    0.00 :	  452a17:       mov    %r12,0x10(%rdi)
    0.00 :	  452a1b:       mov    %r13,0x18(%rdi)
    0.00 :	  452a1f:       mov    %r14,0x20(%rdi)
    0.00 :	  452a23:       mov    %r15,0x28(%rdi)
    0.00 :	  452a27:       lea    0x8(%rsp),%rdx
    0.00 :	  452a2c:       xor    %fs:0x30,%rdx
    0.00 :	  452a35:       rol    $0x11,%rdx
    0.00 :	  452a39:       mov    %rdx,0x30(%rdi)
    0.00 :	  452a3d:       mov    (%rsp),%rax
    0.00 :	  452a41:       nop
    0.00 :	  452a42:       xor    %fs:0x30,%rax
    0.00 :	  452a4b:       rol    $0x11,%rax
    0.00 :	  452a4f:       mov    %rax,0x38(%rdi)
    0.00 :	  452a53:       jmpq   452a60 <__sigjmp_save>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000429f70 <__stpcpy>:
         :	stpcpy():
  100.00 :	  429f70:       lea    0x14939(%rip),%rax        # 43e8b0 <__stpcpy_sse2_unaligned>
    0.00 :	  429f77:       testl  $0x10,0x2a773f(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  429f81:       jne    429f9d <__stpcpy+0x2d>
    0.00 :	  429f83:       lea    0x16(%rip),%rax        # 429fa0 <__GI___stpcpy>
    0.00 :	  429f8a:       testl  $0x200,0x2a76fc(%rip)        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  429f94:       je     429f9d <__stpcpy+0x2d>
    0.00 :	  429f96:       lea    0x12ad3(%rip),%rax        # 43ca70 <__stpcpy_ssse3>
    0.00 :	  429f9d:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000446100 <_dl_debug_initialize>:
         :	_dl_debug_initialize():
    0.00 :	  446100:       test   %rsi,%rsi
    0.00 :	  446103:       mov    $0x6d21c0,%eax
    0.00 :	  446108:       je     446118 <_dl_debug_initialize+0x18>
    0.00 :	  44610a:       lea    (%rsi,%rsi,8),%rax
    0.00 :	  44610e:       shl    $0x4,%rax
    0.00 :	  446112:       add    $0x6d0228,%rax
    0.00 :	  446118:       cmpq   $0x0,0x8(%rax)
  100.00 :	  44611d:       je     446158 <_dl_debug_initialize+0x58>
    0.00 :	  44611f:       test   %rdi,%rdi
    0.00 :	  446122:       je     446150 <_dl_debug_initialize+0x50>
    0.00 :	  446124:       movl   $0x1,(%rax)
    0.00 :	  44612a:       lea    (%rsi,%rsi,8),%rdx
    0.00 :	  44612e:       mov    %rdi,0x20(%rax)
    0.00 :	  446132:       shl    $0x4,%rdx
    0.00 :	  446136:       mov    0x6d01c0(%rdx),%rdx
    0.00 :	  44613d:       movq   $0x4460f0,0x10(%rax)
    0.00 :	  446145:       mov    %rdx,0x8(%rax)
    0.00 :	  446149:       retq   
    0.00 :	  44614a:       nopw   0x0(%rax,%rax,1)
    0.00 :	  446150:       repz retq 
    0.00 :	  446152:       nopw   0x0(%rax,%rax,1)
    0.00 :	  446158:       test   %rdi,%rdi
    0.00 :	  44615b:       movl   $0x1,(%rax)
    0.00 :	  446161:       jne    44612a <_dl_debug_initialize+0x2a>
    0.00 :	  446163:       mov    0x28c076(%rip),%rdi        # 6d21e0 <_r_debug+0x20>
    0.00 :	  44616a:       jmp    44612a <_dl_debug_initialize+0x2a>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000447570 <_dl_discover_osversion>:
         :	_dl_discover_osversion():
  100.00 :	  447570:       push   %rbp
    0.00 :	  447571:       push   %rbx
    0.00 :	  447572:       sub    $0x1d8,%rsp
    0.00 :	  447579:       lea    0x40(%rsp),%rdi
    0.00 :	  44757e:       callq  46deb0 <__uname>
    0.00 :	  447583:       test   %eax,%eax
    0.00 :	  447585:       lea    0xc2(%rsp),%rdi
    0.00 :	  44758d:       jne    447620 <_dl_discover_osversion+0xb0>
    0.00 :	  447593:       xor    %r8d,%r8d
    0.00 :	  447596:       xor    %eax,%eax
    0.00 :	  447598:       movsbl (%rdi),%ecx
    0.00 :	  44759b:       lea    -0x30(%rcx),%edx
    0.00 :	  44759e:       cmp    $0x9,%dl
    0.00 :	  4475a1:       ja     4475ff <_dl_discover_osversion+0x8f>
    0.00 :	  4475a3:       movsbl 0x1(%rdi),%edx
    0.00 :	  4475a7:       lea    0x1(%rdi),%rsi
    0.00 :	  4475ab:       sub    $0x30,%ecx
    0.00 :	  4475ae:       lea    -0x30(%rdx),%edi
    0.00 :	  4475b1:       cmp    $0x9,%dil
    0.00 :	  4475b5:       ja     4475d7 <_dl_discover_osversion+0x67>
    0.00 :	  4475b7:       nopw   0x0(%rax,%rax,1)
    0.00 :	  4475c0:       lea    (%rcx,%rcx,4),%ecx
    0.00 :	  4475c3:       add    $0x1,%rsi
    0.00 :	  4475c7:       lea    -0x30(%rdx,%rcx,2),%ecx
    0.00 :	  4475cb:       movsbl (%rsi),%edx
    0.00 :	  4475ce:       lea    -0x30(%rdx),%edi
    0.00 :	  4475d1:       cmp    $0x9,%dil
    0.00 :	  4475d5:       jbe    4475c0 <_dl_discover_osversion+0x50>
    0.00 :	  4475d7:       shl    $0x8,%eax
    0.00 :	  4475da:       add    $0x1,%r8d
    0.00 :	  4475de:       lea    0x1(%rsi),%rdi
    0.00 :	  4475e2:       or     %ecx,%eax
    0.00 :	  4475e4:       cmp    $0x2e,%dl
    0.00 :	  4475e7:       jne    4475f9 <_dl_discover_osversion+0x89>
    0.00 :	  4475e9:       cmp    $0x3,%r8d
    0.00 :	  4475ed:       jne    447598 <_dl_discover_osversion+0x28>
    0.00 :	  4475ef:       add    $0x1d8,%rsp
    0.00 :	  4475f6:       pop    %rbx
    0.00 :	  4475f7:       pop    %rbp
    0.00 :	  4475f8:       retq   
    0.00 :	  4475f9:       cmp    $0x3,%r8d
    0.00 :	  4475fd:       je     4475ef <_dl_discover_osversion+0x7f>
    0.00 :	  4475ff:       mov    $0x3,%ecx
    0.00 :	  447604:       add    $0x1d8,%rsp
    0.00 :	  44760b:       sub    %r8d,%ecx
    0.00 :	  44760e:       shl    $0x3,%ecx
    0.00 :	  447611:       shl    %cl,%eax
    0.00 :	  447613:       pop    %rbx
    0.00 :	  447614:       pop    %rbp
    0.00 :	  447615:       retq   
    0.00 :	  447616:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  447620:       xor    %esi,%esi
    0.00 :	  447622:       xor    %eax,%eax
    0.00 :	  447624:       mov    $0x4a8735,%edi
    0.00 :	  447629:       callq  442720 <__libc_open>
    0.00 :	  44762e:       test   %eax,%eax
    0.00 :	  447630:       mov    %eax,%ebp
    0.00 :	  447632:       js     44766b <_dl_discover_osversion+0xfb>
    0.00 :	  447634:       mov    $0x40,%edx
    0.00 :	  447639:       mov    %rsp,%rsi
    0.00 :	  44763c:       mov    %eax,%edi
    0.00 :	  44763e:       callq  442780 <__libc_read>
    0.00 :	  447643:       mov    %ebp,%edi
    0.00 :	  447645:       mov    %rax,%rbx
    0.00 :	  447648:       callq  46dfe0 <__libc_close>
    0.00 :	  44764d:       test   %rbx,%rbx
    0.00 :	  447650:       jle    44766b <_dl_discover_osversion+0xfb>
    0.00 :	  447652:       cmp    $0x3f,%rbx
    0.00 :	  447656:       mov    $0x3f,%eax
    0.00 :	  44765b:       mov    %rsp,%rdi
    0.00 :	  44765e:       cmovg  %rax,%rbx
    0.00 :	  447662:       movb   $0x0,(%rsp,%rbx,1)
    0.00 :	  447666:       jmpq   447593 <_dl_discover_osversion+0x23>
    0.00 :	  44766b:       mov    $0xffffffff,%eax
    0.00 :	  447670:       jmpq   4475ef <_dl_discover_osversion+0x7f>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000473fe0 <_dl_setup_hash>:
         :	_dl_setup_hash():
  100.00 :	  473fe0:       mov    0x298(%rdi),%rax
    0.00 :	  473fe7:       test   %rax,%rax
    0.00 :	  473fea:       je     474040 <_dl_setup_hash+0x60>
    0.00 :	  473fec:       mov    0x8(%rax),%rcx
    0.00 :	  473ff0:       mov    (%rcx),%edx
    0.00 :	  473ff2:       mov    %edx,0x2ec(%rdi)
    0.00 :	  473ff8:       mov    0x8(%rcx),%eax
    0.00 :	  473ffb:       mov    0x4(%rcx),%esi
    0.00 :	  473ffe:       lea    -0x1(%rax),%r8d
    0.00 :	  474002:       test   %r8d,%eax
    0.00 :	  474005:       jne    47406d <_dl_setup_hash+0x8d>
    0.00 :	  474007:       mov    %r8d,0x2f0(%rdi)
    0.00 :	  47400e:       lea    0x10(%rcx),%r8
    0.00 :	  474012:       add    %eax,%eax
    0.00 :	  474014:       mov    0xc(%rcx),%ecx
    0.00 :	  474017:       sub    %rsi,%rdx
    0.00 :	  47401a:       lea    (%r8,%rax,4),%rax
    0.00 :	  47401e:       mov    %r8,0x2f8(%rdi)
    0.00 :	  474025:       mov    %rax,0x300(%rdi)
    0.00 :	  47402c:       lea    (%rax,%rdx,4),%rax
    0.00 :	  474030:       mov    %ecx,0x2f4(%rdi)
    0.00 :	  474036:       mov    %rax,0x308(%rdi)
    0.00 :	  47403d:       retq   
    0.00 :	  47403e:       xchg   %ax,%ax
    0.00 :	  474040:       mov    0x60(%rdi),%rax
    0.00 :	  474044:       test   %rax,%rax
    0.00 :	  474047:       je     47406b <_dl_setup_hash+0x8b>
    0.00 :	  474049:       mov    0x8(%rax),%rax
    0.00 :	  47404d:       mov    (%rax),%edx
    0.00 :	  47404f:       add    $0x8,%rax
    0.00 :	  474053:       mov    %rax,0x308(%rdi)
    0.00 :	  47405a:       lea    (%rax,%rdx,4),%rax
    0.00 :	  47405e:       mov    %edx,0x2ec(%rdi)
    0.00 :	  474064:       mov    %rax,0x300(%rdi)
    0.00 :	  47406b:       repz retq 
    0.00 :	  47406d:       push   %rax
    0.00 :	  47406e:       mov    $0x4b8aa8,%ecx
    0.00 :	  474073:       mov    $0x3c8,%edx
    0.00 :	  474078:       mov    $0x4b8868,%esi
    0.00 :	  47407d:       mov    $0x4b8a78,%edi
    0.00 :	  474082:       callq  405610 <__assert_fail>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000441570 <handle_intel>:
         :	handle_intel():
    0.00 :	  441570:       cmp    $0x1,%esi
    0.00 :	  441573:       jbe    441670 <handle_intel+0x100>
    0.00 :	  441579:       push   %r15
    0.00 :	  44157b:       push   %r14
    0.00 :	  44157d:       mov    $0x1,%r15d
    0.00 :	  441583:       push   %r13
    0.00 :	  441585:       push   %r12
    0.00 :	  441587:       mov    $0x1,%r12d
    0.00 :	  44158d:       push   %rbp
    0.00 :	  44158e:       push   %rbx
    0.00 :	  44158f:       mov    %edi,%ebp
    0.00 :	  441591:       sub    $0x18,%rsp
    0.00 :	  441595:       movb   $0x0,0xe(%rsp)
    0.00 :	  44159a:       movb   $0x0,0xf(%rsp)
    0.00 :	  44159f:       jmp    441619 <handle_intel+0xa9>
    0.00 :	  4415a1:       nopl   0x0(%rax)
    0.00 :	  4415a8:       lea    0xe(%rsp),%rcx
    0.00 :	  4415ad:       lea    0xf(%rsp),%rdx
    0.00 :	  4415b2:       mov    %ebp,%edi
    0.00 :	  4415b4:       callq  4412a0 <intel_check_word>
    0.00 :	  4415b9:       test   %rax,%rax
    0.00 :	  4415bc:       jne    441659 <handle_intel+0xe9>
    0.00 :	  4415c2:       lea    0xe(%rsp),%rcx
    0.00 :	  4415c7:       lea    0xf(%rsp),%rdx
    0.00 :	  4415cc:       mov    %ebx,%esi
    0.00 :	  4415ce:       mov    %ebp,%edi
    0.00 :	  4415d0:       callq  4412a0 <intel_check_word>
    0.00 :	  4415d5:       test   %rax,%rax
    0.00 :	  4415d8:       jne    441659 <handle_intel+0xe9>
    0.00 :	  4415da:       lea    0xe(%rsp),%rcx
    0.00 :	  4415df:       lea    0xf(%rsp),%rdx
    0.00 :	  4415e4:       mov    %r13d,%esi
    0.00 :	  4415e7:       mov    %ebp,%edi
    0.00 :	  4415e9:       callq  4412a0 <intel_check_word>
    0.00 :	  4415ee:       test   %rax,%rax
    0.00 :	  4415f1:       jne    441659 <handle_intel+0xe9>
    0.00 :	  4415f3:       lea    0xe(%rsp),%rcx
    0.00 :	  4415f8:       lea    0xf(%rsp),%rdx
    0.00 :	  4415fd:       mov    %r14d,%esi
    0.00 :	  441600:       mov    %ebp,%edi
    0.00 :	  441602:       callq  4412a0 <intel_check_word>
    0.00 :	  441607:       test   %rax,%rax
    0.00 :	  44160a:       jne    441659 <handle_intel+0xe9>
    0.00 :	  44160c:       cmp    %r12d,%r15d
    0.00 :	  44160f:       lea    0x1(%r12),%eax
    0.00 :	  441614:       jbe    441640 <handle_intel+0xd0>
    0.00 :	  441616:       mov    %eax,%r12d
    0.00 :	  441619:       mov    $0x2,%eax
    0.00 :	  44161e:       cpuid  
  100.00 :	  441620:       cmp    $0x1,%r12d
    0.00 :	  441624:       mov    %edx,%r14d
    0.00 :	  441627:       mov    %ecx,%r13d
    0.00 :	  44162a:       mov    %eax,%esi
    0.00 :	  44162c:       jne    4415a8 <handle_intel+0x38>
    0.00 :	  441632:       movzbl %al,%r15d
    0.00 :	  441636:       and    $0x0,%sil
    0.00 :	  44163a:       jmpq   4415a8 <handle_intel+0x38>
    0.00 :	  44163f:       nop
    0.00 :	  441640:       sub    $0xbf,%ebp
    0.00 :	  441646:       cmp    $0x5,%ebp
    0.00 :	  441649:       ja     441678 <handle_intel+0x108>
    0.00 :	  44164b:       cmpb   $0x0,0xe(%rsp)
    0.00 :	  441650:       je     441678 <handle_intel+0x108>
    0.00 :	  441652:       mov    $0xffffffffffffffff,%rax
    0.00 :	  441659:       add    $0x18,%rsp
    0.00 :	  44165d:       pop    %rbx
    0.00 :	  44165e:       pop    %rbp
    0.00 :	  44165f:       pop    %r12
    0.00 :	  441661:       pop    %r13
    0.00 :	  441663:       pop    %r14
    0.00 :	  441665:       pop    %r15
    0.00 :	  441667:       retq   
    0.00 :	  441668:       nopl   0x0(%rax,%rax,1)
    0.00 :	  441670:       xor    %eax,%eax
    0.00 :	  441672:       retq   
    0.00 :	  441673:       nopl   0x0(%rax,%rax,1)
    0.00 :	  441678:       add    $0x18,%rsp
    0.00 :	  44167c:       xor    %eax,%eax
    0.00 :	  44167e:       pop    %rbx
    0.00 :	  44167f:       pop    %rbp
    0.00 :	  441680:       pop    %r12
    0.00 :	  441682:       pop    %r13
    0.00 :	  441684:       pop    %r14
    0.00 :	  441686:       pop    %r15
    0.00 :	  441688:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000040487b <main>:
         :	main():
         :
         :	  return 0;
         :	}
         :
         :
         :	int main(){
  100.00 :	  40487b:       push   %rbp
    0.00 :	  40487c:       mov    %rsp,%rbp
         :
         :	  test_keys();//Server and Client will agree on the shared key!!
    0.00 :	  40487f:       mov    $0x0,%eax
    0.00 :	  404884:       callq  40458f <test_keys>
         :	 // test_invalid_sk_a();
         :	 // test_invalid_ciphertext();
         :	  printf("it's done \n");
    0.00 :	  404889:       mov    $0x4a4554,%edi
    0.00 :	  40488e:       callq  413960 <_IO_puts>
         :	  return 0;
    0.00 :	  404893:       mov    $0x0,%eax
         :	}
    0.00 :	  404898:       pop    %rbp
    0.00 :	  404899:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000420f60 <__libc_malloc>:
         :	malloc():
  100.00 :	  420f60:       push   %rbp
    0.00 :	  420f61:       push   %rbx
    0.00 :	  420f62:       sub    $0x8,%rsp
    0.00 :	  420f66:       mov    0x2ae81b(%rip),%rax        # 6cf788 <__malloc_hook>
    0.00 :	  420f6d:       test   %rax,%rax
    0.00 :	  420f70:       jne    4210b8 <__libc_malloc+0x158>
    0.00 :	  420f76:       mov    $0xffffffffffffffd8,%rax
    0.00 :	  420f7d:       mov    %rdi,%rbp
    0.00 :	  420f80:       mov    %fs:(%rax),%rbx
    0.00 :	  420f84:       test   %rbx,%rbx
    0.00 :	  420f87:       je     420f95 <__libc_malloc+0x35>
    0.00 :	  420f89:       mov    0x4(%rbx),%eax
    0.00 :	  420f8c:       and    $0x4,%eax
    0.00 :	  420f8f:       je     421028 <__libc_malloc+0xc8>
    0.00 :	  420f95:       callq  41b200 <get_free_list>
    0.00 :	  420f9a:       test   %rax,%rax
    0.00 :	  420f9d:       mov    %rax,%rbx
    0.00 :	  420fa0:       je     421060 <__libc_malloc+0x100>
    0.00 :	  420fa6:       mov    %rbp,%rsi
    0.00 :	  420fa9:       mov    %rbx,%rdi
    0.00 :	  420fac:       callq  41ed10 <_int_malloc>
    0.00 :	  420fb1:       test   %rax,%rax
    0.00 :	  420fb4:       mov    %rax,%rdx
    0.00 :	  420fb7:       je     421088 <__libc_malloc+0x128>
    0.00 :	  420fbd:       cmpl   $0x0,0x2b11f8(%rip)        # 6d21bc <__libc_multiple_threads>
    0.00 :	  420fc4:       je     420fcd <__libc_malloc+0x6d>
    0.00 :	  420fc6:       lock decl (%rbx)
    0.00 :	  420fc9:       jne    420fd1 <__libc_malloc+0x71>
    0.00 :	  420fcb:       jmp    420fe7 <__libc_malloc+0x87>
    0.00 :	  420fcd:       decl   (%rbx)
    0.00 :	  420fcf:       je     420fe7 <__libc_malloc+0x87>
    0.00 :	  420fd1:       lea    (%rbx),%rdi
    0.00 :	  420fd4:       sub    $0x80,%rsp
    0.00 :	  420fdb:       callq  445bc0 <__lll_unlock_wake_private>
    0.00 :	  420fe0:       add    $0x80,%rsp
    0.00 :	  420fe7:       test   %rdx,%rdx
    0.00 :	  420fea:       je     4210c8 <__libc_malloc+0x168>
    0.00 :	  420ff0:       mov    -0x8(%rdx),%rax
    0.00 :	  420ff4:       test   $0x2,%al
    0.00 :	  420ff6:       jne    421017 <__libc_malloc+0xb7>
    0.00 :	  420ff8:       test   $0x4,%al
    0.00 :	  420ffa:       mov    $0x6cf800,%ecx
    0.00 :	  420fff:       je     42100e <__libc_malloc+0xae>
    0.00 :	  421001:       lea    -0x10(%rdx),%rax
    0.00 :	  421005:       and    $0xfffffffffc000000,%rax
    0.00 :	  42100b:       mov    (%rax),%rcx
    0.00 :	  42100e:       cmp    %rbx,%rcx
    0.00 :	  421011:       jne    4210cf <__libc_malloc+0x16f>
    0.00 :	  421017:       mov    %rdx,%rax
    0.00 :	  42101a:       add    $0x8,%rsp
    0.00 :	  42101e:       pop    %rbx
    0.00 :	  42101f:       pop    %rbp
    0.00 :	  421020:       retq   
    0.00 :	  421021:       nopl   0x0(%rax)
    0.00 :	  421028:       mov    $0x1,%esi
    0.00 :	  42102d:       cmpl   $0x0,0x2b1188(%rip)        # 6d21bc <__libc_multiple_threads>
    0.00 :	  421034:       je     42103e <__libc_malloc+0xde>
    0.00 :	  421036:       lock cmpxchg %esi,(%rbx)
    0.00 :	  42103a:       jne    421043 <__libc_malloc+0xe3>
    0.00 :	  42103c:       jmp    421059 <__libc_malloc+0xf9>
    0.00 :	  42103e:       cmpxchg %esi,(%rbx)
    0.00 :	  421041:       je     421059 <__libc_malloc+0xf9>
    0.00 :	  421043:       lea    (%rbx),%rdi
    0.00 :	  421046:       sub    $0x80,%rsp
    0.00 :	  42104d:       callq  445b90 <__lll_lock_wait_private>
    0.00 :	  421052:       add    $0x80,%rsp
    0.00 :	  421059:       jmpq   420fa6 <__libc_malloc+0x46>
    0.00 :	  42105e:       xchg   %ax,%ax
    0.00 :	  421060:       xor    %esi,%esi
    0.00 :	  421062:       mov    %rbp,%rdi
    0.00 :	  421065:       callq  41b4f0 <arena_get2.part.3>
    0.00 :	  42106a:       mov    %rbp,%rsi
    0.00 :	  42106d:       mov    %rax,%rdi
    0.00 :	  421070:       mov    %rax,%rbx
    0.00 :	  421073:       callq  41ed10 <_int_malloc>
    0.00 :	  421078:       test   %rax,%rax
    0.00 :	  42107b:       mov    %rax,%rdx
    0.00 :	  42107e:       jne    4210a5 <__libc_malloc+0x145>
    0.00 :	  421080:       test   %rbx,%rbx
    0.00 :	  421083:       je     4210a5 <__libc_malloc+0x145>
    0.00 :	  421085:       nopl   (%rax)
    0.00 :	  421088:       nop
    0.00 :	  421089:       mov    %rbx,%rdi
    0.00 :	  42108c:       mov    %rbp,%rsi
    0.00 :	  42108f:       callq  41ba90 <arena_get_retry>
    0.00 :	  421094:       mov    %rbp,%rsi
    0.00 :	  421097:       mov    %rax,%rdi
    0.00 :	  42109a:       mov    %rax,%rbx
    0.00 :	  42109d:       callq  41ed10 <_int_malloc>
    0.00 :	  4210a2:       mov    %rax,%rdx
    0.00 :	  4210a5:       test   %rbx,%rbx
    0.00 :	  4210a8:       jne    420fbd <__libc_malloc+0x5d>
    0.00 :	  4210ae:       jmpq   420fe7 <__libc_malloc+0x87>
    0.00 :	  4210b3:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4210b8:       mov    0x18(%rsp),%rsi
    0.00 :	  4210bd:       add    $0x8,%rsp
    0.00 :	  4210c1:       pop    %rbx
    0.00 :	  4210c2:       pop    %rbp
    0.00 :	  4210c3:       jmpq   *%rax
    0.00 :	  4210c5:       nopl   (%rax)
    0.00 :	  4210c8:       xor    %eax,%eax
    0.00 :	  4210ca:       jmpq   42101a <__libc_malloc+0xba>
    0.00 :	  4210cf:       mov    $0x4a64d0,%ecx
    0.00 :	  4210d4:       mov    $0xb6d,%edx
    0.00 :	  4210d9:       mov    $0x4a5668,%esi
    0.00 :	  4210de:       mov    $0x4a5fe0,%edi
    0.00 :	  4210e3:       callq  41aec0 <__malloc_assert>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004225b0 <malloc_hook_ini>:
         :	malloc_hook_ini():
  100.00 :	  4225b0:       push   %rbp
    0.00 :	  4225b1:       push   %rbx
    0.00 :	  4225b2:       mov    %rdi,%rbp
    0.00 :	  4225b5:       sub    $0x8,%rsp
    0.00 :	  4225b9:       mov    0x2ad1a5(%rip),%eax        # 6cf764 <__libc_malloc_initialized>
    0.00 :	  4225bf:       movq   $0x0,0x2ad1be(%rip)        # 6cf788 <__malloc_hook>
    0.00 :	  4225ca:       test   %eax,%eax
    0.00 :	  4225cc:       js     422718 <malloc_hook_ini+0x168>
    0.00 :	  4225d2:       xor    %eax,%eax
    0.00 :	  4225d4:       test   %rax,%rax
    0.00 :	  4225d7:       jne    42272d <malloc_hook_ini+0x17d>
    0.00 :	  4225dd:       mov    $0xffffffffffffffd8,%rax
    0.00 :	  4225e4:       mov    %fs:(%rax),%rbx
    0.00 :	  4225e8:       test   %rbx,%rbx
    0.00 :	  4225eb:       je     4225f9 <malloc_hook_ini+0x49>
    0.00 :	  4225ed:       mov    0x4(%rbx),%eax
    0.00 :	  4225f0:       and    $0x4,%eax
    0.00 :	  4225f3:       je     422688 <malloc_hook_ini+0xd8>
    0.00 :	  4225f9:       callq  41b200 <get_free_list>
    0.00 :	  4225fe:       test   %rax,%rax
    0.00 :	  422601:       mov    %rax,%rbx
    0.00 :	  422604:       je     4226c0 <malloc_hook_ini+0x110>
    0.00 :	  42260a:       mov    %rbp,%rsi
    0.00 :	  42260d:       mov    %rbx,%rdi
    0.00 :	  422610:       callq  41ed10 <_int_malloc>
    0.00 :	  422615:       test   %rax,%rax
    0.00 :	  422618:       mov    %rax,%rdx
    0.00 :	  42261b:       je     4226e8 <malloc_hook_ini+0x138>
    0.00 :	  422621:       cmpl   $0x0,0x2afb94(%rip)        # 6d21bc <__libc_multiple_threads>
    0.00 :	  422628:       je     422631 <malloc_hook_ini+0x81>
    0.00 :	  42262a:       lock decl (%rbx)
    0.00 :	  42262d:       jne    422635 <malloc_hook_ini+0x85>
    0.00 :	  42262f:       jmp    42264b <malloc_hook_ini+0x9b>
    0.00 :	  422631:       decl   (%rbx)
    0.00 :	  422633:       je     42264b <malloc_hook_ini+0x9b>
    0.00 :	  422635:       lea    (%rbx),%rdi
    0.00 :	  422638:       sub    $0x80,%rsp
    0.00 :	  42263f:       callq  445bc0 <__lll_unlock_wake_private>
    0.00 :	  422644:       add    $0x80,%rsp
    0.00 :	  42264b:       test   %rdx,%rdx
    0.00 :	  42264e:       je     422740 <malloc_hook_ini+0x190>
    0.00 :	  422654:       mov    -0x8(%rdx),%rax
    0.00 :	  422658:       test   $0x2,%al
    0.00 :	  42265a:       jne    42267b <malloc_hook_ini+0xcb>
    0.00 :	  42265c:       test   $0x4,%al
    0.00 :	  42265e:       mov    $0x6cf800,%ecx
    0.00 :	  422663:       je     422672 <malloc_hook_ini+0xc2>
    0.00 :	  422665:       lea    -0x10(%rdx),%rax
    0.00 :	  422669:       and    $0xfffffffffc000000,%rax
    0.00 :	  42266f:       mov    (%rax),%rcx
    0.00 :	  422672:       cmp    %rbx,%rcx
    0.00 :	  422675:       jne    422747 <malloc_hook_ini+0x197>
    0.00 :	  42267b:       mov    %rdx,%rax
    0.00 :	  42267e:       add    $0x8,%rsp
    0.00 :	  422682:       pop    %rbx
    0.00 :	  422683:       pop    %rbp
    0.00 :	  422684:       retq   
    0.00 :	  422685:       nopl   (%rax)
    0.00 :	  422688:       mov    $0x1,%esi
    0.00 :	  42268d:       cmpl   $0x0,0x2afb28(%rip)        # 6d21bc <__libc_multiple_threads>
    0.00 :	  422694:       je     42269e <malloc_hook_ini+0xee>
    0.00 :	  422696:       lock cmpxchg %esi,(%rbx)
    0.00 :	  42269a:       jne    4226a3 <malloc_hook_ini+0xf3>
    0.00 :	  42269c:       jmp    4226b9 <malloc_hook_ini+0x109>
    0.00 :	  42269e:       cmpxchg %esi,(%rbx)
    0.00 :	  4226a1:       je     4226b9 <malloc_hook_ini+0x109>
    0.00 :	  4226a3:       lea    (%rbx),%rdi
    0.00 :	  4226a6:       sub    $0x80,%rsp
    0.00 :	  4226ad:       callq  445b90 <__lll_lock_wait_private>
    0.00 :	  4226b2:       add    $0x80,%rsp
    0.00 :	  4226b9:       jmpq   42260a <malloc_hook_ini+0x5a>
    0.00 :	  4226be:       xchg   %ax,%ax
    0.00 :	  4226c0:       xor    %esi,%esi
    0.00 :	  4226c2:       mov    %rbp,%rdi
    0.00 :	  4226c5:       callq  41b4f0 <arena_get2.part.3>
    0.00 :	  4226ca:       mov    %rbp,%rsi
    0.00 :	  4226cd:       mov    %rax,%rdi
    0.00 :	  4226d0:       mov    %rax,%rbx
    0.00 :	  4226d3:       callq  41ed10 <_int_malloc>
    0.00 :	  4226d8:       test   %rax,%rax
    0.00 :	  4226db:       mov    %rax,%rdx
    0.00 :	  4226de:       jne    422705 <malloc_hook_ini+0x155>
    0.00 :	  4226e0:       test   %rbx,%rbx
    0.00 :	  4226e3:       je     422705 <malloc_hook_ini+0x155>
    0.00 :	  4226e5:       nopl   (%rax)
    0.00 :	  4226e8:       nop
    0.00 :	  4226e9:       mov    %rbx,%rdi
    0.00 :	  4226ec:       mov    %rbp,%rsi
    0.00 :	  4226ef:       callq  41ba90 <arena_get_retry>
    0.00 :	  4226f4:       mov    %rbp,%rsi
    0.00 :	  4226f7:       mov    %rax,%rdi
    0.00 :	  4226fa:       mov    %rax,%rbx
    0.00 :	  4226fd:       callq  41ed10 <_int_malloc>
    0.00 :	  422702:       mov    %rax,%rdx
    0.00 :	  422705:       test   %rbx,%rbx
    0.00 :	  422708:       jne    422621 <malloc_hook_ini+0x71>
    0.00 :	  42270e:       jmpq   42264b <malloc_hook_ini+0x9b>
    0.00 :	  422713:       nopl   0x0(%rax,%rax,1)
    0.00 :	  422718:       callq  422240 <ptmalloc_init.part.5>
    0.00 :	  42271d:       mov    0x2ad064(%rip),%rax        # 6cf788 <__malloc_hook>
    0.00 :	  422724:       test   %rax,%rax
    0.00 :	  422727:       je     4225dd <malloc_hook_ini+0x2d>
    0.00 :	  42272d:       mov    0x18(%rsp),%rsi
    0.00 :	  422732:       add    $0x8,%rsp
    0.00 :	  422736:       mov    %rbp,%rdi
    0.00 :	  422739:       pop    %rbx
    0.00 :	  42273a:       pop    %rbp
    0.00 :	  42273b:       jmpq   *%rax
    0.00 :	  42273d:       nopl   (%rax)
    0.00 :	  422740:       xor    %eax,%eax
    0.00 :	  422742:       jmpq   42267e <malloc_hook_ini+0xce>
    0.00 :	  422747:       mov    $0x4a64d0,%ecx
    0.00 :	  42274c:       mov    $0xb6d,%edx
    0.00 :	  422751:       mov    $0x4a5668,%esi
    0.00 :	  422756:       mov    $0x4a5fe0,%edi
    0.00 :	  42275b:       callq  41aec0 <__malloc_assert>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004293e0 <memcmp>:
         :	bcmp():
  100.00 :	  4293e0:       testl  $0x200,0x2a82a6(%rip)        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  4293ea:       jne    4293f4 <memcmp+0x14>
    0.00 :	  4293ec:       lea    0x1d(%rip),%rax        # 429410 <__memcmp_sse2>
    0.00 :	  4293f3:       retq   
    0.00 :	  4293f4:       testl  $0x80000,0x2a8292(%rip)        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  4293fe:       je     429408 <memcmp+0x28>
    0.00 :	  429400:       lea    0x8449(%rip),%rax        # 431850 <__memcmp_sse4_1>
    0.00 :	  429407:       retq   
    0.00 :	  429408:       lea    0x15e71(%rip),%rax        # 43f280 <__memcmp_ssse3>
    0.00 :	  42940f:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000042f570 <memcpy>:
         :	memcpy():
  100.00 :	  42f570:       cmp    $0x20,%rdx
    0.00 :	  42f574:       mov    %rdi,%rax
    0.00 :	  42f577:       jae    42f5f0 <memcpy+0x80>
    0.00 :	  42f579:       test   $0x1,%dl
    0.00 :	  42f57c:       je     42f589 <memcpy+0x19>
    0.00 :	  42f57e:       movzbl (%rsi),%ecx
    0.00 :	  42f581:       mov    %cl,(%rdi)
    0.00 :	  42f583:       inc    %rsi
    0.00 :	  42f586:       inc    %rdi
    0.00 :	  42f589:       test   $0x2,%dl
    0.00 :	  42f58c:       je     42f5a0 <memcpy+0x30>
    0.00 :	  42f58e:       movzwl (%rsi),%ecx
    0.00 :	  42f591:       mov    %cx,(%rdi)
    0.00 :	  42f594:       add    $0x2,%rsi
    0.00 :	  42f598:       add    $0x2,%rdi
    0.00 :	  42f59c:       nopl   0x0(%rax)
    0.00 :	  42f5a0:       test   $0x4,%dl
    0.00 :	  42f5a3:       je     42f5b1 <memcpy+0x41>
    0.00 :	  42f5a5:       mov    (%rsi),%ecx
    0.00 :	  42f5a7:       mov    %ecx,(%rdi)
    0.00 :	  42f5a9:       add    $0x4,%rsi
    0.00 :	  42f5ad:       add    $0x4,%rdi
    0.00 :	  42f5b1:       test   $0x8,%dl
    0.00 :	  42f5b4:       je     42f5c4 <memcpy+0x54>
    0.00 :	  42f5b6:       mov    (%rsi),%rcx
    0.00 :	  42f5b9:       mov    %rcx,(%rdi)
    0.00 :	  42f5bc:       add    $0x8,%rsi
    0.00 :	  42f5c0:       add    $0x8,%rdi
    0.00 :	  42f5c4:       and    $0xf0,%edx
    0.00 :	  42f5ca:       je     42f5eb <memcpy+0x7b>
    0.00 :	  42f5cc:       nopl   0x0(%rax)
    0.00 :	  42f5d0:       mov    (%rsi),%rcx
    0.00 :	  42f5d3:       mov    0x8(%rsi),%r8
    0.00 :	  42f5d7:       mov    %rcx,(%rdi)
    0.00 :	  42f5da:       mov    %r8,0x8(%rdi)
    0.00 :	  42f5de:       sub    $0x10,%edx
    0.00 :	  42f5e1:       lea    0x10(%rsi),%rsi
    0.00 :	  42f5e5:       lea    0x10(%rdi),%rdi
    0.00 :	  42f5e9:       jne    42f5d0 <memcpy+0x60>
    0.00 :	  42f5eb:       repz retq 
    0.00 :	  42f5ed:       nopl   (%rax)
    0.00 :	  42f5f0:       mov    %rax,-0x8(%rsp)
    0.00 :	  42f5f5:       mov    %esi,%ecx
    0.00 :	  42f5f7:       and    $0x7,%ecx
    0.00 :	  42f5fa:       je     42f630 <memcpy+0xc0>
    0.00 :	  42f5fc:       lea    -0x8(%rcx,%rdx,1),%rdx
    0.00 :	  42f601:       sub    $0x8,%ecx
    0.00 :	  42f604:       xchg   %ax,%ax
    0.00 :	  42f606:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  42f610:       movzbl (%rsi),%eax
    0.00 :	  42f613:       mov    %al,(%rdi)
    0.00 :	  42f615:       inc    %ecx
    0.00 :	  42f617:       lea    0x1(%rsi),%rsi
    0.00 :	  42f61b:       lea    0x1(%rdi),%rdi
    0.00 :	  42f61f:       jne    42f610 <memcpy+0xa0>
    0.00 :	  42f621:       nopl   0x0(%rax,%rax,1)
    0.00 :	  42f626:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  42f630:       cmp    $0x400,%rdx
    0.00 :	  42f637:       ja     42f6b0 <memcpy+0x140>
    0.00 :	  42f639:       mov    %edx,%ecx
    0.00 :	  42f63b:       shr    $0x5,%ecx
    0.00 :	  42f63e:       je     42f6a0 <memcpy+0x130>
    0.00 :	  42f640:       dec    %ecx
    0.00 :	  42f642:       mov    (%rsi),%rax
    0.00 :	  42f645:       mov    0x8(%rsi),%r8
    0.00 :	  42f649:       mov    0x10(%rsi),%r9
    0.00 :	  42f64d:       mov    0x18(%rsi),%r10
    0.00 :	  42f651:       mov    %rax,(%rdi)
    0.00 :	  42f654:       mov    %r8,0x8(%rdi)
    0.00 :	  42f658:       mov    %r9,0x10(%rdi)
    0.00 :	  42f65c:       mov    %r10,0x18(%rdi)
    0.00 :	  42f660:       lea    0x20(%rsi),%rsi
    0.00 :	  42f664:       lea    0x20(%rdi),%rdi
    0.00 :	  42f668:       je     42f6a0 <memcpy+0x130>
    0.00 :	  42f66a:       dec    %ecx
    0.00 :	  42f66c:       mov    (%rsi),%rax
    0.00 :	  42f66f:       mov    0x8(%rsi),%r8
    0.00 :	  42f673:       mov    0x10(%rsi),%r9
    0.00 :	  42f677:       mov    0x18(%rsi),%r10
    0.00 :	  42f67b:       mov    %rax,(%rdi)
    0.00 :	  42f67e:       mov    %r8,0x8(%rdi)
    0.00 :	  42f682:       mov    %r9,0x10(%rdi)
    0.00 :	  42f686:       mov    %r10,0x18(%rdi)
    0.00 :	  42f68a:       lea    0x20(%rsi),%rsi
    0.00 :	  42f68e:       lea    0x20(%rdi),%rdi
    0.00 :	  42f692:       jne    42f640 <memcpy+0xd0>
    0.00 :	  42f694:       xchg   %ax,%ax
    0.00 :	  42f696:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  42f6a0:       and    $0x1f,%edx
    0.00 :	  42f6a3:       mov    -0x8(%rsp),%rax
    0.00 :	  42f6a8:       jne    42f579 <memcpy+0x9>
    0.00 :	  42f6ae:       repz retq 
    0.00 :	  42f6b0:       mov    0x2a0a19(%rip),%r11        # 6d00d0 <__x86_data_cache_size_half>
    0.00 :	  42f6b7:       cmp    %rdx,%r11
    0.00 :	  42f6ba:       cmova  %rdx,%r11
    0.00 :	  42f6be:       mov    %r11,%rcx
    0.00 :	  42f6c1:       and    $0xfffffffffffffff8,%r11
    0.00 :	  42f6c5:       shr    $0x3,%rcx
    0.00 :	  42f6c9:       je     42f6d0 <memcpy+0x160>
    0.00 :	  42f6cb:       rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :	  42f6ce:       xchg   %ax,%ax
    0.00 :	  42f6d0:       sub    %r11,%rdx
    0.00 :	  42f6d3:       test   $0xfffffffffffffff8,%rdx
    0.00 :	  42f6da:       jne    42f6f0 <memcpy+0x180>
    0.00 :	  42f6dc:       and    $0x7,%edx
    0.00 :	  42f6df:       mov    -0x8(%rsp),%rax
    0.00 :	  42f6e4:       jne    42f579 <memcpy+0x9>
    0.00 :	  42f6ea:       repz retq 
    0.00 :	  42f6ec:       nopl   0x0(%rax)
    0.00 :	  42f6f0:       mov    0x2a09b9(%rip),%r8        # 6d00b0 <__x86_shared_cache_size_half>
    0.00 :	  42f6f7:       cmp    %rdx,%r8
    0.00 :	  42f6fa:       cmova  %rdx,%r8
    0.00 :	  42f6fe:       mov    %r8,%rcx
    0.00 :	  42f701:       and    $0xffffffffffffffc0,%r8
    0.00 :	  42f705:       shr    $0x6,%rcx
    0.00 :	  42f709:       je     42f8ba <memcpy+0x34a>
    0.00 :	  42f70f:       mov    %r14,-0x10(%rsp)
    0.00 :	  42f714:       mov    %r13,-0x18(%rsp)
    0.00 :	  42f719:       mov    %r12,-0x20(%rsp)
    0.00 :	  42f71e:       mov    %rbx,-0x28(%rsp)
    0.00 :	  42f723:       cmpl   $0x0,0x2a2a8e(%rip)        # 6d21b8 <__x86_prefetchw>
    0.00 :	  42f72a:       je     42f7f0 <memcpy+0x280>
    0.00 :	  42f730:       dec    %rcx
    0.00 :	  42f733:       mov    (%rsi),%rax
    0.00 :	  42f736:       mov    0x8(%rsi),%rbx
    0.00 :	  42f73a:       mov    0x10(%rsi),%r9
    0.00 :	  42f73e:       mov    0x18(%rsi),%r10
    0.00 :	  42f742:       mov    0x20(%rsi),%r11
    0.00 :	  42f746:       mov    0x28(%rsi),%r12
    0.00 :	  42f74a:       mov    0x30(%rsi),%r13
    0.00 :	  42f74e:       mov    0x38(%rsi),%r14
    0.00 :	  42f752:       prefetcht0 0x380(%rsi)
    0.00 :	  42f759:       prefetcht0 0x3c0(%rsi)
    0.00 :	  42f760:       mov    %rax,(%rdi)
    0.00 :	  42f763:       mov    %rbx,0x8(%rdi)
    0.00 :	  42f767:       mov    %r9,0x10(%rdi)
    0.00 :	  42f76b:       mov    %r10,0x18(%rdi)
    0.00 :	  42f76f:       mov    %r11,0x20(%rdi)
    0.00 :	  42f773:       mov    %r12,0x28(%rdi)
    0.00 :	  42f777:       mov    %r13,0x30(%rdi)
    0.00 :	  42f77b:       mov    %r14,0x38(%rdi)
    0.00 :	  42f77f:       lea    0x40(%rsi),%rsi
    0.00 :	  42f783:       lea    0x40(%rdi),%rdi
    0.00 :	  42f787:       je     42f8a6 <memcpy+0x336>
    0.00 :	  42f78d:       dec    %rcx
    0.00 :	  42f790:       mov    (%rsi),%rax
    0.00 :	  42f793:       mov    0x8(%rsi),%rbx
    0.00 :	  42f797:       mov    0x10(%rsi),%r9
    0.00 :	  42f79b:       mov    0x18(%rsi),%r10
    0.00 :	  42f79f:       mov    0x20(%rsi),%r11
    0.00 :	  42f7a3:       mov    0x28(%rsi),%r12
    0.00 :	  42f7a7:       mov    0x30(%rsi),%r13
    0.00 :	  42f7ab:       mov    0x38(%rsi),%r14
    0.00 :	  42f7af:       mov    %rax,(%rdi)
    0.00 :	  42f7b2:       mov    %rbx,0x8(%rdi)
    0.00 :	  42f7b6:       mov    %r9,0x10(%rdi)
    0.00 :	  42f7ba:       mov    %r10,0x18(%rdi)
    0.00 :	  42f7be:       mov    %r11,0x20(%rdi)
    0.00 :	  42f7c2:       mov    %r12,0x28(%rdi)
    0.00 :	  42f7c6:       mov    %r13,0x30(%rdi)
    0.00 :	  42f7ca:       mov    %r14,0x38(%rdi)
    0.00 :	  42f7ce:       prefetchw 0x340(%rdi)
    0.00 :	  42f7d5:       prefetchw 0x380(%rdi)
    0.00 :	  42f7dc:       lea    0x40(%rsi),%rsi
    0.00 :	  42f7e0:       lea    0x40(%rdi),%rdi
    0.00 :	  42f7e4:       jne    42f730 <memcpy+0x1c0>
    0.00 :	  42f7ea:       jmpq   42f8a6 <memcpy+0x336>
    0.00 :	  42f7ef:       nop
    0.00 :	  42f7f0:       dec    %rcx
    0.00 :	  42f7f3:       mov    (%rsi),%rax
    0.00 :	  42f7f6:       mov    0x8(%rsi),%rbx
    0.00 :	  42f7fa:       mov    0x10(%rsi),%r9
    0.00 :	  42f7fe:       mov    0x18(%rsi),%r10
    0.00 :	  42f802:       mov    0x20(%rsi),%r11
    0.00 :	  42f806:       mov    0x28(%rsi),%r12
    0.00 :	  42f80a:       mov    0x30(%rsi),%r13
    0.00 :	  42f80e:       mov    0x38(%rsi),%r14
    0.00 :	  42f812:       prefetcht0 0x380(%rsi)
    0.00 :	  42f819:       prefetcht0 0x3c0(%rsi)
    0.00 :	  42f820:       mov    %rax,(%rdi)
    0.00 :	  42f823:       mov    %rbx,0x8(%rdi)
    0.00 :	  42f827:       mov    %r9,0x10(%rdi)
    0.00 :	  42f82b:       mov    %r10,0x18(%rdi)
    0.00 :	  42f82f:       mov    %r11,0x20(%rdi)
    0.00 :	  42f833:       mov    %r12,0x28(%rdi)
    0.00 :	  42f837:       mov    %r13,0x30(%rdi)
    0.00 :	  42f83b:       mov    %r14,0x38(%rdi)
    0.00 :	  42f83f:       lea    0x40(%rsi),%rsi
    0.00 :	  42f843:       lea    0x40(%rdi),%rdi
    0.00 :	  42f847:       je     42f8a6 <memcpy+0x336>
    0.00 :	  42f849:       dec    %rcx
    0.00 :	  42f84c:       mov    (%rsi),%rax
    0.00 :	  42f84f:       mov    0x8(%rsi),%rbx
    0.00 :	  42f853:       mov    0x10(%rsi),%r9
    0.00 :	  42f857:       mov    0x18(%rsi),%r10
    0.00 :	  42f85b:       mov    0x20(%rsi),%r11
    0.00 :	  42f85f:       mov    0x28(%rsi),%r12
    0.00 :	  42f863:       mov    0x30(%rsi),%r13
    0.00 :	  42f867:       mov    0x38(%rsi),%r14
    0.00 :	  42f86b:       prefetcht0 0x340(%rdi)
    0.00 :	  42f872:       prefetcht0 0x380(%rdi)
    0.00 :	  42f879:       mov    %rax,(%rdi)
    0.00 :	  42f87c:       mov    %rbx,0x8(%rdi)
    0.00 :	  42f880:       mov    %r9,0x10(%rdi)
    0.00 :	  42f884:       mov    %r10,0x18(%rdi)
    0.00 :	  42f888:       mov    %r11,0x20(%rdi)
    0.00 :	  42f88c:       mov    %r12,0x28(%rdi)
    0.00 :	  42f890:       mov    %r13,0x30(%rdi)
    0.00 :	  42f894:       mov    %r14,0x38(%rdi)
    0.00 :	  42f898:       lea    0x40(%rsi),%rsi
    0.00 :	  42f89c:       lea    0x40(%rdi),%rdi
    0.00 :	  42f8a0:       jne    42f7f0 <memcpy+0x280>
    0.00 :	  42f8a6:       mov    -0x28(%rsp),%rbx
    0.00 :	  42f8ab:       mov    -0x20(%rsp),%r12
    0.00 :	  42f8b0:       mov    -0x18(%rsp),%r13
    0.00 :	  42f8b5:       mov    -0x10(%rsp),%r14
    0.00 :	  42f8ba:       sub    %r8,%rdx
    0.00 :	  42f8bd:       test   $0xffffffffffffffc0,%rdx
    0.00 :	  42f8c4:       jne    42f8e0 <memcpy+0x370>
    0.00 :	  42f8c6:       and    $0x3f,%edx
    0.00 :	  42f8c9:       mov    -0x8(%rsp),%rax
    0.00 :	  42f8ce:       jne    42f579 <memcpy+0x9>
    0.00 :	  42f8d4:       repz retq 
    0.00 :	  42f8d6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  42f8e0:       mov    %rdx,%rcx
    0.00 :	  42f8e3:       shr    $0x7,%rcx
    0.00 :	  42f8e7:       je     42f9c5 <memcpy+0x455>
    0.00 :	  42f8ed:       mov    %r14,-0x10(%rsp)
    0.00 :	  42f8f2:       mov    %r13,-0x18(%rsp)
    0.00 :	  42f8f7:       mov    %r12,-0x20(%rsp)
    0.00 :	  42f8fc:       nopl   0x0(%rax)
    0.00 :	  42f900:       prefetchnta 0x300(%rsi)
    0.00 :	  42f907:       prefetchnta 0x340(%rsi)
    0.00 :	  42f90e:       dec    %rcx
    0.00 :	  42f911:       mov    (%rsi),%rax
    0.00 :	  42f914:       mov    0x8(%rsi),%r8
    0.00 :	  42f918:       mov    0x10(%rsi),%r9
    0.00 :	  42f91c:       mov    0x18(%rsi),%r10
    0.00 :	  42f920:       mov    0x20(%rsi),%r11
    0.00 :	  42f924:       mov    0x28(%rsi),%r12
    0.00 :	  42f928:       mov    0x30(%rsi),%r13
    0.00 :	  42f92c:       mov    0x38(%rsi),%r14
    0.00 :	  42f930:       movnti %rax,(%rdi)
    0.00 :	  42f934:       movnti %r8,0x8(%rdi)
    0.00 :	  42f939:       movnti %r9,0x10(%rdi)
    0.00 :	  42f93e:       movnti %r10,0x18(%rdi)
    0.00 :	  42f943:       movnti %r11,0x20(%rdi)
    0.00 :	  42f948:       movnti %r12,0x28(%rdi)
    0.00 :	  42f94d:       movnti %r13,0x30(%rdi)
    0.00 :	  42f952:       movnti %r14,0x38(%rdi)
    0.00 :	  42f957:       mov    0x40(%rsi),%rax
    0.00 :	  42f95b:       mov    0x48(%rsi),%r8
    0.00 :	  42f95f:       mov    0x50(%rsi),%r9
    0.00 :	  42f963:       mov    0x58(%rsi),%r10
    0.00 :	  42f967:       mov    0x60(%rsi),%r11
    0.00 :	  42f96b:       mov    0x68(%rsi),%r12
    0.00 :	  42f96f:       mov    0x70(%rsi),%r13
    0.00 :	  42f973:       mov    0x78(%rsi),%r14
    0.00 :	  42f977:       movnti %rax,0x40(%rdi)
    0.00 :	  42f97c:       movnti %r8,0x48(%rdi)
    0.00 :	  42f981:       movnti %r9,0x50(%rdi)
    0.00 :	  42f986:       movnti %r10,0x58(%rdi)
    0.00 :	  42f98b:       movnti %r11,0x60(%rdi)
    0.00 :	  42f990:       movnti %r12,0x68(%rdi)
    0.00 :	  42f995:       movnti %r13,0x70(%rdi)
    0.00 :	  42f99a:       movnti %r14,0x78(%rdi)
    0.00 :	  42f99f:       lea    0x80(%rsi),%rsi
    0.00 :	  42f9a6:       lea    0x80(%rdi),%rdi
    0.00 :	  42f9ad:       jne    42f900 <memcpy+0x390>
    0.00 :	  42f9b3:       sfence 
    0.00 :	  42f9b6:       mov    -0x20(%rsp),%r12
    0.00 :	  42f9bb:       mov    -0x18(%rsp),%r13
    0.00 :	  42f9c0:       mov    -0x10(%rsp),%r14
    0.00 :	  42f9c5:       and    $0x7f,%edx
    0.00 :	  42f9c8:       mov    -0x8(%rsp),%rax
    0.00 :	  42f9cd:       jne    42f579 <memcpy+0x9>
    0.00 :	  42f9d3:       repz retq 
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004299b0 <memset>:
         :	memset():
  100.00 :	  4299b0:       lea    0x69(%rip),%rax        # 429a20 <__memset_sse2>
    0.00 :	  4299b7:       testl  $0x400,0x2a7cff(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  4299c1:       je     4299e9 <memset+0x39>
    0.00 :	  4299c3:       lea    0x174c6(%rip),%rax        # 440e90 <__memset_avx2>
    0.00 :	  4299ca:       testl  $0x1000,0x2a7cec(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  4299d4:       je     4299e9 <memset+0x39>
    0.00 :	  4299d6:       testl  $0x20000,0x2a7ce0(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  4299e0:       je     4299e9 <memset+0x39>
    0.00 :	  4299e2:       lea    0x17647(%rip),%rax        # 441030 <__memset_avx512_no_vzeroupper>
    0.00 :	  4299e9:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000422240 <ptmalloc_init.part.5>:
         :	ptmalloc_init.part.5():
    0.00 :	  422240:       push   %r13
    0.00 :	  422242:       push   %r12
    0.00 :	  422244:       push   %rbp
    0.00 :	  422245:       push   %rbx
    0.00 :	  422246:       sub    $0x8,%rsp
    0.00 :	  42224a:       mov    0x2af3ef(%rip),%r12        # 6d1640 <__environ>
    0.00 :	  422251:       mov    $0xffffffffffffffd8,%rax
    0.00 :	  422258:       movl   $0x0,0x2ad502(%rip)        # 6cf764 <__libc_malloc_initialized>
    0.00 :	  422262:       test   %r12,%r12
    0.00 :	  422265:       movq   $0x6cf800,%fs:(%rax)
    0.00 :	  42226d:       je     42230e <ptmalloc_init.part.5+0xce>
    0.00 :	  422273:       xor    %r13d,%r13d
    0.00 :	  422276:       jmp    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422278:       nopl   0x0(%rax,%rax,1)
    0.00 :	  422280:       add    $0x8,%r12
    0.00 :	  422284:       mov    (%r12),%rbx
    0.00 :	  422288:       test   %rbx,%rbx
    0.00 :	  42228b:       je     422300 <ptmalloc_init.part.5+0xc0>
    0.00 :	  42228d:       cmpb   $0x4d,(%rbx)
    0.00 :	  422290:       jne    422280 <ptmalloc_init.part.5+0x40>
    0.00 :	  422292:       cmpb   $0x41,0x1(%rbx)
    0.00 :	  422296:       jne    422280 <ptmalloc_init.part.5+0x40>
    0.00 :	  422298:       cmpb   $0x4c,0x2(%rbx)
    0.00 :	  42229c:       jne    422280 <ptmalloc_init.part.5+0x40>
    0.00 :	  42229e:       cmpb   $0x4c,0x3(%rbx)
    0.00 :	  4222a2:       jne    422280 <ptmalloc_init.part.5+0x40>
    0.00 :	  4222a4:       cmpb   $0x4f,0x4(%rbx)
    0.00 :	  4222a8:       jne    422280 <ptmalloc_init.part.5+0x40>
    0.00 :	  4222aa:       cmpb   $0x43,0x5(%rbx)
    0.00 :	  4222ae:       jne    422280 <ptmalloc_init.part.5+0x40>
    0.00 :	  4222b0:       cmpb   $0x5f,0x6(%rbx)
    0.00 :	  4222b4:       jne    422280 <ptmalloc_init.part.5+0x40>
    0.00 :	  4222b6:       mov    %rbx,%rbp
    0.00 :	  4222b9:       add    $0x8,%r12
    0.00 :	  4222bd:       add    $0x7,%rbp
    0.00 :	  4222c1:       je     422300 <ptmalloc_init.part.5+0xc0>
    0.00 :	  4222c3:       movzbl 0x7(%rbx),%edx
    0.00 :	  4222c7:       test   %dl,%dl
    0.00 :	  4222c9:       je     422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4222cb:       xor    %eax,%eax
    0.00 :	  4222cd:       cmp    $0x3d,%dl
    0.00 :	  4222d0:       je     422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4222d2:       nopw   0x0(%rax,%rax,1)
    0.00 :	  4222d8:       add    $0x1,%rax
    0.00 :	  4222dc:       movzbl 0x7(%rbx,%rax,1),%edx
    0.00 :	  4222e1:       test   %dl,%dl
    0.00 :	  4222e3:       je     422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4222e5:       cmp    $0x3d,%dl
    0.00 :	  4222e8:       jne    4222d8 <ptmalloc_init.part.5+0x98>
    0.00 :	  4222ea:       sub    $0x6,%rax
    0.00 :	  4222ee:       cmp    $0x9,%rax
    0.00 :	  4222f2:       ja     422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4222f4:       jmpq   *0x4a65b0(,%rax,8)
    0.00 :	  4222fb:       nopl   0x0(%rax,%rax,1)
    0.00 :	  422300:       test   %r13,%r13
    0.00 :	  422303:       je     42230e <ptmalloc_init.part.5+0xce>
    0.00 :	  422305:       movsbl 0x0(%r13),%eax
    0.00 :	  42230a:       test   %al,%al
    0.00 :	  42230c:       jne    422338 <ptmalloc_init.part.5+0xf8>
    0.00 :	  42230e:       mov    0x2af2db(%rip),%rax        # 6d15f0 <__malloc_initialize_hook>
  100.00 :	  422315:       test   %rax,%rax
    0.00 :	  422318:       je     42231c <ptmalloc_init.part.5+0xdc>
    0.00 :	  42231a:       callq  *%rax
    0.00 :	  42231c:       movl   $0x1,0x2ad43e(%rip)        # 6cf764 <__libc_malloc_initialized>
    0.00 :	  422326:       add    $0x8,%rsp
    0.00 :	  42232a:       pop    %rbx
    0.00 :	  42232b:       pop    %rbp
    0.00 :	  42232c:       pop    %r12
    0.00 :	  42232e:       pop    %r13
    0.00 :	  422330:       retq   
    0.00 :	  422331:       nopl   0x0(%rax)
    0.00 :	  422338:       lea    -0x30(%rax),%esi
    0.00 :	  42233b:       mov    $0xfffffffb,%edi
    0.00 :	  422340:       callq  422060 <__libc_mallopt>
    0.00 :	  422345:       mov    0x2ad425(%rip),%edx        # 6cf770 <check_action>
    0.00 :	  42234b:       test   %edx,%edx
    0.00 :	  42234d:       je     42230e <ptmalloc_init.part.5+0xce>
    0.00 :	  42234f:       mov    0x2af2b3(%rip),%eax        # 6d1608 <disallow_malloc_check>
    0.00 :	  422355:       test   %eax,%eax
    0.00 :	  422357:       je     422509 <ptmalloc_init.part.5+0x2c9>
    0.00 :	  42235d:       movl   $0x0,0x2af2a1(%rip)        # 6d1608 <disallow_malloc_check>
    0.00 :	  422367:       jmp    42230e <ptmalloc_init.part.5+0xce>
    0.00 :	  422369:       mov    0x2aac29(%rip),%ecx        # 6ccf98 <__libc_enable_secure>
    0.00 :	  42236f:       test   %ecx,%ecx
    0.00 :	  422371:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422377:       mov    $0xf,%edx
    0.00 :	  42237c:       mov    $0x4a58a2,%esi
    0.00 :	  422381:       mov    %rbp,%rdi
    0.00 :	  422384:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  422389:       test   %eax,%eax
    0.00 :	  42238b:       je     422565 <ptmalloc_init.part.5+0x325>
    0.00 :	  422391:       mov    $0xf,%edx
    0.00 :	  422396:       mov    $0x4a58b2,%esi
    0.00 :	  42239b:       mov    %rbp,%rdi
    0.00 :	  42239e:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  4223a3:       test   %eax,%eax
    0.00 :	  4223a5:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4223ab:       lea    0x17(%rbx),%rdi
    0.00 :	  4223af:       xor    %esi,%esi
    0.00 :	  4223b1:       mov    $0xa,%edx
    0.00 :	  4223b6:       callq  454fa0 <__strtol>
    0.00 :	  4223bb:       mov    $0xfffffffd,%edi
    0.00 :	  4223c0:       mov    %eax,%esi
    0.00 :	  4223c2:       callq  422060 <__libc_mallopt>
    0.00 :	  4223c7:       jmpq   422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4223cc:       nopl   0x0(%rax)
    0.00 :	  4223d0:       mov    0x2aabc2(%rip),%esi        # 6ccf98 <__libc_enable_secure>
    0.00 :	  4223d6:       test   %esi,%esi
    0.00 :	  4223d8:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4223de:       mov    $0xa,%edx
    0.00 :	  4223e3:       mov    $0x4a5897,%esi
    0.00 :	  4223e8:       mov    %rbp,%rdi
    0.00 :	  4223eb:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  4223f0:       test   %eax,%eax
    0.00 :	  4223f2:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4223f8:       lea    0x12(%rbx),%rdi
    0.00 :	  4223fc:       xor    %esi,%esi
    0.00 :	  4223fe:       mov    $0xa,%edx
    0.00 :	  422403:       callq  454fa0 <__strtol>
    0.00 :	  422408:       mov    $0xfffffff9,%edi
    0.00 :	  42240d:       mov    %eax,%esi
    0.00 :	  42240f:       callq  422060 <__libc_mallopt>
    0.00 :	  422414:       jmpq   422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422419:       mov    0x2aab79(%rip),%edi        # 6ccf98 <__libc_enable_secure>
    0.00 :	  42241f:       test   %edi,%edi
    0.00 :	  422421:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422427:       mov    $0x9,%edx
    0.00 :	  42242c:       mov    $0x4a5883,%esi
    0.00 :	  422431:       mov    %rbp,%rdi
    0.00 :	  422434:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  422439:       test   %eax,%eax
    0.00 :	  42243b:       je     422586 <ptmalloc_init.part.5+0x346>
    0.00 :	  422441:       mov    $0x9,%edx
    0.00 :	  422446:       mov    $0x4a588d,%esi
    0.00 :	  42244b:       mov    %rbp,%rdi
    0.00 :	  42244e:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  422453:       test   %eax,%eax
    0.00 :	  422455:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  42245b:       lea    0x11(%rbx),%rdi
    0.00 :	  42245f:       xor    %esi,%esi
    0.00 :	  422461:       mov    $0xa,%edx
    0.00 :	  422466:       callq  454fa0 <__strtol>
    0.00 :	  42246b:       mov    $0xfffffff8,%edi
    0.00 :	  422470:       mov    %eax,%esi
    0.00 :	  422472:       callq  422060 <__libc_mallopt>
    0.00 :	  422477:       jmpq   422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  42247c:       nopl   0x0(%rax)
    0.00 :	  422480:       mov    0x2aab11(%rip),%r8d        # 6ccf98 <__libc_enable_secure>
    0.00 :	  422487:       test   %r8d,%r8d
    0.00 :	  42248a:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422490:       mov    $0x8,%edx
    0.00 :	  422495:       mov    $0x4a5871,%esi
    0.00 :	  42249a:       mov    %rbp,%rdi
    0.00 :	  42249d:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  4224a2:       test   %eax,%eax
    0.00 :	  4224a4:       je     422544 <ptmalloc_init.part.5+0x304>
    0.00 :	  4224aa:       mov    $0x8,%edx
    0.00 :	  4224af:       mov    $0x4a587a,%esi
    0.00 :	  4224b4:       mov    %rbp,%rdi
    0.00 :	  4224b7:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  4224bc:       test   %eax,%eax
    0.00 :	  4224be:       jne    422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4224c4:       lea    0x10(%rbx),%rdi
    0.00 :	  4224c8:       xor    %esi,%esi
    0.00 :	  4224ca:       mov    $0xa,%edx
    0.00 :	  4224cf:       callq  454fa0 <__strtol>
    0.00 :	  4224d4:       mov    $0xfffffffa,%edi
    0.00 :	  4224d9:       mov    %eax,%esi
    0.00 :	  4224db:       callq  422060 <__libc_mallopt>
    0.00 :	  4224e0:       jmpq   422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  4224e5:       nopl   (%rax)
    0.00 :	  4224e8:       mov    $0x6,%edx
    0.00 :	  4224ed:       mov    $0x4a864b,%esi
    0.00 :	  4224f2:       mov    %rbp,%rdi
    0.00 :	  4224f5:       add    $0xe,%rbx
    0.00 :	  4224f9:       callq  400330 <__rela_iplt_end+0x68>
    0.00 :	  4224fe:       test   %eax,%eax
    0.00 :	  422500:       cmove  %rbx,%r13
    0.00 :	  422504:       jmpq   422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422509:       movl   $0x1,0x2af0f9(%rip)        # 6d160c <using_malloc_checking>
    0.00 :	  422513:       movq   $0x41fdc0,0x2ad26a(%rip)        # 6cf788 <__malloc_hook>
    0.00 :	  42251e:       movq   $0x41c7e0,0x2af0bf(%rip)        # 6d15e8 <__free_hook>
    0.00 :	  422529:       movq   $0x4206d0,0x2ad24c(%rip)        # 6cf780 <__realloc_hook>
    0.00 :	  422534:       movq   $0x41ff10,0x2ad239(%rip)        # 6cf778 <__memalign_hook>
    0.00 :	  42253f:       jmpq   42230e <ptmalloc_init.part.5+0xce>
    0.00 :	  422544:       lea    0x10(%rbx),%rdi
    0.00 :	  422548:       xor    %esi,%esi
    0.00 :	  42254a:       mov    $0xa,%edx
    0.00 :	  42254f:       callq  454fa0 <__strtol>
    0.00 :	  422554:       mov    $0xfffffffe,%edi
    0.00 :	  422559:       mov    %eax,%esi
    0.00 :	  42255b:       callq  422060 <__libc_mallopt>
    0.00 :	  422560:       jmpq   422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422565:       lea    0x17(%rbx),%rdi
    0.00 :	  422569:       xor    %esi,%esi
    0.00 :	  42256b:       mov    $0xa,%edx
    0.00 :	  422570:       callq  454fa0 <__strtol>
    0.00 :	  422575:       mov    $0xffffffff,%edi
    0.00 :	  42257a:       mov    %eax,%esi
    0.00 :	  42257c:       callq  422060 <__libc_mallopt>
    0.00 :	  422581:       jmpq   422284 <ptmalloc_init.part.5+0x44>
    0.00 :	  422586:       lea    0x11(%rbx),%rdi
    0.00 :	  42258a:       xor    %esi,%esi
    0.00 :	  42258c:       mov    $0xa,%edx
    0.00 :	  422591:       callq  454fa0 <__strtol>
    0.00 :	  422596:       mov    $0xfffffffc,%edi
    0.00 :	  42259b:       mov    %eax,%esi
    0.00 :	  42259d:       callq  422060 <__libc_mallopt>
    0.00 :	  4225a2:       jmpq   422284 <ptmalloc_init.part.5+0x44>
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000404389 <shake128_squeezeblocks>:
         :	shake128_squeezeblocks():
         :	  keccak_absorb(s, SHAKE128_RATE, input, inputByteLen, 0x1F);
         :	}
         :
         :
         :	void shake128_squeezeblocks(unsigned char *output, unsigned long long nblocks, uint64_t *s)
         :	{
    0.00 :	  404389:       push   %rbp
    0.00 :	  40438a:       mov    %rsp,%rbp
    0.00 :	  40438d:       sub    $0x18,%rsp
    0.00 :	  404391:       mov    %rdi,-0x8(%rbp)
    0.00 :	  404395:       mov    %rsi,-0x10(%rbp)
    0.00 :	  404399:       mov    %rdx,-0x18(%rbp)
         :	  keccak_squeezeblocks(output, nblocks, s, SHAKE128_RATE);
    0.00 :	  40439d:       mov    -0x18(%rbp),%rdx
    0.00 :	  4043a1:       mov    -0x10(%rbp),%rsi
    0.00 :	  4043a5:       mov    -0x8(%rbp),%rax
    0.00 :	  4043a9:       mov    $0xa8,%ecx
    0.00 :	  4043ae:       mov    %rax,%rdi
    0.00 :	  4043b1:       callq  4042d3 <keccak_squeezeblocks>
         :	}
  100.00 :	  4043b6:       nop
    0.00 :	  4043b7:       leaveq 
    0.00 :	  4043b8:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000424820 <strcmp>:
         :	strcmp():
  100.00 :	  424820:       lea    0xcd79(%rip),%rax        # 4315a0 <__strcmp_sse2_unaligned>
    0.00 :	  424827:       testl  $0x10,0x2ace8f(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  424831:       jne    42484d <strcmp+0x2d>
    0.00 :	  424833:       lea    0xbb06(%rip),%rax        # 430340 <__strcmp_ssse3>
    0.00 :	  42483a:       testl  $0x200,0x2ace4c(%rip)        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  424844:       jne    42484d <strcmp+0x2d>
    0.00 :	  424846:       lea    0x3(%rip),%rax        # 424850 <__GI_strcmp>
    0.00 :	  42484d:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426a40 <strcpy>:
         :	strcpy():
  100.00 :	  426a40:       lea    0x17839(%rip),%rax        # 43e280 <__strcpy_sse2_unaligned>
    0.00 :	  426a47:       testl  $0x10,0x2aac6f(%rip)        # 6d16c0 <_dl_x86_cpu_features+0x40>
    0.00 :	  426a51:       jne    426a6d <strcpy+0x2d>
    0.00 :	  426a53:       lea    0x16(%rip),%rax        # 426a70 <__GI_strcpy>
    0.00 :	  426a5a:       testl  $0x200,0x2aac2c(%rip)        # 6d1690 <_dl_x86_cpu_features+0x10>
    0.00 :	  426a64:       je     426a6d <strcpy+0x2d>
    0.00 :	  426a66:       lea    0x14853(%rip),%rax        # 43b2c0 <__strcpy_ssse3>
    0.00 :	  426a6d:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000426ba0 <strlen>:
         :	strlen():
    0.00 :	  426ba0:       pxor   %xmm0,%xmm0
    0.00 :	  426ba4:       pxor   %xmm1,%xmm1
    0.00 :	  426ba8:       pxor   %xmm2,%xmm2
    0.00 :	  426bac:       pxor   %xmm3,%xmm3
    0.00 :	  426bb0:       mov    %rdi,%rax
    0.00 :	  426bb3:       mov    %rdi,%rcx
    0.00 :	  426bb6:       and    $0xfff,%rcx
    0.00 :	  426bbd:       cmp    $0xfcf,%rcx
    0.00 :	  426bc4:       ja     426c30 <strlen+0x90>
    0.00 :	  426bc6:       movdqu (%rax),%xmm4
    0.00 :	  426bca:       pcmpeqb %xmm0,%xmm4
  100.00 :	  426bce:       pmovmskb %xmm4,%edx
    0.00 :	  426bd2:       test   %edx,%edx
    0.00 :	  426bd4:       je     426bda <strlen+0x3a>
    0.00 :	  426bd6:       bsf    %edx,%eax
    0.00 :	  426bd9:       retq   
    0.00 :	  426bda:       and    $0xfffffffffffffff0,%rax
    0.00 :	  426bde:       pcmpeqb 0x10(%rax),%xmm1
    0.00 :	  426be3:       pcmpeqb 0x20(%rax),%xmm2
    0.00 :	  426be8:       pcmpeqb 0x30(%rax),%xmm3
    0.00 :	  426bed:       pmovmskb %xmm1,%edx
    0.00 :	  426bf1:       pmovmskb %xmm2,%r8d
    0.00 :	  426bf6:       pmovmskb %xmm3,%ecx
    0.00 :	  426bfa:       shl    $0x10,%rdx
    0.00 :	  426bfe:       shl    $0x10,%rcx
    0.00 :	  426c02:       or     %r8,%rcx
    0.00 :	  426c05:       shl    $0x20,%rcx
    0.00 :	  426c09:       or     %rcx,%rdx
    0.00 :	  426c0c:       mov    %rdi,%rcx
    0.00 :	  426c0f:       xor    %rax,%rcx
    0.00 :	  426c12:       and    $0xffffffffffffffc0,%rax
    0.00 :	  426c16:       sar    %cl,%rdx
    0.00 :	  426c19:       test   %rdx,%rdx
    0.00 :	  426c1c:       je     426ca0 <strlen+0x100>
    0.00 :	  426c22:       bsf    %rdx,%rax
    0.00 :	  426c26:       retq   
    0.00 :	  426c27:       nopw   0x0(%rax,%rax,1)
    0.00 :	  426c30:       and    $0xffffffffffffffc0,%rax
    0.00 :	  426c34:       pcmpeqb (%rax),%xmm0
    0.00 :	  426c38:       pcmpeqb 0x10(%rax),%xmm1
    0.00 :	  426c3d:       pcmpeqb 0x20(%rax),%xmm2
    0.00 :	  426c42:       pcmpeqb 0x30(%rax),%xmm3
    0.00 :	  426c47:       pmovmskb %xmm0,%esi
    0.00 :	  426c4b:       pmovmskb %xmm1,%edx
    0.00 :	  426c4f:       pmovmskb %xmm2,%r8d
    0.00 :	  426c54:       pmovmskb %xmm3,%ecx
    0.00 :	  426c58:       shl    $0x10,%rdx
    0.00 :	  426c5c:       shl    $0x10,%rcx
    0.00 :	  426c60:       or     %rsi,%rdx
    0.00 :	  426c63:       or     %r8,%rcx
    0.00 :	  426c66:       shl    $0x20,%rcx
    0.00 :	  426c6a:       or     %rcx,%rdx
    0.00 :	  426c6d:       mov    %rdi,%rcx
    0.00 :	  426c70:       xor    %rax,%rcx
    0.00 :	  426c73:       and    $0xffffffffffffffc0,%rax
    0.00 :	  426c77:       sar    %cl,%rdx
    0.00 :	  426c7a:       test   %rdx,%rdx
    0.00 :	  426c7d:       je     426c90 <strlen+0xf0>
    0.00 :	  426c7f:       bsf    %rdx,%rax
    0.00 :	  426c83:       retq   
    0.00 :	  426c84:       xchg   %ax,%ax
    0.00 :	  426c86:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  426c90:       pxor   %xmm1,%xmm1
    0.00 :	  426c94:       pxor   %xmm2,%xmm2
    0.00 :	  426c98:       pxor   %xmm3,%xmm3
    0.00 :	  426c9c:       nopl   0x0(%rax)
    0.00 :	  426ca0:       movdqa 0x40(%rax),%xmm0
    0.00 :	  426ca5:       pminub 0x50(%rax),%xmm0
    0.00 :	  426caa:       pminub 0x60(%rax),%xmm0
    0.00 :	  426caf:       pminub 0x70(%rax),%xmm0
    0.00 :	  426cb4:       pcmpeqb %xmm3,%xmm0
    0.00 :	  426cb8:       pmovmskb %xmm0,%edx
    0.00 :	  426cbc:       test   %edx,%edx
    0.00 :	  426cbe:       jne    426cf0 <strlen+0x150>
    0.00 :	  426cc0:       sub    $0xffffffffffffff80,%rax
    0.00 :	  426cc4:       movdqa (%rax),%xmm0
    0.00 :	  426cc8:       pminub 0x10(%rax),%xmm0
    0.00 :	  426ccd:       pminub 0x20(%rax),%xmm0
    0.00 :	  426cd2:       pminub 0x30(%rax),%xmm0
    0.00 :	  426cd7:       pcmpeqb %xmm3,%xmm0
    0.00 :	  426cdb:       pmovmskb %xmm0,%edx
    0.00 :	  426cdf:       test   %edx,%edx
    0.00 :	  426ce1:       jne    426cf4 <strlen+0x154>
    0.00 :	  426ce3:       jmp    426ca0 <strlen+0x100>
    0.00 :	  426ce5:       nop
    0.00 :	  426ce6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  426cf0:       add    $0x40,%rax
    0.00 :	  426cf4:       pxor   %xmm0,%xmm0
    0.00 :	  426cf8:       pcmpeqb (%rax),%xmm0
    0.00 :	  426cfc:       pcmpeqb 0x10(%rax),%xmm1
    0.00 :	  426d01:       pcmpeqb 0x20(%rax),%xmm2
    0.00 :	  426d06:       pcmpeqb 0x30(%rax),%xmm3
    0.00 :	  426d0b:       pmovmskb %xmm0,%esi
    0.00 :	  426d0f:       pmovmskb %xmm1,%edx
    0.00 :	  426d13:       pmovmskb %xmm2,%r8d
    0.00 :	  426d18:       pmovmskb %xmm3,%ecx
    0.00 :	  426d1c:       shl    $0x10,%rdx
    0.00 :	  426d20:       shl    $0x10,%rcx
    0.00 :	  426d24:       or     %rsi,%rdx
    0.00 :	  426d27:       or     %r8,%rcx
    0.00 :	  426d2a:       shl    $0x20,%rcx
    0.00 :	  426d2e:       or     %rcx,%rdx
    0.00 :	  426d31:       bsf    %rdx,%rdx
    0.00 :	  426d35:       add    %rdx,%rax
    0.00 :	  426d38:       sub    %rdi,%rax
    0.00 :	  426d3b:       retq   
 Percent |	Source code & Disassembly of test_newhope for cycles:u
----------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000468bc0 <strrchr>:
         :	strrchr():
  100.00 :	  468bc0:       movd   %esi,%xmm1
    0.00 :	  468bc4:       mov    %rdi,%rax
    0.00 :	  468bc7:       and    $0xfff,%eax
    0.00 :	  468bcc:       punpcklbw %xmm1,%xmm1
    0.00 :	  468bd0:       cmp    $0xfc0,%rax
    0.00 :	  468bd6:       punpcklwd %xmm1,%xmm1
    0.00 :	  468bda:       pshufd $0x0,%xmm1,%xmm1
    0.00 :	  468bdf:       ja     468de0 <strrchr+0x220>
    0.00 :	  468be5:       movdqu (%rdi),%xmm0
    0.00 :	  468be9:       pxor   %xmm2,%xmm2
    0.00 :	  468bed:       movdqa %xmm0,%xmm3
    0.00 :	  468bf1:       pcmpeqb %xmm1,%xmm0
    0.00 :	  468bf5:       pcmpeqb %xmm2,%xmm3
    0.00 :	  468bf9:       pmovmskb %xmm0,%ecx
    0.00 :	  468bfd:       pmovmskb %xmm3,%edx
    0.00 :	  468c01:       test   %rdx,%rdx
    0.00 :	  468c04:       je     468c20 <strrchr+0x60>
    0.00 :	  468c06:       lea    -0x1(%rdx),%rax
    0.00 :	  468c0a:       xor    %rdx,%rax
    0.00 :	  468c0d:       and    %rcx,%rax
    0.00 :	  468c10:       je     468dd0 <strrchr+0x210>
    0.00 :	  468c16:       bsr    %rax,%rax
    0.00 :	  468c1a:       add    %rdi,%rax
    0.00 :	  468c1d:       retq   
    0.00 :	  468c1e:       xchg   %ax,%ax
    0.00 :	  468c20:       movdqu 0x10(%rdi),%xmm4
    0.00 :	  468c25:       movdqa %xmm4,%xmm5
    0.00 :	  468c29:       movdqu 0x20(%rdi),%xmm3
    0.00 :	  468c2e:       pcmpeqb %xmm1,%xmm4
    0.00 :	  468c32:       pcmpeqb %xmm2,%xmm5
    0.00 :	  468c36:       movdqu 0x30(%rdi),%xmm0
    0.00 :	  468c3b:       pmovmskb %xmm5,%edx
    0.00 :	  468c3f:       movdqa %xmm3,%xmm5
    0.00 :	  468c43:       pcmpeqb %xmm1,%xmm3
    0.00 :	  468c47:       pcmpeqb %xmm2,%xmm5
    0.00 :	  468c4b:       pcmpeqb %xmm0,%xmm2
    0.00 :	  468c4f:       shl    $0x10,%rdx
    0.00 :	  468c53:       pmovmskb %xmm3,%r8d
    0.00 :	  468c58:       pmovmskb %xmm5,%eax
    0.00 :	  468c5c:       pmovmskb %xmm2,%esi
    0.00 :	  468c60:       shl    $0x20,%r8
    0.00 :	  468c64:       shl    $0x20,%rax
    0.00 :	  468c68:       pcmpeqb %xmm1,%xmm0
    0.00 :	  468c6c:       or     %rdx,%rax
    0.00 :	  468c6f:       mov    %rsi,%rdx
    0.00 :	  468c72:       pmovmskb %xmm4,%esi
    0.00 :	  468c76:       shl    $0x30,%rdx
    0.00 :	  468c7a:       shl    $0x10,%rsi
    0.00 :	  468c7e:       or     %r8,%rsi
    0.00 :	  468c81:       or     %rcx,%rsi
    0.00 :	  468c84:       pmovmskb %xmm0,%ecx
    0.00 :	  468c88:       shl    $0x30,%rcx
    0.00 :	  468c8c:       or     %rcx,%rsi
    0.00 :	  468c8f:       or     %rdx,%rax
    0.00 :	  468c92:       je     468cb0 <strrchr+0xf0>
    0.00 :	  468c94:       lea    -0x1(%rax),%rcx
    0.00 :	  468c98:       xor    %rax,%rcx
    0.00 :	  468c9b:       and    %rcx,%rsi
    0.00 :	  468c9e:       je     468dd0 <strrchr+0x210>
    0.00 :	  468ca4:       bsr    %rsi,%rsi
    0.00 :	  468ca8:       lea    (%rdi,%rsi,1),%rax
    0.00 :	  468cac:       retq   
    0.00 :	  468cad:       nopl   (%rax)
    0.00 :	  468cb0:       test   %rsi,%rsi
    0.00 :	  468cb3:       mov    %rdi,%rcx
    0.00 :	  468cb6:       je     468dc0 <strrchr+0x200>
    0.00 :	  468cbc:       add    $0x40,%rdi
    0.00 :	  468cc0:       pxor   %xmm7,%xmm7
    0.00 :	  468cc4:       and    $0xffffffffffffffc0,%rdi
    0.00 :	  468cc8:       jmp    468cdf <strrchr+0x11f>
    0.00 :	  468cca:       nopw   0x0(%rax,%rax,1)
    0.00 :	  468cd0:       test   %rdx,%rdx
    0.00 :	  468cd3:       cmovne %rdx,%rsi
    0.00 :	  468cd7:       cmovne %rdi,%rcx
    0.00 :	  468cdb:       add    $0x40,%rdi
    0.00 :	  468cdf:       movdqa 0x20(%rdi),%xmm3
    0.00 :	  468ce4:       pxor   %xmm6,%xmm6
    0.00 :	  468ce8:       movdqa 0x30(%rdi),%xmm2
    0.00 :	  468ced:       movdqa %xmm3,%xmm0
    0.00 :	  468cf1:       movdqa 0x10(%rdi),%xmm4
    0.00 :	  468cf6:       pminub %xmm2,%xmm0
    0.00 :	  468cfa:       movdqa (%rdi),%xmm5
    0.00 :	  468cfe:       pminub %xmm4,%xmm0
    0.00 :	  468d02:       pminub %xmm5,%xmm0
    0.00 :	  468d06:       pcmpeqb %xmm7,%xmm0
    0.00 :	  468d0a:       pmovmskb %xmm0,%eax
    0.00 :	  468d0e:       movdqa %xmm5,%xmm0
    0.00 :	  468d12:       pcmpeqb %xmm1,%xmm0
    0.00 :	  468d16:       pmovmskb %xmm0,%r9d
    0.00 :	  468d1b:       movdqa %xmm4,%xmm0
    0.00 :	  468d1f:       pcmpeqb %xmm1,%xmm0
    0.00 :	  468d23:       pmovmskb %xmm0,%edx
    0.00 :	  468d27:       movdqa %xmm3,%xmm0
    0.00 :	  468d2b:       pcmpeqb %xmm1,%xmm0
    0.00 :	  468d2f:       shl    $0x10,%rdx
    0.00 :	  468d33:       pmovmskb %xmm0,%r10d
    0.00 :	  468d38:       movdqa %xmm2,%xmm0
    0.00 :	  468d3c:       pcmpeqb %xmm1,%xmm0
    0.00 :	  468d40:       shl    $0x20,%r10
    0.00 :	  468d44:       or     %r10,%rdx
    0.00 :	  468d47:       pmovmskb %xmm0,%r8d
    0.00 :	  468d4c:       or     %r9,%rdx
    0.00 :	  468d4f:       shl    $0x30,%r8
    0.00 :	  468d53:       or     %r8,%rdx
    0.00 :	  468d56:       test   %eax,%eax
    0.00 :	  468d58:       je     468cd0 <strrchr+0x110>
    0.00 :	  468d5e:       pcmpeqb %xmm6,%xmm4
    0.00 :	  468d62:       pcmpeqb %xmm6,%xmm3
    0.00 :	  468d66:       pcmpeqb %xmm6,%xmm5
    0.00 :	  468d6a:       pmovmskb %xmm4,%eax
    0.00 :	  468d6e:       pmovmskb %xmm3,%r10d
    0.00 :	  468d73:       pcmpeqb %xmm6,%xmm2
    0.00 :	  468d77:       pmovmskb %xmm5,%r9d
    0.00 :	  468d7c:       shl    $0x20,%r10
    0.00 :	  468d80:       shl    $0x10,%rax
    0.00 :	  468d84:       pmovmskb %xmm2,%r8d
    0.00 :	  468d89:       or     %r10,%rax
    0.00 :	  468d8c:       or     %r9,%rax
    0.00 :	  468d8f:       shl    $0x30,%r8
    0.00 :	  468d93:       or     %r8,%rax
    0.00 :	  468d96:       lea    -0x1(%rax),%r8
    0.00 :	  468d9a:       xor    %rax,%r8
    0.00 :	  468d9d:       and    %r8,%rdx
    0.00 :	  468da0:       cmovne %rdi,%rcx
    0.00 :	  468da4:       cmovne %rdx,%rsi
    0.00 :	  468da8:       bsr    %rsi,%rsi
    0.00 :	  468dac:       lea    (%rcx,%rsi,1),%rax
    0.00 :	  468db0:       retq   
    0.00 :	  468db1:       nopl   0x0(%rax,%rax,1)
    0.00 :	  468db6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  468dc0:       mov    $0x1,%esi
    0.00 :	  468dc5:       xor    %ecx,%ecx
    0.00 :	  468dc7:       jmpq   468cbc <strrchr+0xfc>
    0.00 :	  468dcc:       nopl   0x0(%rax)
    0.00 :	  468dd0:       xor    %eax,%eax
    0.00 :	  468dd2:       retq   
    0.00 :	  468dd3:       nopl   (%rax)
    0.00 :	  468dd6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :	  468de0:       mov    %rdi,%rax
    0.00 :	  468de3:       pxor   %xmm0,%xmm0
    0.00 :	  468de7:       and    $0xffffffffffffffc0,%rax
    0.00 :	  468deb:       movdqu (%rax),%xmm5
    0.00 :	  468def:       movdqa %xmm5,%xmm6
    0.00 :	  468df3:       movdqu 0x10(%rax),%xmm4
    0.00 :	  468df8:       pcmpeqb %xmm1,%xmm5
    0.00 :	  468dfc:       pcmpeqb %xmm0,%xmm6
    0.00 :	  468e00:       movdqu 0x20(%rax),%xmm3
    0.00 :	  468e05:       pmovmskb %xmm6,%esi
    0.00 :	  468e09:       movdqa %xmm4,%xmm6
    0.00 :	  468e0d:       movdqu 0x30(%rax),%xmm2
    0.00 :	  468e12:       pcmpeqb %xmm1,%xmm4
    0.00 :	  468e16:       pcmpeqb %xmm0,%xmm6
    0.00 :	  468e1a:       pmovmskb %xmm6,%edx
    0.00 :	  468e1e:       movdqa %xmm3,%xmm6
    0.00 :	  468e22:       pcmpeqb %xmm1,%xmm3
    0.00 :	  468e26:       pcmpeqb %xmm0,%xmm6
    0.00 :	  468e2a:       pcmpeqb %xmm2,%xmm0
    0.00 :	  468e2e:       shl    $0x10,%rdx
    0.00 :	  468e32:       pmovmskb %xmm3,%r9d
    0.00 :	  468e37:       pmovmskb %xmm6,%r8d
    0.00 :	  468e3c:       pmovmskb %xmm0,%ecx
    0.00 :	  468e40:       shl    $0x20,%r9
    0.00 :	  468e44:       shl    $0x20,%r8
    0.00 :	  468e48:       pcmpeqb %xmm1,%xmm2
    0.00 :	  468e4c:       or     %r8,%rdx
    0.00 :	  468e4f:       shl    $0x30,%rcx
    0.00 :	  468e53:       pmovmskb %xmm5,%r8d
    0.00 :	  468e58:       or     %rsi,%rdx
    0.00 :	  468e5b:       pmovmskb %xmm4,%esi
    0.00 :	  468e5f:       or     %rcx,%rdx
    0.00 :	  468e62:       pmovmskb %xmm2,%ecx
    0.00 :	  468e66:       shl    $0x10,%rsi
    0.00 :	  468e6a:       shl    $0x30,%rcx
    0.00 :	  468e6e:       or     %r9,%rsi
    0.00 :	  468e71:       or     %r8,%rsi
    0.00 :	  468e74:       or     %rcx,%rsi
    0.00 :	  468e77:       mov    %edi,%ecx
    0.00 :	  468e79:       sub    %eax,%ecx
    0.00 :	  468e7b:       shr    %cl,%rdx
    0.00 :	  468e7e:       shr    %cl,%rsi
    0.00 :	  468e81:       test   %rdx,%rdx
    0.00 :	  468e84:       je     468cb0 <strrchr+0xf0>
    0.00 :	  468e8a:       lea    -0x1(%rdx),%rax
    0.00 :	  468e8e:       xor    %rdx,%rax
    0.00 :	  468e91:       and    %rax,%rsi
    0.00 :	  468e94:       je     468dd0 <strrchr+0x210>
    0.00 :	  468e9a:       bsr    %rsi,%rax
    0.00 :	  468e9e:       add    %rdi,%rax
    0.00 :	  468ea1:       retq   
 Percent |	Source code & Disassembly of test_newhope for cache-references:u
--------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000442780 <__libc_read>:
         :	__read():
    0.00 :	  442780:       cmpl   $0x0,0x28fa35(%rip)        # 6d21bc <__libc_multiple_threads>
   90.24 :	  442787:       jne    44279d <__read_nocancel+0x14>
         :
         :	0000000000442789 <__read_nocancel>:
    4.88 :	  442789:       mov    $0x0,%eax
    0.00 :	  44278e:       syscall 
    0.00 :	  442790:       cmp    $0xfffffffffffff001,%rax
    0.00 :	  442796:       jae    447720 <__syscall_error>
    4.88 :	  44279c:       retq   
    0.00 :	  44279d:       sub    $0x8,%rsp
    0.00 :	  4427a1:       callq  445be0 <__libc_enable_asynccancel>
    0.00 :	  4427a6:       mov    %rax,(%rsp)
    0.00 :	  4427aa:       mov    $0x0,%eax
    0.00 :	  4427af:       syscall 
    0.00 :	  4427b1:       mov    (%rsp),%rdi
    0.00 :	  4427b5:       mov    %rax,%rdx
    0.00 :	  4427b8:       callq  445c40 <__libc_disable_asynccancel>
    0.00 :	  4427bd:       mov    %rdx,%rax
    0.00 :	  4427c0:       add    $0x8,%rsp
    0.00 :	  4427c4:       cmp    $0xfffffffffffff001,%rax
    0.00 :	  4427ca:       jae    447720 <__syscall_error>
    0.00 :	  4427d0:       retq   
 Percent |	Source code & Disassembly of test_newhope for cache-references:u
--------------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	000000000040458f <test_keys>:
         :	test_keys():
         :	  }
         :	  return 0;
         :	}
         :
         :
         :	int test_keys(){
    0.00 :	  40458f:       lea    0x8(%rsp),%r10
    0.00 :	  404594:       and    $0xffffffffffffffe0,%rsp
    0.00 :	  404598:       pushq  -0x8(%r10)
    0.00 :	  40459c:       push   %rbp
    0.00 :	  40459d:       mov    %rsp,%rbp
    0.00 :	  4045a0:       push   %r10
    0.00 :	  4045a2:       sub    $0x1788,%rsp
    0.00 :	  4045a9:       mov    %fs:0x28,%rax
    0.00 :	  4045b2:       mov    %rax,-0x18(%rbp)
    0.00 :	  4045b6:       xor    %eax,%eax
         :	  unsigned char sendb[NEWHOPE_SENDBBYTES];
         :	  int i;
         :
         :
         :
         :	  for(i=0; i<NTESTS; i++)
    0.00 :	  4045b8:       movl   $0x0,-0x1774(%rbp)
    0.00 :	  4045c2:       jmp    404604 <test_keys+0x75>
         :	  {
         :	    //Alice generates a public key
         :	    newhope_keygen(senda, &sk_a);
    0.00 :	  4045c4:       lea    -0x1770(%rbp),%rdx
    0.00 :	  4045cb:       lea    -0xf40(%rbp),%rax
    0.00 :	  4045d2:       mov    %rdx,%rsi
    0.00 :	  4045d5:       mov    %rax,%rdi
    0.00 :	  4045d8:       callq  402839 <newhope_keygen>
         :
         :	    //Bob derives a secret key and creates a response
         :	    //newhope_sharedb(key_b, sendb, senda);
         :	  
         :	    //Alice uses Bobs response to get her secret key
         :	    newhope_shareda(key_a, &sk_a, sendb);
   58.33 :	  4045dd:       lea    -0x820(%rbp),%rdx
    8.33 :	  4045e4:       lea    -0x1770(%rbp),%rcx
    0.00 :	  4045eb:       lea    -0xf60(%rbp),%rax
    8.33 :	  4045f2:       mov    %rcx,%rsi
    0.00 :	  4045f5:       mov    %rax,%rdi
    0.00 :	  4045f8:       callq  402bb6 <newhope_shareda>
         :	  unsigned char sendb[NEWHOPE_SENDBBYTES];
         :	  int i;
         :
         :
         :
         :	  for(i=0; i<NTESTS; i++)
    0.00 :	  4045fd:       addl   $0x1,-0x1774(%rbp)
   25.00 :	  404604:       cmpl   $0x270f,-0x1774(%rbp)
    0.00 :	  40460e:       jle    4045c4 <test_keys+0x35>
         :
         :	 //  if(memcmp(key_a, key_b, 32)) //compares the first 32 bytes
         :	  //    printf("ERROR keys\n");
         :	  }
         :
         :	  return 0;
    0.00 :	  404610:       mov    $0x0,%eax
         :	}
    0.00 :	  404615:       mov    -0x18(%rbp),%rcx
    0.00 :	  404619:       xor    %fs:0x28,%rcx
    0.00 :	  404622:       je     404629 <test_keys+0x9a>
    0.00 :	  404624:       callq  446080 <__stack_chk_fail>
    0.00 :	  404629:       add    $0x1788,%rsp
    0.00 :	  404630:       pop    %r10
    0.00 :	  404632:       pop    %rbp
    0.00 :	  404633:       lea    -0x8(%r10),%rsp
    0.00 :	  404637:       retq   
 Percent |	Source code & Disassembly of test_newhope for cache-misses:u
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000418e40 <_IO_setb>:
         :	_IO_setb():
  100.00 :	  418e40:       push   %rbx
    0.00 :	  418e41:       mov    %rdi,%rbx
    0.00 :	  418e44:       sub    $0x20,%rsp
    0.00 :	  418e48:       mov    0x38(%rdi),%rdi
    0.00 :	  418e4c:       mov    (%rbx),%eax
    0.00 :	  418e4e:       test   %rdi,%rdi
    0.00 :	  418e51:       je     418e57 <_IO_setb+0x17>
    0.00 :	  418e53:       test   $0x1,%al
    0.00 :	  418e55:       je     418e78 <_IO_setb+0x38>
    0.00 :	  418e57:       mov    %rdx,0x40(%rbx)
    0.00 :	  418e5b:       mov    %eax,%edx
    0.00 :	  418e5d:       or     $0x1,%eax
    0.00 :	  418e60:       and    $0xfffffffe,%edx
    0.00 :	  418e63:       test   %ecx,%ecx
    0.00 :	  418e65:       mov    %rsi,0x38(%rbx)
    0.00 :	  418e69:       cmovne %edx,%eax
    0.00 :	  418e6c:       mov    %eax,(%rbx)
    0.00 :	  418e6e:       add    $0x20,%rsp
    0.00 :	  418e72:       pop    %rbx
    0.00 :	  418e73:       retq   
    0.00 :	  418e74:       nopl   0x0(%rax)
    0.00 :	  418e78:       mov    %ecx,0x1c(%rsp)
    0.00 :	  418e7c:       mov    %rdx,0x10(%rsp)
    0.00 :	  418e81:       mov    %rsi,0x8(%rsp)
    0.00 :	  418e86:       callq  421300 <__cfree>
    0.00 :	  418e8b:       mov    (%rbx),%eax
    0.00 :	  418e8d:       mov    0x1c(%rsp),%ecx
    0.00 :	  418e91:       mov    0x10(%rsp),%rdx
    0.00 :	  418e96:       mov    0x8(%rsp),%rsi
    0.00 :	  418e9b:       jmp    418e57 <_IO_setb+0x17>
